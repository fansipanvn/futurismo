#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: MOOC, 技術メモ
#+TAGS: coursera, music, Python
#+DESCRIPTION: coursera で Survey of Music Technology をうけたまとめ
#+TITLE: テクノミュージックの技術を体験! coursera で Survey of Music Technology をうける
* はじめに
  最近 perfume がすごく好きになった.
  中田ヤスタカ氏の CAPSULE も好き.きゃりーぱみゅぱみゅは好きでない.
  
  そんな中, テクノミュージックの講座を coursera で見つけたので, Try してみた.
  - [[https://www.coursera.org/course/musictech][Survey of Music Technology | Coursera]]

  この講座の内容は大きく分けて 2 つ.
  - 音楽技術の歴史の紹介
  - テクノミュージックの作曲の実践

  中田ヤスタカさんのような曲がいつかつくれるようになる?!

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/XaT2_0hE8_Y" frameborder="0" allowfullscreen></iframe>
#+END_HTML

* コンピュータと音楽の歴史を学ぶ
  この講座のひとつの特徴は, 
  音楽の技術の歴史を動画を交えて紹介していくところ.

  音楽の技術とは, コンピュータと音楽の関わりの歴史.
  だいたい, 80 年前くらい前から現在までの歴史の紹介.

  Youtube で紹介された動画は, 再生リストにまとめてみた.
  ここの技術については, あとで動画を交えながら紹介.

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/videoseries?list=PLOEQDyige0NYA_xpI_Cy7oWqbzOciWEGa" frameborder="0" allowfullscreen></iframe>
#+END_HTML

** 現代音楽の軌跡をたどる旅
  それは, 現代音楽の歴史といってもいいかもしれない.
  
  クラシック音楽がずっと好きだった.
  しかし, そんな自分も, 
  最近はクラシック音楽に対する興味をほとんど失ってしまった.
  10 年以上きいてきたが, 飽きた.

  なぜなら, それはクラシック (古典) だから.新しさがないのだ. 

  クラシックやオペラの楽しみかたの一つは, 
  作品に対する指揮者や演出家によって異なる解釈の差異をみつけることだ.
  昔は, そういう解釈の違いがおもしろいと思ったが,最近は, 気の毒におもう.

  作品という絶対的なルールのなかで, なんとか独自性をだそう,
  指揮者や演出家が必死でもがいているように見える.

  そんなことを思っている今日この頃に, この講座を受けた.

  この講座で紹介される音楽は, 奇妙な音楽なのだが,
  それらは, 既存の音楽の枠組みから如何にしてはみ出るかという挑戦の記録だ.

  クラシック音楽が好きだったころは, 現代音楽はまったく好きになれなかっ
  たが, この講座を通じて, 現代音楽に好感をもち, 興味が沸いた.

  彼らクリエイターは, 古典に頼ろうとせずに, 未来をつくろうとしている!

* テクノミュージックの作曲に挑戦
  この講座のもう一つの魅力は, テクノミュージックの作曲をするところ.
  2 つの課題がだされる.

** DAW (Reaper) をつかった作曲
   講義では DAW (digital audio workstation) という,
   テクノミュージックをつくるためのソフトウェアをつかう.

   具体的には, Reaper を利用する.これは, 60 日間限定の free 版.
   - [[http://reaper.fm/][REAPER | Audio Production Without Limits]]

   Windows 版と Mac 版しかなくて, Linux では利用できなさそうだったので,
   Windows 環境で作業することにした. 

   日本語化パッチ
   - [[https://github.com/chiepomme/REAPERJapanesePatcher/wiki][Home · chiepomme/REAPERJapanesePatcher Wiki · GitHub]]

   講義の中では 2 週にわたって, Reaper の使い方が紹介される.
   それをもちいて, 自分で曲をつくる宿題がだされる.

   Perfume の曲も, こんな機材を使いながらつくるんだろうなとおもうと,
   なんだかうれしくなる.

   課題は, じつは提出期限に間に合わなくて, 
   期限後に 3 時間くらいでやっつけで作成した. 
   宿題だしわすれて単位を落とすというのは, 非常によくあるパターン...

*** 作成した曲
    #+BEGIN_HTML
    <iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/174830092&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
    #+END_HTML

** アルゴリズム作曲 (Algorithmic Composition)
   2 つめの課題は, アルゴリズム作曲.
  - [[http://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E4%BD%9C%E6%9B%B2%E6%B3%95][アルゴリズム作曲法 - Wikipedia]]

  簡単な歴史
  - [[https://ccrma.stanford.edu/~blackrse/algorithm.html][The History of Algorithmic Composition]]

  大きく, 以下の 3 つにわけられる.
  - Stochastic Process (確率過程)
  - Rule-Based (ルールベース)
  - Artificial Intelligence (人口知能)

  今回は, Python を利用してプログラムをかいて, 
  プログラムから音楽を生成する.

*** EarSketch
   音楽をつくるための Python API. 
   - [[http://earsketch.gatech.edu/learning/earsketch-sample-library][Reference: EarSketch Sound Library « EarSketch]]
   - http://earsketch.gatech.edu/earsketch2/

   Geogia Tech が開発している. OSS でない.
   現段階では教育ようなので, メジャーではない.
   Web 上で実行できたり, Python だったりするので, 使いやすい.

   - My Account: http://earsketch.gatech.edu/media/profiles/view/2626

*** Hello world
   もっとも基本的な記述.
#+begin_src python
from earsketch import * 

init () 
setTempo (120) 

mySound = TECHNO_CLUB5THPAD_001
fitMedia (mySound, 1, 1, 5)

print 'Hello world!'

finish () 
#+end_src

*** 作成した曲
**** music
     #+BEGIN_HTML
     <iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/175464488&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
     #+END_HTML

**** code

#+begin_src python
# script_name: ProjectB.py
# author     : tsu-nera
# history    : created 2014.11.04
from earsketch import *
from random import *
from math import *

init ()
setTempo (140)

end_time = 38
beat_list = ['0---0---00000+0+',
             '0---------------',
             '0+++++++++++++++',
             '0+++0++++--------']

setEffect (1, VOLUME, GAIN, -10)	
setEffect (2, VOLUME, GAIN, -10)

for i in range (1, end_time):
	fitMedia (HOUSE_DEEP_ARPLEAD_001, 1, i, i+1)
	fitMedia (HOUSE_DEEP_CRYSTALCHORD_001, 2, i, i+1)

setEffect (3, VOLUME, GAIN, -5)
for i in range (5, end_time):
	fitMedia (ELECTRO_ANALOGUE_SPACELEAD_001, 3, i, i+1)

setEffect (1, VOLUME, GAIN, -10, 9, -5, 13)	
setEffect (2, VOLUME, GAIN, -10, 9, -5, 13)
setEffect (3, VOLUME, GAIN, -5, 9, 0, 13)
setEffect (4, VOLUME, GAIN, -25)

for i in range (9, end_time):
	makeBeat (OS_SNARE05, 4, i, beat_list[0])

setEffect (1, VOLUME, GAIN, -5, 13, 0, 17)	
setEffect (2, VOLUME, GAIN, -5, 13, 0, 17)
setEffect (3, VOLUME, GAIN, 0, 13, 5, 17)
setEffect (4, VOLUME, GAIN, -20, 13, -15, 17)	
setEffect (5, VOLUME, GAIN, -10, 13, -5, 17)

for i in range (13, 25):
	makeBeat (OS_CLOSEDHAT05, 5, i, beat_list[1])
	
setEffect (6, VOLUME, GAIN, -5)
for i in range (17, end_time):
	fitMedia (ELECTRO_ANALOGUE_LEAD_002, 6, i, i+1)

setEffect (3, VOLUME, GAIN, 5, 21, 10, 25)
setEffect (4, VOLUME, GAIN, -15, 21, 0, 25)
setEffect (7, VOLUME, GAIN, -20, 21, 0, 25)
for i in range (21, end_time):
	makeBeat (OS_SNARE06, 7, i, beat_list[0])

setEffect (4, VOLUME, GAIN, 5, 25)
setEffect (7, VOLUME, GAIN, 5, 25)
setEffect (8, VOLUME, GAIN, 10)

for i in range (25, end_time):
	makeBeat (Y45_CRASH_1, 8, i, beat_list[2])

setEffect (3, VOLUME, GAIN, 12, 29)
setEffect (4, VOLUME, GAIN, 10, 29)
setEffect (7, VOLUME, GAIN, 10, 29)

for i in range (29, end_time):
	makeBeat (OS_KICK04, 9, i, beat_list[3])
	
soundFolder = DUBDRUM

for i in range (0, 20):
	sound = selectRandomFile (soundFolder)
	start = 29+ floor (gauss (5, 2))
	end = start + randint (2, 2) * 0.25
	track = randint (11, 20)
	fitMedia (sound, track, start, end)
	setEffect (track, VOLUME, GAIN, 12)

fitMedia (TECHNO_WHITENOISESFX_003, 10, end_time, end_time+2)

finish ()
#+end_src

* 印象的な音楽の紹介
  最後に, 講義のなかで紹介された動画のなかで, 
  印象に残っているものをいくつか取り上げる.

** THE GREAT ANIMAL ORCHESTRA by Bernie Krause: Water Sounds
   サウンドスケープという方法. 音風景, 音景.
   - [[http://ja.wikipedia.org/wiki/%E3%82%B5%E3%82%A6%E3%83%B3%E3%83%89%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97][サウンドスケープ - Wikipedia]]
     
   採取した音源を組み合わせて音楽をつくる.

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/Crk0REKzPAg" frameborder="0" allowfullscreen></iframe>
#+END_HTML

*** Bookmarks
   - [[http://www.ted.com/talks/bernie_krause_the_voice_of_the_natural_world?language=ja][バーニー・クラウス: 自然界からの声 | Talk Video | TED.com]]

** Virtual Barber Shop (Audio...use headphones, close ur eyes)
   バイノーラルサウンドという方法. 3D 映画のような体験ができる.

   以下の動画は, ヘッドホンをつけてきくと, 本当におどろくぞ.
   後ろに人が立っているような感覚に陥る.

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/IUDTlvagjJA?list=PLOEQDyige0NYA_xpI_Cy7oWqbzOciWEGa" frameborder="0" allowfullscreen></iframe>
#+END_HTML

** Antescofo: Live Accompaniment Demonstration
   スコアフォローシステム.

   ピアノのテンポを自動検出して, 伴奏をつけてくれる.
   一人で, ピアノコンチェルトだってできる.音大生が喜びそう.

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/YkMGtpcAA04?list=PLOEQDyige0NYA_xpI_Cy7oWqbzOciWEGa" frameborder="0" allowfullscreen></iframe>
#+END_HTML

  Kinect でもにたようなことをしている人は結構いる.
  - [[http://futurismo.biz/archives/1788][Kinect で指揮者になる! 世界の KinectHacker たち | Futurismo]]

** Lejaren Hiller - Illiac Suite for String Quartet
   世界初, コンピュータが作曲した音楽.イリアック組曲.
  - [[https://www.youtube.com/watch?v=n0njBFLQSk8&list=PL48E509DBEE4010DB&index=1][Lejaren Hiller - Illiac Suite for String Quartet - YouTube]]

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/n0njBFLQSk8" frameborder="0" allowfullscreen></iframe>
#+END_HTML

** Iannis Xenakis- ST/10
   確率などの数学を音楽に適用した音楽.

   クセナキスが変態的な音楽だってことは, 前から知ってた.

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/1H7JYwmM7vU" frameborder="0" allowfullscreen></iframe>
#+END_HTML

** David Cope Emmy Vivaldi
   流行りの機械学習 (machine learning) で,
   ビバルディの音楽を解析して 自動作曲したもの.

   人工知能すごい.チェスでもコンピュータが人間より強い時代だからな.

   もはや作曲家いらない...?? 

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/2kuY3BrmTfQ" frameborder="0" allowfullscreen></iframe>
#+END_HTML

** A Study In Keith
   Live Coding というもの. プログラムからリアルタイムで音楽を生成.

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/b-8Cmd6k4_M" frameborder="0" allowfullscreen></iframe>
#+END_HTML

  Live Coding については, 別記事でまとめた.
  - [[http://futurismo.biz/archives/2692][プログラミングでイケイケミュージックライブ?! Live Coding について調べたまとめ | Futurismo]]

** Process Music スティーブ・ライヒ
   :PROPERTIES:
   :ID:       o2b:1ca396a1-2944-4b61-b2a0-deda0e19bb73
   :POST_DATE: [2014-11-16 日 10:16]
   :POSTID:   2698
   :END:
   最後に, もっとも好きになった音楽. それは, ミニマル音楽.

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/AnC5DhNqZ6w" frameborder="0" allowfullscreen></iframe>
#+END_HTML

  これが好き.八重奏曲.

#+BEGIN_HTML
<iframe width="420" height="315" src="//www.youtube.com/embed/cGfUfu9vsj4" frameborder="0" allowfullscreen></iframe>
#+END_HTML

  - [[http://matome.naver.jp/odai/2137008940212203701][癒しの現代音楽 スティーブ・ライヒ - NAVER まとめ]]
