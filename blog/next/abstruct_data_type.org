#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ
#+TAGS:
#+DESCRIPTION:
#+TITLE: 
* はじめに
  仕事の開発プロジェクトのメンバ (正確にはメンバではなくてアドバイザー) 
  でこわーい人がいて,毎日のようにおびやかされてビクビクしている.

  その人が書いたクラス図の意味がわからなかったから質問しにいったときのお話.

** やりとり
  (hoge さん) 「このクラスがなにを現しているか, そもそもわかってる?? 」

  (Me) (わかっていないから質問をしにいった)

  (Me) 「データとそれを扱うための便利な操作をまとめたクラスですか? 」

  (hoge さん) 「それって, ただオブジェクト指向の一般論を言っているだけでは? 」
  
  (Me) (にが笑い...)

  (hoge さん) 「わかってないのに, わかったふりをしているよね? 」

  (hoge さん) 「便利な操作ってなに? そんなことだから, いつも考え方が手続的なんだ!! 」

  そんなこんなで, 今回もひどい目にあい, 
  あたくしは週末に心療内科にいって坑うつ剤を増量してもらうはめになった.

** Answer
  その人のいうことには,

  「このクラスは, アプリケーションのためのデータ型. 
    アプリケーションのベースになるもの.
    Integer 型や String 型と同じようなもの. 」

  「アプリケーションを設計するということは,
  まずそのアプリケーションで利用される
  データ型を定義するということからはじめる.」

  「その後, 自分が定義したデータ型を操作するインタプリタを設計する.
  Java をつかっているものの,
  Java はそれらのデータ型のインタプリタでしかない」
  
  だそうだ.というわけで, 今回は抽象データ型について調べてみた.

  情報元は, Wikipedia だったり, CPMCP 本だったり.

* データ型とは
  互いに関係する値の集合.
  - [[http://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B][データ型 - Wikipedia]]

  大きく, 2 種類に分けられる.
    - 基本型: 言語でサポートされた型.
      -> [[http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AA%E3%83%9F%E3%83%86%E3%82%A3%E3%83%96%E5%9E%8B][プリミティブ型 - Wikipedia]]

    - 抽象データ型 (ADT): 自身で定義した型.
      ->  [[http://ja.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B][抽象データ型 - Wikipedia]]

   基本型は, よく知っているので, 今回は抽象データ型に注目.

* 抽象データ型とは
  - 自身で定義した型. 
  - 状態を持たない
  - Abstract Data Type (ADT) という.
  - OOP だと, 値の集合とそれらを操作する集合, それぞれ別々に保持しているもの.
    (別々というところが Object の違い)

*** ラッパー
    値の集合に直接アクセスさせないための操作.(CPMCP p210)
    - 値を安全に保持するためには, 
      鍵 (key) を利用して (包む) 操作を追加すればよい.

#+begin_src oz
Key={NewName}
SS={Chunk.new w (Key:S)}
#+end_src

    包み, ほどきを行うデータ抽象をラッパーと定義する.

    #+begin_src oz
proc {NewWrapper ?Wrap ?Unwrap}
   Key={NewName} in
   fun {Wrap X}
      {Chunk.new w{Key:X}}
   end
   fun {Unwrap X}
      try W.Key catch _ then raise error (unwrap (W)) end end
   end
end
    #+end_src

以下のように, Wrap, Unwrap する.

#+begin_src oz
S={a b c}
SS={Wrap S}
S={Unwrap SS}
#+end_src

* データ抽象 (Data Abstraction)
  データ抽象. 3 つの構成要素がある.
  - Input
  - Output
  - Interface

  データ抽象は内部と外部からなるプログラムかつ, 
  両者がインターフェースを通じてやりとりするもの.

  Data Abstruction は 2 つの実現方法がある
  - Abstruct Data Type (ADT)
    値と操作をベツベツに保持する
  - Object
    値と操作を一緒に保持する

** オブジェクト
  値と操作をひとつのまとまりとしたもの. 

  現在オブジェクト指向言語と呼ばれているものは,実際には,
  - Abstruct Data Type (Java Integer 型)
  - オブジェクト (Java Object 型)
  の 2 つを合わせもっている.
  
  その意味で, オブジェクト指向言語と言うよりは,
  抽象データ言語というほうが正しい.
  
** クラス
   抽象データからなるデータ構造.

   属性とメソッドはレコードデータ構造によって管理されているだけである!

   Class とは, Pair ( attrs[属性の集合] : methods[メソッドの集合]) )
   
   または, Java ならば, こうかいてもいい.

   #+begin_src java
   HashMap<String, HashSet<String>> attrs = new HashMap<String, HashSet<String>>();
   HashMap<String, HashSet<String>> methods = new HashMap<String, HashSet<String>>();

   attrs.add ("Hoge", new HashSet (Arrays.asList ("attr1", "attr2")));
   methods.add ("Hoge", new HashSet (Arrays.asList ("method1", "method2")));
   #+end_src

   Class の 生成 (new) メソッドで オブジェクトが生成される.(インスタンス化)

   Class という概念によって, オブジェクトの"宣言"と"生成 (new)"を分離する.
