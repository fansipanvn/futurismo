#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: Emacs
#+TAGS:
#+DESCRIPTION:
#+TITLE: Emacs 高速化起動にむけたカイゼンのとりくみ

#+BEGIN_HTML
<img alt="" src="http://futurismo.biz/wp-content/uploads/emacs_logo.jpg"/>
#+END_HTML

* はじめに
  Emacs の起動を早くしたい. 
  Windows 環境 (Cygwin) 環境における Emacs の起動時間が異常.

  というわけで, 改善に向けた取り組みを実施した.

* 計測
** 起動時間の把握
   M-x emacs-init-time という関数を実行すると, 起動にかかる時間がわかる.

   とりあえず, 現状は
   | Machine    | Time |
   |------------+------|
   | Arch Linux | 12.1 |
   |            |      |

** esup をつかう
   esup を利用すると, 詳細な起動時間がわかる.
   - https://github.com/jschaf/esup

#+begin_src emacs-lisp
(require 'esup)
#+end_src

  自分の環境だと, inits ディレクトリ配下がすべて結果が要約されてしまい,
  よくわからなかった.

** initchart をつかう
   Emacs のスタートアップを視覚化する.
   - [[http://qiita.com/yuttie/items/0f38870817c11b2166bd][Emacs のスタートアップを視覚的に理解する - Qiita]]
   - https://github.com/yuttie/initchart

#+begin_src emacs-lisp
(require 'initchart)
(initchart-record-execution-time-of load file)
(initchart-record-execution-time-of require feature)
#+end_src

** init log の確認
   elisp の管理には init-loader.el を利用してる.
   init log を確認すると, 各処理における読み込み時間がわかる.

   一番おそい Cygwin における時間.

* 分析

* カイゼン
** emacsclient をつかう
   これはつかう, というよりもすでにつかっている. 
   というより, これをつかわないと話にならない.
   - [[http://futurismo.biz/archives/1273][ストレス社会を乗り切るために!cygwin と emacs の起動が遅い場合の高速化 2 選 (emacsclient) | Futurismo]]

   ちなみに, 早く立ち上げたいときは,
   emacs -q オプションを指定することで設定ファイルを読み込まずに立ち上げる.

** X Windows 環境での起動カイゼン
   よくワカってないけど, コンナおまじないがあるらしい.
   - [[http://ubuntuforums.org/showthread.php?t=183638][emacs slow startup]]

#+begin_src emacs-lisp
(modify-frame-parameters nil '((wait-for-wm . nil)))
#+end_src

** バイトコンパイルをする
   パッケージ管理には el-get を利用してる. そして, elisp の管理には init-loader を使っている.

   el-get で取得したものは自動的にバイトコンパイルされるのだが, 盲点があった. それが

   1. el-get 自体
   2. init-loader 自体
   3. inits 配下の設定ファイル

   1,2 については, el-get でいままで管理していなかった.
   これらを el-get 配下で管理するようにしていた.

   さらに, inits 配下の設定ファイルについては
   編集するたびにバイトコンパイルするようにした.
   - [[http://fukuyama.co/emacsd][肥大化した.emacs.d を管理するために私が使っている elisp - Web 学び]] 

   を参考にして, 以下を init.el に記述.

#+begin_src emacs-lisp
;;; 設定ファイルのあるフォルダを指定
(setq inits_dir (expand-file-name "~/.emacs.d/inits/"))
(init-loader-load inits_dir)

;; inits フォルダのみ, 保存時に自動コンパイルして即反映させる
;; http://fukuyama.co/emacsd
(defun auto-save-byte-compile-file ()
  "Do `byte-compile-file' and reload setting immediately, When elisp file saved only in inits folder."
  (interactive)
  (when (or (equal default-directory inits_dir)
	    (equal default-directory (abbreviate-file-name inits_dir)))
    (byte-compile-file buffer-file-name t)
    ))
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (add-hook 'after-save-hook 'auto-save-byte-compile-file
;; nil t)))
#+end_src

また, 以下を評価して一括バイトコンパイル.

#+begin_src emacs-lisp
(byte-recompile-directory "~/.emacs.d/inits" t)
#+end_src

init-loader で自動バイトコンパイル機能があるようだ.

#+begin_src emacs-lisp
(setq init-loader-byte-compile t)
#+end_src

  有効にしたが, イマイチ使い方がよくわからない.

** idle-require.el をつかう
  - [[http://sheephead.homelinux.org/2010/11/12/6288/][idle-require.el で Emacs の起動を高速にする | sheephead]]
  - [[http://nschum.de/src/emacs/idle-require/][idle-require]]

** 遅延読み込みをつかう
*** auto-load をつかう
*** eval-after-load つかう
*** lazyload をつかう
   - [[http://d.hatena.ne.jp/pogin/20121230/1356880875][Emacs の起動時間を短縮する方法 #Emacs #AdventCalendar - プログラムとかのの blog]]


** use-package をつかう
   - [[http://qiita.com/kai2nenobu/items/5dfae3767514584f5220][Emacs - use-package で可読性の高い init.el を書く - Qiita]]

* Special Thanks
  - [[http://sheephead.homelinux.org/2010/11/12/6288/][idle-require.el で Emacs の起動を高速にする | sheephead]]
  - [[https://gist.github.com/zk-phi/9935048][setup.el で安全・爆速な init.el を書く]]
