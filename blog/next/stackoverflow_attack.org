#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ
#+TAGS:
#+DESCRIPTION:
#+TITLE: 

* サンプルコード
scanf でユーザから文字列をもらって, それを出力するプログラム.
悪意がなければ, まったく問題ないコードだが. . .

** C Lang

#+begin_src c
#include <stdio.h>

void hacked (void) {
  printf ("HaHaha, You're hacked!!");
  return;
}
 
void hello (char* name) {
  printf ("Hello, %s\n", name);
  return;
}

void getName (char* name) {
  char buf[20];
  int i;
  
  printf ("Input your name.\n");
  scanf ("%s", buf);

  for (i = 0; i < 16; i++) {
    name[i] = buf[i];
  }
  return;
}

int main () {
  char name[16];
  getName (name);
  hello (name);
  return 0;
}
#+end_src

** 出力結果

#+begin_src sh
[tsu-nera]% echo "tsu-nera" | ./test
Input your name.
Hello, tsu-nera
#+end_src

* 脆弱性を狙って,ハッキング!

入力値を変更することで, 大変なことに.

* テクニック解説

scanf で入力された文字列の格納アドレスを調べる

disassemble 結果から, hacked 関数のアドレスを調べる.

#+begin_src asm
$ objdump -d test

0000000000400680 <hacked>:
  400680:	bf 64 07 40 00       	mov    $0x400764,%edi
  400685:	31 c0                	xor    %eax,%eax
  400687:	e9 94 fe ff ff       	jmpq   400520 <printf@plt>
  40068c:	0f 1f 40 00          	nopl   0x0 (%rax)
#+end_src

getName の戻りアドレスと, そのスタック上の格納アドレスを確認.

#+begin_src asm
   0x00000000004006fb <+15>:	callq  0x400691 <getName>
   0x0000000000400700 <+20>:	lea    -0x10 (%rbp),%rax
#+end_src

#+begin_src language
 x /16xg $rsp
0x7fffffffd9b0:	0x00007ffff7fd74d0	0x00007fffffffd9f0
0x7fffffffd9c0:	0x6172656e2d757374	0x0000000000400700 <-ここ
#+end_src


** Environment
** Special Thanks
