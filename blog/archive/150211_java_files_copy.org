#+BLOG: Futurismo
#+POSTID: 2976
#+DATE: [2015-02-11 水 15:54]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ
#+TAGS: Java
#+DESCRIPTION:Java7 の Fiels.nio.file.Files で ファイルのコピーをしてみる
#+TITLE: Java7 の Fiels.nio.file.Files で ファイルのコピーをしてみる

* はじめに
  会社では Java で SMB プロトコルをごにょごにょしているというお仕事なので, 
  Java でファイル操作をするような I/F を調べました.
  
  具体的には, フォルダをコピーしたい. 

  Java7 で Files というライブラリが新たらしく追加された.
  これが利用できそうなので, 試してみた.
  
** reference
  - [[http://docs.oracle.com/javase/jp/7/api/java/nio/file/Files.html][Files (Java Platform SE 7 )]]
  - [[http://www.ne.jp/asahi/hishidama/home/tech/java/files.html][Java ファイル関連メモ 2 (Hishidama's Java Files Memo)]]
  - [[http://itpro.nikkeibp.co.jp/article/COLUMN/20110725/362803/?ST=develop][Java SE 7 徹底理解  第 4 回 New I/O 2 の新しいファイルシステムインタフェース その 1:ITpro]]
  - [[http://itpro.nikkeibp.co.jp/article/COLUMN/20110830/367909/][Java SE 7 徹底理解  第 5 回 New I/O 2 の新しいファイルシステムインタフェース その 2:ITpro]]
  - [[http://d.hatena.ne.jp/nowokay/20110707][Java SE 7 の java.nio.file.Files がとても便利な件 - きしだのはてな]]
  - [[http://kagamihoge.hatenablog.com/entry/20130110/1357810886][java.nio.file.Files のメソッドを一通り使ってみた - kagamihoge の日記]]
  - [[http://waman.hatenablog.com/entry/20120515/1337044411][これからの「 Java I/O 」の話をしよう www (5) : Files クラスのメソッド  〜ファイル内容の読み書き〜 - 倭マン's BLOG]]

* 基本
  java.nio.file を import.

#+begin_src java
import java.nio.file.*; 
#+end_src

  FileSystems.getDefault ();で ファイルシステムオブジェクトを取得.

#+begin_src java
// filesystem の取得
FileSystem fileSystem = FileSystems.getDefault ();
#+end_src

  ファイル or ディレクトリを表すオブジェクトは Path オブジェクトで示す.
  以下のいずれかで取得.
  - fileSystem.getPath ()
  - Paths.get ()

#+begin_src java
Path fooFile = fileSystem.getPath ("foo.txt");
Path barFile = Paths.get ("bar.txt");
#+end_src

* コピーしてみる
  Files オブジェクトの copy メソッドを利用する.
  - [[http://docs.oracle.com/javase/jp/7/api/java/nio/file/Files.html#copy (java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.CopyOption...)][Files (Java Platform SE 7 )]]

#+begin_src java
public static Path copy (Path source, Path target, CopyOption... options) throws IOException
#+end_src

  - source ... コピー元
  - target ... コピー先
  - options
    - REPLACE_EXISTING ...  target が存在すれば上書き
    - COPY_ATTRIBUTES ... Attribute もコピー.
    - NOFOLLOW_LINKS ... シンポリックリンクはコピーしない.

#+begin_src java
Files.copy (fooFile, barFile);
#+end_src

** reference
  コピー
  - [[http://itpro.nikkeibp.co.jp/article/COLUMN/20110830/367909/?ST=develop&P=3][(3/7) Java 技術最前線 - Java SE 7 徹底理解  第 5 回 New I/O 2 の新しいファイルシステムインタフェース その 2:ITpro]]
  - [[http://qiita.com/asahina_dev/items/ce85cc4ddec2543b99f0][Java 7 新機能 3 ファイルコピー - Qiita]]
  移動
  - [[http://itpro.nikkeibp.co.jp/article/COLUMN/20110830/367909/?ST=develop&P=4][(4/7) Java 技術最前線 - Java SE 7 徹底理解  第 5 回 New I/O 2 の新しいファイルシステムインタフェース その 2:ITpro]]

* 属性の取得
  以下でできる.
  - getFileAttributeView ()
  - getFileAttribute ()
  - readFileAttirbute ()

  getFileAttributeView (), readFileAttirbute () だと, 
  指定した FileAttributeView オブジェクトが取得できる.
  - [[http://docs.oracle.com/javase/7/docs/api/java/nio/file/attribute/FileAttributeView.html][FileAttributeView (Java Platform SE 7 )]]

#+begin_src java
BasicFileAttributes attrs = Files.getFileAttributeView (barFile, BasicFileAttributeView.class);
BasicFileAttributes attrs = Files.readAttributes (barFile, BasicFileAttributes.class);
#+end_src

  getFileAttribute で FileAttirbuteView の個々の属性を指定して情報を取得することができる.
  - [[http://docs.oracle.com/javase/7/docs/api/java/nio/file/attribute/FileAttributeView.html][FileAttributeView (Java Platform SE 7 )]]
  - [[http://www.javabeat.net/obtaining-and-modifying-the-metadata-of-the-files-in-java-7-nio-2/][Obtaining and modifying the metadata of the files in Java 7 NIO.2]]

* Sample Code

#+begin_src java
import java.nio.file.*;
import java.nio.file.attribute.*;

public class FilesSample {
	public static void main (String args[]) {
		try {
		
			// file system
			FileSystem fileSystem = FileSystems.getDefault ();

			// ファイルを表す Path オブジェクトを生成
			Path fooFile = fileSystem.getPath ("foo.txt");
			System.out.println (fooFile);
			Path barFile = Paths.get ("bar.txt");
			System.out.println (barFile);

			// ファイルが存在する場合は削除します
			Files.deleteIfExists (barFile);

			// copy
			Files.copy (fooFile, barFile);

			// 存在チェック
			if (!Files.exists (barFile)) 
				System.out.println ("file not exist");
		
			// 容量チェック
			if (Files.size (barFile) != Files.size (barFile) ) 
				System.out.println ("file size is not equal");

			BasicFileAttributes attrs = Files.getFileAttributeView (barFile, BasicFileAttributeView.class);
			BasicFileAttributes attrs = Files.readAttributes (barFile, BasicFileAttributes.class);

		} catch (Exception ex) {
			System.out.println (ex);
		}
	}
}
#+end_src
