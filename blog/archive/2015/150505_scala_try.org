#+BLOG: Futurismo
#+POSTID: 3645
#+DATE: [2015-05-06 水 01:17]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ
#+TAGS: Scala
#+DESCRIPTION: Scala の例外処理について調べたメモ(try-catch, Try[T])
#+TITLE: Scala の例外処理について調べたメモ(try-catch, Try[T])

Scala には例外処理の書き方としては、
- try, catch,finally
- Option 型 Try
の２つがある.

それぞれ、実際に実装してどんな感じか調べてみました.

* try-catch
  try-catch で例外を処理する方法. これは、Java における例外処理と同じ.
  - [[http://futurismo.biz/archives/2935][Java の例外処理について徹底的に調べてみた | Futurismo]]

  以下のようなコードを書いた. これを、もう一つの Try[T] で書き換える.

#+begin_src scala
object TryCatch {
  def main(args: Array[String]) {
    try {
      val result = divide(0)
      show(result)
    } catch {
      case e: Exception =>
    }
  }

  def divide(num: Int): Double = {
    try {
      val result = 1/num
      result
    }
    catch {
      case e: Exception =>      
        println("Failure!!")
        throw e
    }
  }

  def show(result: Double): Double =  {
    println(result)
    result
  }
}
#+end_src

* Try[T]
  このスタイルは、try-catch に比べて以下のようなメリットがある.

  - 複数の例外を紡いで処理を書いていくときに、正常系と異常系を綺麗に分
    けてかいていくことができる(for 分とかで)
  - つまり、コードが綺麗にかける.

  import scala.util.{Try, Success, Failure} を import して利用する.

#+begin_src scala
object TryCatch {
  def main(args: Array[String]) {
    val result = divide(0)
    result match {
      case Success(v) => show(v)
      case Failure(e) => 
    }
  }

  def divide(num: Int): Try[Double] = Try {
    val result = Try{1/num}
    result match {
      case Success(v) => v
      case Failure(e) =>
        println("Failure!!")
        throw e
    }
  }

  def show(result: Double): Try[Double] = Try {
    println(result)
    result
  }
}
#+end_src

** もっと Monadic に！！
   main 関数は、以下のように flatMap や for 文を利用して書き換えることができる.
   この書き換えが Monadic なところなのだけれども、理解不足でこれ以上解説できません.
 
#+begin_src scala
def main(args: Array[String]) {
  val result = for {
    result  <- divide(0)
    result2 <- show(result)
  } yield result2
}
#+end_src

try-catch が手続的なのに対して、flatMap をつかうと、ずっと宣言的に見える. 

#+begin_src scala
def main(args: Array[String]) {
  divide(0).flatMap( result => show(result) )
}
#+end_src

以上、Happy Hacking!!

* Special Thanks
  - [[http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.util.Try][Scala Standard Library 2.11.0-20140303-150720-b59c3f8641 - Try - Scala Standard Library 2.11.0-20140303-150720-b59c3f8641 - scala.util.Try]]
  - [[http://qiita.com/yharada/items/15f88e5bbf44833b5ed7][scala.util.Try を使いこなそう - Qiita]]
  - [[http://yuroyoro.hatenablog.com/entry/20100719/1279519961][Scala での例外処理 - Either,Option,util.control.Exception - ( ꒪⌓꒪) ゆるよろ日記]]
  - [[http://www.slideshare.net/TakashiKawachi/scala-16023052][Scala での例外処理]]
