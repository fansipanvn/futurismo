#+BLOG: Futurismo
#+POSTID: 2675
#+DATE: [2014-11-08 土 15:26]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ, Emacs
#+TAGS: Java,JUnit
#+DESCRIPTION:コマンドラインから JUnit を利用する方法を調べてみた.
#+TITLE: コマンドラインから JUnit を使う方法

最近, Eclipse が嫌いになってしまったので, 
コマンドラインから JUnit を利用する方法を調べてみた.

** Environment
  - ArchLinux
  - JUnit 4.11

* 事前準備
  JUnit をダウンロード.
  - [[https://github.com/junit-team/junit/wiki/Download-and-Install][Download and Install · junit-team/junit Wiki · GitHub]]

  適当なフォルダに junit.jar を配置したあとに, CLASSPATH を通す.

  #+begin_src bash
export JUNIT_HOME = /usr/share/java
export CLASSPATH = $JUNIT_HOME/junit.jar:$CLASSPATH
#+end_src

* コマンドラインから実行
  以下のソースを動かしてみる. ここでは, Lab2Test.java というファイル名.

#+begin_src java
import static org.junit.Assert.*;
import org.junit.Test;

public class Lab2Test {
	public static int num () {
		return 10;
	}

	@Test
	public void test () {
		assertEquals (10, num ());
	}
}
#+end_src

コンパイルは普通に実施.

#+begin_src bash
javac Lab2Test.java
#+end_src

コマンドラインから実行するには, 
java org.junit.runner.JUnitCore [クラス名] という書き方をして実行する.

#+begin_src bash
$ java org.junit.runner.JUnitCore Lab2Test
JUnit version 4.11
.
Time: 0.004

OK (1 test)
#+end_src

クラスが増えてきたら, プログラムにクラス名を書く方法もある.
以下, 参照.

- https://github.com/junit-team/junit/wiki/Test-runners

* Ant を利用する
  すこし大きなコードを扱うときはビルドツールとの連携が役に立つ.
  ここでは, ant を利用してみる.

  build.xml を作成.

  JUnit で必要な情報は, ここが詳しい.
  - [[http://www.techscore.com/tech/Java/ApacheJakarta/Ant/7-2/][7. 基本的なタスク (2) | TECHSCORE (テックスコア)]]

#+begin_src xml
<?xml version="1.0" encoding="UTF-8" ?>
<project name="Lab2" default="compile" basedir=".">
  <target name="compile">
    <javac srcdir="."/> 
  </target>

  <target name="test" depends="compile" >
    <junit>
      <formatter type="plain" usefile="false" />      
      <classpath>
      	<pathelement location="." />
      </classpath>
      <test name="Lab2Test" />
    </junit>
  </target>
</project>
#+end_src

エラー詳細を表示するためには,
<formatter type="plain" usefile="false" /> の 1 行が必要.

** Eclipseで自動生成
   もっといい方法を発見したので、追記.

   Eclipseでbuild.xmlは自動生成ができる.

   自動生成したいプロジェクトを選択して、
   - Eclipseメニューから「ファイル」>「エクスポート」を選択.
   - [エクスポート]ダイアログから, [一般] > [Antビルド・ファイル]を選択.

   以下のようなbuild.xmlが生成される.
   手動で build.xmlを記述するのがバカらしくなった.

#+begin_src xml
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="tdd_by_example">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../usr/share/eclipse/"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    
    <path id="Junit4.userclasspath">
        <pathelement location="../../../../usr/share/java/junit.jar"/>
    </path>
    <path id="tdd_by_example.classpath">
        <pathelement location="bin"/>
        <path refid="Junit4.userclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.ucls"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="test">
                <exclude name="**/*.ucls"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <src path="test"/>
            <classpath refid="tdd_by_example.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="MoneyTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="tdd_by_example.MoneyTest" todir="${junit.output.dir}"/>
            <classpath refid="tdd_by_example.classpath"/>
        </junit>
    </target>
    <target name="tdd_by_example">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="tdd_by_example.MoneyTest" todir="${junit.output.dir}"/>
            <classpath refid="tdd_by_example.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
#+end_src

** Emacs で利用する
   Emacs で ant を実行するときは, -emacs オプションをつける

   #+begin_src bash
   $ ant -emacs test
   #+end_src

   エラーした場合, エラー箇所にジャンプできる.
