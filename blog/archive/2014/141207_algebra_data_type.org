#+BLOG: Futurismo
#+POSTID: 2789
#+DATE: [2014-12-07 日 20:32]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ
#+TAGS: Java, Haskell, OOP
#+DESCRIPTION: Java におけるポリモーフィズムの整理
#+TITLE: Java におけるポリモーフィズムの整理

#+BEGIN_HTML
<a href="http://futurismo.biz/wp-content/uploads/java.png"><img alt="" src="http://futurismo.biz/wp-content/uploads/java.png" width="256" height="256" /></a>
#+END_HTML

* はじめに
  Haskell で型クラスというものを勉強した.
  
  その延長で, 今までとてもいい加減に理解していた 
  Java のポリモーフィズムについて再度復習した.

  なんか, 用語の関係性をすごく曖昧に理解していた気がした.

* Polymophism: 多相性
  各要素 (定数, 変数, 式, オブジェクト, 関数, メソッドなど) 
  についてそれらが複数の型に属することを許すという性質.
  - [[http://ja.wikipedia.org/wiki/%E3%83%9D%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%95%E3%82%A3%E3%82%BA%E3%83%A0][ポリモーフィズム - Wikipedia]]

  同種のクラスをカテゴリに分類してまとめ, 
  基本的な動作・設計部分を統一することで, 
  オブジェクトインスタンスの扱いに柔軟性と規律を持たせるための機能.
  - [[http://homepage1.nifty.com/CavalierLab/lab/vb/clsmdl/polymorphism.html][ポリモーフィズム]]
  
  多相性は 3 つに分類できる. 
  - アドホック多相:
  - パラメータ多相:
  - サブタイプ多相: 

  たとえば Java だと以下に相当する.
  - アドホック多相: オーバーロード
  - パラメータ多相: ジェネリクス
  - サブタイプ多相: 継承, インタフェース

 参考:
 - [[http://en.wikipedia.org/wiki/Polymorphism_(computer_science)#Ad-hoc_polymorphism][Polymorphism (computer science) - Wikipedia, the free encyclopedia]]
 - [[https://www.haskell.org/tutorial/classes.html][A Gentle Introduction to Haskell: Classes]]

** Polymorphic Type: 多相型
   データ構造のコンテナ.

   データ形式に依存しないコンピュータプログラミング方式をジェネリクス
   プログラミングという.
   - [[http://ja.wikipedia.org/wiki/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0][ジェネリックプログラミング - Wikipedia]]

* アドホック多相
  オブジェクト指向におけるアドホック多相とは, オーバーロードに相当する.
  多重定義ともいう.
  - [[http://ja.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%AE%9A%E7%BE%A9][多重定義 - Wikipedia]]

* パラメータ多相
** 型変数
   多相型は宣言されたクラス, 関数に対して,
   利用時に具体的な型を与える. これを型変数 (Type variable) という.

   Java の名前つけルールがあるらしい.
   - [[http://java.keicode.com/lang/generics-naming.php][名前付けルール - Java 入門]]

** Generic Type: 総称型
   型付けされたプログラミング言語において
   データ型の定義とそれを参照する式 (型式) の一部にパラメタを許すことによって
   類似した構造を持つ複数のデータ型を一括して定義して, それらを選択利用する仕組み.
   - [[http://ja.wikipedia.org/wiki/%E7%B7%8F%E7%A7%B0%E5%9E%8B][総称型 - Wikipedia]]

  オーバーロード (overload),
  継承 (inheritance) と並んでプログラミング言語において
  ポリモーフィズムを実現するための一つの手段.

** 言語ごとの実現方法
  - Java: ジェネリクス, ワイルドカード
    + [[http://futurismo.biz/archives/2750][Java でのジェネリックスの使い方まとめ | Futurismo]]
  - C++:  テンプレート
  - Haskell:
    + リスト
    + タプル
    + Either
    + Maybe

* Subtyping: 派生型
  データ型 S が他のデータ型 T と is-a 関係にあるとき, 
  S を T の派生型 (はせいがた, subtype) であるという.
  - [[http://ja.wikipedia.org/wiki/%E6%B4%BE%E7%94%9F%E5%9E%8B][派生型 - Wikipedia]]

  基本型のデータを処理するように作られたプログラムは, 
  その派生型のデータでも正しく処理することができる.

  基本型-派生型関係ではリスコフの置換原則 
  (Liskov Substitution Principle) が成り立つ.
  
  2 つの方法がある
  - インタフェース: 型をグループで分類
  - 継承: 型を階層構造で分類

** inheritance: 継承
  ほとんどのクラスベースオブジェクト指向言語では, 
  サブクラス (インヘリタンス) が派生型の概念を実現している.
  - [[http://ja.wikipedia.org/wiki/%E7%B6%99%E6%89%BF_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)][継承 (プログラミング) - Wikipedia]]

** override: オーバーライド
   オブジェクト指向プログラミングにおいてオーバーライド (override) とは, 
   スーパークラスで定義されたメソッドをサブクラスで定義しなおし,
   動作を上書きすること.
   - [[http://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%89][オーバーライド - Wikipedia]]
     
** interface: インタフェース
   抽象データ型のメソッド.

   Object 型を分類し,
   同じカテゴリに属するクラスに共通のインターフェイスを取り決める.

   implements ステートメントは, クラスたちのカテゴリ分類を明確にする方法.

   変数の型としてカテゴリクラスを指定すると, 
   そのカテゴリを Implements したクラス (つまり, カテゴリに属するクラス) 
   のインスタンスも格納できるようになる.
   - [[http://homepage1.nifty.com/CavalierLab/lab/vb/clsmdl/polymorphism_02.html][ポリモーフィズムとインターフェイス]]

   オブジェクトが, 共通のインターフェイスを実装している場合, 
   他のオブジェクトに置き換えることができる.

*** どう分類するか?:  共通性/ 可変性 分析法
    オブジェクト指向のこころより引用.
    - 共通性分析:時間が経っても変化しにくい構造を見つけるもの
    共通性分析によってまとめられた概念を抽象クラスによって表現
      
    - 可変性分析:変化しやすい構造を洗い出すもの
    可変性分析で得た流動的要素は抽象クラスの派生クラスによって実装される

    設計手順:
    - (抽象クラス) このクラスが持つ責務をすべて全うするにはどうようなインターフェイスが必要か?
    - (派生クラス) この特定実装の中でどうのようにして与えられた仕様を実装できるのか?

    - 共通性: 時がたっても変わらないものを抽象クラスに
    - 可変性: 流動的要素を具象クラスに.

    クラスの集合がもつすべての責務を真っ当するために,
    インタフェースを用意する.

    Jim Coplien が提唱. p235 第 15 章から抜粋.

    - [[http://www.amazon.co.jp/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%A8%E3%81%A8%E3%82%82%E3%81%AB%E5%AD%A6%E3%81%B6%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%81%AE%E3%81%93%E3%81%93%E3%82%8D-Software-patterns-%E3%82%A2%E3%83%A9%E3%83%B3%E3%83%BB%E3%82%B7%E3%83%A3%E3%83%AD%E3%82%A6%E3%82%A7%E3%82%A4/dp/4894716844][Amazon.co.jp: デザインパターンとともに学ぶオブジェクト指向のこころ (Software patterns series): アラン・シャロウェイ, ジェームズ・ R ・トロット, 村上 雅章: 本]]

** 型クラス
     Haskell の概念.
     1. 型は値をグループ化する.
     2. 型クラスは, 型をグループ化する.

     この説明はわかりやすい.
     - 値 < 型 < 型クラス
     - [[http://jutememo.blogspot.jp/2009/05/haskell.html][Haskell のモジュールの階層化と, 型クラス - パラメータ多相とアドホック多相 | すぐに忘れる脳みそのためのメモ]]

     型を分類する点でいえば, Java のインタフェースと同義.

* おわりに
  先月くらいにクラス設計をしていたときに, 会社である怖い人が,

  継承とは, オブジェクトを分類するための手段なんだ!

  といっていたが, ようやくその意味を理解した気がした.
