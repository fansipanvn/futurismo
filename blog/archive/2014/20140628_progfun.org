#+BLOG: Futurismo
#+POSTID: 2510
#+DATE: [2014-06-28 土 20:55]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ, MOOC
#+TAGS: Coursera, Scala
#+DESCRIPTION: CourseraでScalaの勉強をした記録
#+TITLE: [Coursera]Scala作者直伝の講座！Functional Programming Principles in Scalaを受けた

Courseraを利用して、Scalaの勉強をしました。

- [[https://www.coursera.org/course/progfun][Functional Programming Principles in Scala | Coursera]]

#+BEGIN_HTML
<iframe width="560" height="315" src="//www.youtube.com/embed/tSCNZvv7ti4" frameborder="0" allowfullscreen></iframe>
#+END_HTML

* 講座の感想
Scala言語作者の、Martion Odersky直々の講義であるところがまずスゴい。

Scalaを通じて、関数型の考え方を学ぶという内容。

- Week One: Programming paradigms; overview of functional programming and the Scala programming language.
- Week Two: Defining and using functions, recursion and non-termination, working with functions as values, reasoning by reduction. 
- Week Three: Defining and using immutable objects, review of inheritance and dynamic binding.
- Week Four: Types and Pattern Matching
- Week Five: Working with Lists
- Week Six: Collections and Combinatorial Search
- Week Seven: Lazy Evaluation

ついこの前に受けた以下の講座とかぶる部分もたくさんあった。

- [[http://futurismo.biz/archives/2427][プログラミングの世界観を変える衝撃！Paradigms of Computer Programmingで震えるほどの知的感動を体験した | Futurismo]]

Lectureの内容も適度な量で、Assignmentの量もそれほど多くはない印象。
すごく時間がかかるというわけではなかった。
ただし、Assignmentの締切りに毎回間に合わなくてすべて遅れて提出・・・これが無念。

また、考え方がなれていないので、概念の理解はすこし時間がかかった。
いわゆるコップ本と呼ばれている以下の参考書を片手にガンバッタ。

#+BEGIN_HTML
<div class='amazlink-box' style='text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;'><div class='amazlink-list' style='clear: both;'><div class='amazlink-image' style='float:left;margin:0px 12px 1px 0px;'><a href='http://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%AC%AC2%E7%89%88-Martin-Odersky/dp/4844330845%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4844330845' target='_blank' rel='nofollow'><img src='http://ecx.images-amazon.com/images/I/415CsfYp64L._SL160_.jpg' style='border: none;' /></a></div><div class='amazlink-info' style='height:160; margin-bottom: 10px'><div class='amazlink-name' style='margin-bottom:10px;line-height:120%'><a href='http://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%AC%AC2%E7%89%88-Martin-Odersky/dp/4844330845%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4844330845' rel='nofollow' target='_blank'>Scalaスケーラブルプログラミング第2版</a></div><div class='amazlink-powered' style='font-size:80%;margin-top:5px;line-height:120%'>posted with <a href='http://amazlink.keizoku.com/' title='アマゾンアフィリエイトリンク作成ツール' target='_blank'>amazlink</a> at 14.06.28</div><div class='amazlink-detail'>Martin Odersky<br /></div><div class='amazlink-sub-info' style='float: left;'><div class='amazlink-link' style='margin-top: 5px'><img src='http://amazlink.fuyu.gs/icon_amazon.png' width='18'><a href='http://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%AC%AC2%E7%89%88-Martin-Odersky/dp/4844330845%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4844330845' rel='nofollow' target='_blank'>Amazon</a> <img src='http://amazlink.fuyu.gs/icon_rakuten.gif' width='18'><a href='http://hb.afl.rakuten.co.jp/hgc/g00q0724.n763w947.g00q0724.n763x2b4/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F11354037%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Frms%2Fmsv%2FItem%3Fn%3D11354037%26surl%3Dbook' rel='nofollow' target='_blank'>楽天</a></div></div></div></div></div>
#+END_HTML

この本もオダスキーさんが著書であり、
講座で解説されるプログラムいくつかはこの本にも同じ内容が載っていた。

* Scalaの感想
講義の内容をそのまま引用してしまうが、
以下のような関数型の概念は、OOPの世界にいる自分にとってはとっても新鮮だった。

Functional programming provides a coherent set of notations and

- methods based on higher-order functions,(高階関数)
- case classes and pattern matching,(パターンマッチング)
- immutable collections, absence of mutable state(イミュータブル)
- flexible evaluation strategies:strict/lazy/by name(遅延評価)

A useful toolkit for every programmer.
A different way of thinking about programs.

仕事ではRubyをつかっているが、
講座を受ける中でRubyが関数型言語の特性をたくさんもっていることに気がついたりした。

- [[http://futurismo.biz/archives/2472][Rubyの無名関数についての整理メモ | Futurismo]]

関数型の考え方を身につければ、Rubyも饒舌になれる。

関数型の考え方をはやく身につけて、
プログラミングの表現の幅をもっともっと広げたいと思った。

** Scalaは美しい
Scalaに触れて一番驚いたのは、表現の簡潔さだ。

Scalaではワンラインで表現できてしまう場面がたくさんある。
あまりに一行に詰め込みすぎるのも読みづらいので、
適度にインデントすると5行くらいになる。

たった、5行である！一般的にScalaのコード量はJavaの半分になると言われているらしい！

はじめにこれを聞いたときは、懐疑的だったけれども、今となっては納得である。

* これからどうするか
Scalaはとても気に入った。

講座が終わってしまったが、Scalaはこれからも折に触れて触っていきたい。
正直なところ、2ヶ月の講座だけではまだScalaを身につけたといえる自信がない。
力を伸ばすためにも、いろいろな場面でScalaを書いていこうと思う。

** スクリプト言語としてのScala
Scalaはスクリプトとしても実行できる。
まずは、簡単なスクリプトを書くときにScalaを選択しようと思う。

Scalaをスクリプトとして利用する最大の問題点は、起動にかかる時間だ。
ScalaはJVM上で動作するので、JVMの起動に時間がかかる。

しかし、今はそれを我慢してでもScala力をみにつけたい。

** ほかの関数型言語も
自分が次に挑戦しようと考えてことは、Emacs Lispを身につけること。

どういうわけか、最近とてもEmacsが気に入っている。
自分でもEmacs Lispがかけたらいいなと思う。

Lispということで、同じ関数型でもScalaとは毛色がまた違うのだが、
それも新しい価値観に触れるということで、いいことだ。
