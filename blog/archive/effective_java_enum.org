#+BLOG: Futurismo
#+POSTID: 2768
#+DATE: [2014-11-30 日 21:21]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ
#+TAGS: Java
#+DESCRIPTION:Effective Java の Enum のメモ
#+TITLE: Effective Java にのっている エレガントな Enum の使い方メモ

#+BEGIN_HTML
<a href="http://futurismo.biz/wp-content/uploads/java.png"><img alt="" src="http://futurismo.biz/wp-content/uploads/java.png" width="256" height="256" /></a>
#+END_HTML

* はじめに
  Effective Java には毎回驚かされる.

  #+BEGIN_HTML
  <div class='amazlink-box' style='text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;'><div class='amazlink-list' style='clear: both;'><div class='amazlink-image' style='float:left;margin:0px 12px 1px 0px;'><a href='http://www.amazon.co.jp/EFFECTIVE-JAVA-%E7%AC%AC2%E7%89%88-Java-Series/dp/4621066056%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4621066056' target='_blank' rel='nofollow'><img src='http://ecx.images-amazon.com/images/I/51lEBnUjJqL._SL160_.jpg' style='border: none;' /></a></div><div class='amazlink-info' style='height:160; margin-bottom: 10px'><div class='amazlink-name' style='margin-bottom:10px;line-height:120%'><a href='http://www.amazon.co.jp/EFFECTIVE-JAVA-%E7%AC%AC2%E7%89%88-Java-Series/dp/4621066056%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4621066056' rel='nofollow' target='_blank'>EFFECTIVE JAVA 第 2 版 (The Java Series)</a></div><div class='amazlink-powered' style='font-size:80%;margin-top:5px;line-height:120%'>posted with <a href='http://amazlink.keizoku.com/' title='アマゾンアフィリエイトリンク作成ツール' target='_blank'>amazlink</a> at 14.11.30</div><div class='amazlink-detail'>Joshua Bloch<br /></div><div class='amazlink-sub-info' style='float: left;'><div class='amazlink-link' style='margin-top: 5px'><img src='http://amazlink.fuyu.gs/icon_amazon.png' width='18'><a href='http://www.amazon.co.jp/EFFECTIVE-JAVA-%E7%AC%AC2%E7%89%88-Java-Series/dp/4621066056%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4621066056' rel='nofollow' target='_blank'>Amazon</a> <img src='http://amazlink.fuyu.gs/icon_rakuten.gif' width='18'><a href='http://hb.afl.rakuten.co.jp/hgc/g00q0724.n763w947.g00q0724.n763x2b4/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F12699391%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Frms%2Fmsv%2FItem%3Fn%3D12699391%26surl%3Dbook' rel='nofollow' target='_blank'>楽天</a></div></div></div></div></div>
  #+END_HTML

  今日は, p143 からはじまる Enum の章を読んだ.
  
  エレガントで美しいコードや Enum の効果的な使い方に驚いた.
  忘れないように, 気になたところをメモしておく.

* Enum とは
  プログラマが選んだ各々の識別子をそのまま有限集合として持つ抽象データ型.
   - [[http://ja.wikipedia.org/wiki/%E5%88%97%E6%8C%99%E5%9E%8B][列挙型 - Wikipedia]]

   番号を持たないカテゴリ変数. 一意の文字定数.

   実行時には, 番号が振られることが覆いが, 
   言語によっては番号はプログラマに見えないこともある.
  
* int enum パターン
    名前つき int 定数のグループを宣言すること.バッドノウハウ.

#+begin_src java
public static final int FOO = 0;
public static final int BAR = 1;
#+end_src

    - コンパイラによる型検査の恩恵を受けることができない.
    - 同じ名前がついたものを名前空間で区別することができない.
    - 変更により再コンパイルが必要.
    - 表示可能な文字列へ変換する方法かない.
    - int と enum では実効速度はそれほどかわらない.

* 定数固有メソッド実装 (constant-specific method implementation)
    enum 定数に対して振る舞いを関連付けるための方法.

    パターン適用前.

    #+begin_src java
public enum Operation {
	PLUS, MINUS;

	double apply (double x, double y) {
		switch (this) {
		case PLUS:  return x + y;
		case MINUS: return x - y;
		}
		throw new AssertionError () ("Unknown op:" + this);
	}
}
    #+end_src

    パターン適用後. enum 型で抽象メソッドを宣言して,
    定数固有クラス本体で, 定数ごとに具象メソッドで
    その抽象メソッドをオーバーライド.

    switch 文を排除するので, エレガント!! 抽象メソッドによって実装をカプセル化.

#+begin_src java
public enum Operation {
	PLUS  { double apply (double x, double y) {return x + y;} },
	MINUS { double apply (double x, double y) {return x - y;} };

	abstract double apply (double x, double y);
}
#+end_src

* 定数固有クラス
    さらに, 定数固有データと実装を組み合わせることで, 強力な表現力を.

#+begin_src java
public enum Operation {
	PLUS ("+")  { double apply (double x, double y) {return x + y;} },
	MINUS ("-") { double apply (double x, double y) {return x - y;} };

	private final String symbol;
	Operation (String symbol) { this.symbol = symbol; }
	@Override public String toString () { return symbol; }

	abstract double apply (double x, double y);
}
#+end_src

   Enum の toString は定数表現は 文字列へ変換することもできる.
   
* 戦略 Enum (Strategy Enum)
    抽象メソッドをクラスに変更して外部から与えてやるようにすれば,
    これはいわゆる Strategy Pattern だ.

    評価戦略を外部から与えて, Operation は委譲で評価をする.

#+begin_src java
public enum Operation {
	PLUS (StrategyType.PLUS), MINUS (StrategyType.MINUS);

	private final Strategy strategy;

	Operation (EvaluateType type) { 
		this.type = type;
	}

	double apply (double x, double y) {
		return type.evaluate (x, y);
	}

	// Strategy Enum Type
	private enum EvaluateType {
		PLUS  { double apply (double x, double y) {return x + y;} },
		MINUS { double apply (double x, double y) {return x - y;} };

		abstract double apply (double x, double y);		
	}
}
#+end_src

* enum 定数と値の関連付けに ordinal をつかわないこと
    enum と関連付けられた int 値を取得する
    メソッドとして ordinal メソッドがある.

    これを定数と値を関連付けるときには, 使わない.
    なぜなら, コードの修正で, 振られる番号が変わるから.

#+begin_src java
public enum Number {
	ONE, TWE;
	public int getNumber{ return ordinal () + 1; }
}
#+end_src

   代わりにインスタンスフィールドを利用すればよい.

#+begin_src java
public enum Number {
	ONE (1), TWE (2);
	private final int number;
	Number (int number) { this.number = number;}
	public int getNumber{ return number; }
}
#+end_src

* 集合と集合の対応づけに序数インデックス (配列) をつかわない
    2 つの集合を対応付けるときには, 配列をつかうよりもいい方法がある.

    それは, EnumMap. EnumMap は内部実装は配列でされているものの,
    インデックスを意識する必要がないというメリットがある.

    配列をインデックスするために序数を使用することが適切であることはほ
    とんどない.代わりに, EnumMap を使用すること.

    関連が多次元ならば, EnumMap<..., EnumMap<...>> 
    というように連なっていく.

#+begin_src java
Map<Herb.Type, Set<Herb>> herbsByType =
	new EnumMap<Herb.Type, Set<Herb>>(Herb.Type.class);
for (Herb.Type t : Herb.Type.values ())
	herbsByType.put (t, new HashSet<Herb>());
for (herb h: garden)
	herbsBytpe.get (h.type).add (h);
#+end_src
     

* Enum シングルトンパターン
  Enum を利用して, シングルトンパターンをする方法.

#+begin_src java
class SampleSingleton {
	static public enum EnumUtil {
		INSTANCE;
		
		public static int plus (int x, int y) { return x + y; }
		public static int minus (int x, int y) { return x - y; }		
	}
	
	public static void main (String[] args) {
		System.out.println (EnumUtil.INSTANCE.plus (1,1));
		System.out.println (EnumUtil.INSTANCE.minus (2,1));		
	}
}
#+end_src
