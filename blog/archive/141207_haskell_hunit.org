#+BLOG: Futurismo
#+POSTID: 2792
#+DATE: [2014-12-07 日 21:45]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ
#+TAGS: Haskell, TDD
#+DESCRIPTION:Haskell の xUnit ツール HUnit を試す
#+TITLE: Haskell の xUnit ツール HUnit を試す

* はじめに
  Haskell でテストコードを書くツールをしらべてみた.

  メジャーなものは以下
  - doctest
  - QuickCheck
  - HSpec
  - HUnit

* 各ツールの特徴
** doctest
   コメントにテストを書くスタイルのツール.

   Python の doctest を haskell に移植したものだとか.
   - https://github.com/sol/doctest

** QuickCheck
   ランダムなテストデータによって関数の性質をテストする.
   - [[http://hackage.haskell.org/package/QuickCheck][QuickCheck: Automatic testing of Haskell programs | Hackage]]   

   xUnit とは異なるコンセプトをもつ.

** HSpec
   xSpec ライクなテストツール.
   - [[https://hackage.haskell.org/package/hspec][hspec: A Testing Framework for Haskell | Hackage]]

   Ruby の RSpec にインスパイヤされたらしい.
   - [[http://hspec.github.io/][Hspec: A Testing Framework for Haskell]]

   記法が BDD 的.

** HUnit
  xUnit ライクなテストツール. JUnit ライク.
  - [[https://hackage.haskell.org/package/HUnit][HUnit: A unit testing framework for Haskell | Hackage]]
  - [[http://qiita.com/7shi/items/9fb326a87de6c3083784][Haskell - HUnit 超入門 - Qiita]]
  - [[http://d.hatena.ne.jp/E_Mattsan/20121020/1350707524][Haskell の UnitTest, HUnit について学ぶ - エンジニアのソフトウェア的愛情]]

* HUnit を試す
  JUnit になじみがあるので, HUnit を試してみた.

** Install
  #+begin_src bash
  $ cabal install HUnit
  #+end_src
  
** Usage
    - [[http://hunit.sourceforge.net/HUnit-1.0/Guide.html][HUnit 1.0 User's Guide]]

    Test.HUnit をインポート.

#+begin_src haskell
import Test.HUnit
#+end_src

*** テスト対象コード

#+begin_src haskell
import Data.List
import Data.Char
import Unsafe.Coerce

data Nat = Zero
         | Succ Nat
         deriving Show

natToInteger (Succ n) = natToInteger n + 1
natToInteger Zero = 0
#+end_src

*** テストコード

#+begin_src haskell
tests = TestList
        [ "natToInteger 1" ~: natToInteger Zero ~?= 0
        , "natToInteger 2" ~: natToInteger (Succ Zero) ~?= 1
        , "natToInteger 3" ~: natToInteger (Succ (Succ Zero)) ~?= 2
        ]
#+end_src

*** テスト実行
    runTestTT (テスト関数名) でテスト実行.

#+begin_src bash
$ runTestTT tests
Cases: 3  Tried: 3  Errors: 0  Failures: 0
Counts {cases = 3, tried = 3, errors = 0, failures = 0}
#+end_src

わざと失敗させてみる.

#+begin_src bash
*Main> runTestTT tests
### Failure in: 2:natToInteger 3
expected: 1
 but got: 2
Cases: 3  Tried: 3  Errors: 0  Failures: 1
Counts {cases = 3, tried = 3, errors = 0, failures = 1}
#+end_src

** Bookmarks
   - [[https://www.haskell.org/haskellwiki/Emacs/Automatic_unit_testing][Emacs/Automatic unit testing - HaskellWiki]]
