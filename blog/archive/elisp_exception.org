#+BLOG: Futurismo
#+POSTID: 2937
#+DATE: [2015-01-16 金 00:59]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 技術メモ, Emacs
#+TAGS: elisp
#+DESCRIPTION: Emacs Lisp の例外処理について軽く調べてみた
#+TITLE: Emacs Lisp の例外処理について軽く調べてみた

#+BEGIN_HTML
<img alt="" src="http://futurismo.biz/wp-content/uploads/emacs_logo.jpg"/>
#+END_HTML

* はじめに
  さっき, Java の例外処理について調べて見たので,
  こんどは Emacs Lisp の例外処理について調べてみた.

  - [[http://futurismo.biz/archives/2935][Java の例外処理について徹底的に調べてみた | Futurismo]]

* 文法
** error
   致命的なエラーが発生した時に利用. 実行中の elisp を強制停止.

#+begin_src emacs-lisp
(error "%s" "Fatal Error Occured!!!")
#+end_src

** signal
   エラーシンボルとデータを伴って例外をあげる.

#+begin_src emacs-lisp
(signal 'wrong-type-argument '(0))
#+end_src

   java における throw new HogeException ("hoge");

** condition-case
   エラーを補足する. 

   #+begin_src emacs-lisp
(defun error-test ()
  (interactive)
  (condition-case error-var
      (/ 0 0)
    (message "%s" error-var)))
(error-test)
   #+end_src

   java における catch のような役割.

** unwind-protect
   後処理をする. 

   #+begin_src emacs-lisp
(defun error-test2 ()
  (interactive)
  (unwind-protect
      (/ 0 0)
    (message "%s" "you shall die!!")))
(error-test)
   #+end_src

   java における finally のような役割.
   
* Bookmarks
  - [[http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_127.html][GNU Emacs Lisp リファレンスマニュアル: Catch and Throw]]
  - [[http://www.fan.gr.jp/~ring/doc/elisp_19/elisp-jp_11.html][GNU Emacs Lisp リファレンス・マニュアル: 9. 制御構造]]
  - [[http://d.hatena.ne.jp/syohex/20130127/1359291030][Emacs Lisp で例外処理 - Life is very short]]
  - [[http://aki2o.hatenablog.jp/entry/2013/04/20/Elisp%E3%81%A7Java%E3%83%A9%E3%82%A4%E3%82%AF%E3%81%AA%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86%E3%82%92%E6%8F%90%E4%BE%9B%E3%81%99%E3%82%8Byaxception.el%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F][Elisp で Java ライクな例外処理を提供する yaxception.el を作りました - 死ぬまでの暇潰し]]

