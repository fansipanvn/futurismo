#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: MOOC
#+TAGS: coursera
#+DESCRIPTION:coursera で From Nand To Tetris Part1 を受けた感想
#+TITLE: ハードウェアの仕組みを学ぶ！coursera で From Nand To Tetris Part1 を受けた

[[file:./../img/2015-05-24-121432_290x161_scrot.png]]

数か月前に _コンピュータシステムの理論と実装_ という本が発売された.

#+BEGIN_HTML
<div class='amazlink-box' style='text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;'><div class='amazlink-list' style='clear: both;'><div class='amazlink-image' style='float:left;margin:0px 12px 1px 0px;'><a href='http://www.amazon.co.jp/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E2%80%95%E3%83%A2%E3%83%80%E3%83%B3%E3%81%AA%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9-Noam-Nisan/dp/4873117127%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117127' target='_blank' rel='nofollow'><img src='http://ecx.images-amazon.com/images/I/514ifs4Y5bL._SL160_.jpg' style='border: none;' /></a></div><div class='amazlink-info' style='height:160; margin-bottom: 10px'><div class='amazlink-name' style='margin-bottom:10px;line-height:120%'><a href='http://www.amazon.co.jp/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E2%80%95%E3%83%A2%E3%83%80%E3%83%B3%E3%81%AA%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9-Noam-Nisan/dp/4873117127%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117127' rel='nofollow' target='_blank'>コンピュータシステムの理論と実装 ―モダンなコンピュータの作り方</a></div><div class='amazlink-powered' style='font-size:80%;margin-top:5px;line-height:120%'>posted with <a href='http://amazlink.keizoku.com/' title='アマゾンアフィリエイトリンク作成ツール' target='_blank'>amazlink</a> at 15.05.24</div><div class='amazlink-detail'>Noam Nisan<br /></div><div class='amazlink-sub-info' style='float: left;'><div class='amazlink-link' style='margin-top: 5px'><img src='http://amazlink.fuyu.gs/icon_amazon.png' width='18'><a href='http://www.amazon.co.jp/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E2%80%95%E3%83%A2%E3%83%80%E3%83%B3%E3%81%AA%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9-Noam-Nisan/dp/4873117127%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117127' rel='nofollow' target='_blank'>Amazon</a></div></div></div></div></div>
#+END_HTML

そして、この本の発売とちょうど同じタイミングに 
coursera で _From NAND to Tetris_ の講義が始まった.

- [[https://www.coursera.org/course/nand2tetris1][From Nand to Tetris / Part I - Hebrew University of Jerusalem | Coursera]]

あまりにグッドタイミングなめぐり合わせに喜びつつ、講座を受けてみました.

* FROM NAND TO TETRIS の紹介
** 有名なコンピュータ講義とその教材
  これは、海外では有名なコンピュータ講義である 
  - http://www.nand2tetris.org/

#+BEGIN_HTML
<iframe width="420" height="315" src="https://www.youtube.com/embed/JtXvUoPx4Qs?rel=0" frameborder="0" allowfullscreen></iframe>
#+END_HTML

  TED にも登場して講座の紹介をしているよう.

#+BEGIN_HTML
<iframe src="https://embed-ssl.ted.com/talks/shimon_schocken_the_self_organizing_computer_course.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
#+END_HTML

** 特徴
  講座の特徴は、NAND というもっとも基本的な論理素子から、
  毎週自分の手でコンピュータに必要な部品を作成していくところ.
  難しく聞こえるかもしれないけれども、
  そこはよく講座ができているので、なんとかなる.

  実際の VHDL や C 言語などをつかうのではなくて、
  学習用に開発された Hack 言語というものを利用する.
  この Hack 言語というものが、実際のコンピュータのエッセンスを残しつつ、
  余分な仕様をはぎおとしてシンプルにしているため、
  学習者は最低限の努力と知識で部品をつくることができる.

  また、各週ごとに部品が完成しなくても、次の週に進むと、
  あらかじめ用意された、前回までのツールが利用できるので、
  途中で挫折することはない. 毎週、あらたな気分で挑戦できる.

* 著者直々の講義
  Noam 先生と Shimon 先生直々に動画で説明をしてくれる.
  ここに、coursera とともに学習を進めることのうれしさがある.

  自分は、動画を一通り見た後に、参考程度にコンピュータシステムの理論と
  実装の本をながめるようにしていた.

  coursera の講義は、Part1, Part2 にわかれて提供される.
  今回は、Part1 で、ハードウェアの部分を学習した.

  毎週の講義と参考書の章は 1 対 1 で対応していて、
  毎週 1 章を読んでいく. 

  また、毎週 assignment として、部品の作成をして、
  成果物は coursera の採点システムに提出する.

* 感想
** 山登りに似た達成感
  コンピュータの部品を一歩一歩部品を作成して行くことで、
  途中から自分の作成した成果を見直すと、山の頂上に立ったような達成感、
  全能感を感じることができた.

** 抽象によるコンピュータの構築
  また、NAND という単純なゲートから、徐々に部品を組み上げていく様は、
  まるで、単純な公理から定理を導いていくような趣きもある.

  一つの部品を作成すると、部品がどうやって動くのかということを
  ブラックボックスにすることができて、部品は何をするのかだけを知ればよい.
  
  それは、ソフトウェアでもよくでてくる抽象化というやつだ。
  
  邦訳の _抽象と実装_ という意味を実感した.

** ハードウェアがなんなのかということがわかった
  自分は組み込みソフトの開発者なので、ハードウェアを理解していないこと
  で、話について行けなくなることがたまにある.

  先日も、ハードよりの講演会に参加したのだが、話を聴いていてもまったく
  わからずに悔しい思いをした.

  CPU, レジスタ, メモリ, などなど、説明を読んで理解していた気になっ
  ていた. 今回、自分の手で作り上げることによって、それらがいったいなに
  をやっているのか、理解できた気がした.
  
** それらは知らなくてもいいこと
  しかし、ハードウェアの知識はソフトウェア開発に必要かといえば、
  必要ないことだ。

  自分自身の人体の仕組みをしらなくたって、人間は生きていける.
  機械語を理解することと、DNA を理解することは、
  同じことだとともう. それらは、必要ない.

  では、なぜ学ぶのかといえば、一つは好奇心、もう一つは不安感のため.
  知らなくたってなんとかなるものの、得体のしれないブラックボックスの
  中身を知らずに使いつづけるのもあまり気分がいいものではない.
  なので、不安感を解消するために、安定感を得るために、学ぶ.

  自分の組んだプログラムがハードウェア上でどのようにして
  動作するかを知ることにより、ソフトウェアに自信を得ることができる.

* 勉強メモ
  以下、作成した部品のメモ.

  [[file:./../img/2015-05-24-150624_545x763_scrot.png]]

** week1: ゲートへ
   論理ゲートとは、ブール関数を実現するための物理デバイス.

   ゲートをまとめたものを回路, チップという.

*** トランジスタ
    2 値のデータ表現を電気で実現する物理デバイス. スイッチング技術.
    - [[http://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B8%E3%82%B9%E3%82%BF][トランジスタ - Wikipedia]]

    電気であることが一つのポイント. 
    別の物理性質を用いてゲートを作成することもできる.

*** NAND
    もっとも基礎的な論理ゲート.

***  論理ゲート
    すべてのブール関数は NAND NOT をつかって表現できる.
    (AND, OR, NOT ) を含む.

    - NOT (x) = (x NAND x)
    - AND (x, y) = NOT (x NAND y)
    - OR (x,y) = NOT (NOT (x) AND NOT (y))
  
    NAND を実現した物理デバイスが自由に利用できれば,
    どのようなブール関数もハードウェアとして作成できる.

*** マルチプレクサ
    ふたつ以上の入力をひとつの信号として出力する機構.
    - [[http://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%AB%E3%83%81%E3%83%97%E3%83%AC%E3%82%AF%E3%82%B5][マルチプレクサ - Wikipedia]]
 
    マルチプレクサによって、ハード的に if 文を表現することができる.

*** 作成した成果物
    これらの部品は、HDL で作成していく.

   - And 
   - Or
   - Xor
   - Not
   - Not16, And16, Or16, Mux16 ... 16 進数の 論理ゲート

   - Mux ... マルチプレクサ
   - DMux ... デマルチプレクサ
   - Mux8Way16, DMux8Way, DMux4Way .. 16 進数のマルチプレクサ

** week2:  ALU へ
   算術ゲートは、算術計算をおこなうためのゲート.

   コンピュータの命令は 2 進数の加算に還元できることが多い.
   
   算術計算を行うゲートは、ALU という CPU 内部の論理算術ゲートに集約される
   - [[http://ednjapan.com/edn/articles/1308/09/news002.html][マイコン入門!! 必携用語集 (6):CPU の中枢「ALU」を作ってみよう (1/4) - EDN Japan]]

*** 作成した成果物
   - HalfAdder ... 半加算器
   - FullAdder ... 全加算器
   - Add16 ... 16 進加算
   - Inc16 ... 16 進インクリメンタ
   - ALU ... 論理算術ゲート

** week3: Memory へ
   この章で、*状態* という概念がでてくる.

*** 順序回路
    ひとつ以上のフリップフロップ回路が組み込まれているもの. 

    以下のような機能をもつ.
    - 状態を保つ
    - 状態を操作する
    
    状態がかわるのは, クロックが次の周期に移行したとき.
    (c.f. 組み合わせ回路は即時)

*** (D) フリップフロップ回路
    順序回路の中でもっともプリミティブなもの.
    NAND とともに, もっともプリミティブなものとして考えられる.

    フリップフロップ回路の実装方法はいろいろある. 
    NAND から構築する方法もある.
    - [[http://home.a00.itscom.net/hatada/dc2/chap09/dff.html][D フリップフロップ]]

*** レジスタ
    データを記憶したり取り出したりすることができる順序回路.
    -[[http://ja.wikipedia.org/wiki/%E3%83%AC%E3%82%B8%E3%82%B9%E3%82%BF_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)][ レジスタ (コンピュータ) - Wikipedia]]

*** メモリ(RAM)
    レジスタがたくさんあつまったもの.Random access Memory.

    各レジスタには、一位のアドレスが割り振られている.
    
*** 作成した成果物
   - Bit, Register ... レジスタ
   - RAM8, RAM16, RAM64, RAM512, RAM4K, RAM16K ... RAM
   - PC ... プログラムカウンタ

** week4:  機械語へ
*** 機械語
    機械語とは、コンピュータの CPU で直接実行される一連の命令.

    一つ一つの命令が行う仕事は極めて限定されており、
    CPU のレジスタやメモリ上の単位データに対して、
    読み込みやジャンプ、ALU といった操作を実行する。
    
   - [[http://ja.wikipedia.org/wiki/%E6%A9%9F%E6%A2%B0%E8%AA%9E][機械語 - Wikipedia]]

  機械語は, レジスタ、プロセッサを用いて、メモリを操作する.

*** 作成した成果物
    - 乗算プログラム
    - 入出力操作プログラム
    
** week5: コンピュータアーキテクチャへ
*** CPU
   中央処理装置, プロセッサとも.
   - [[http://ja.wikipedia.org/wiki/CPU][CPU - Wikipedia]]

   仕様で決められた一連の命令セットを実行できる.

   記憶装置上にあるプログラムと呼ばれる命令列を順に読み込んで
   解釈・実行することで情報の加工を行う.

*** ノイマン型アーキテクチャ
    CPU を中心として、メモリデバイスを操作し、
    入力デバイスからデータを受け取り、出力デバイスへデータを送信する.
  
    - メモリ
      - データメモリ
      - 命令メモリ
        メモリ上にプログラムを保持するところがノイマン的.
    - CPU
      - ALU
      - レジスタ
      - 制御ユニット
    - レジスタ
      - データレジスタ
      - アドレスレジスタ
      - プログラムカウンタレジスタ
        次にフェッチする命令メモリ上のアドレスを保持して、
        一つ命令を実行する度にインクリメントしていく.
    - 入出力装置
      メモリマップド I/O によってメモリ操作のように制御

*** 作成した成果物
    - CPU
    - メモリ
    - コンピュータ

** week6: アセンブラへ
*** アセンブリ言語
    機械語を人間にわかりやすい形で記述する、代表的な低水準言語である.
    - [[http://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E8%A8%80%E8%AA%9E][アセンブリ言語 - Wikipedia]]
   
*** 作成した成果物
    - アセンブラ
      
    これは、Ruby で実装してみた.
    - https://gist.github.com/tsu-nera/a3298e614d4d358a740a

#+BEGIN_HTML
<div class='amazlink-box' style='text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;'><div class='amazlink-list' style='clear: both;'><div class='amazlink-image' style='float:left;margin:0px 12px 1px 0px;'><a href='http://www.amazon.co.jp/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E2%80%95%E3%83%A2%E3%83%80%E3%83%B3%E3%81%AA%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9-Noam-Nisan/dp/4873117127%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117127' target='_blank' rel='nofollow'><img src='http://ecx.images-amazon.com/images/I/514ifs4Y5bL._SL160_.jpg' style='border: none;' /></a></div><div class='amazlink-info' style='height:160; margin-bottom: 10px'><div class='amazlink-name' style='margin-bottom:10px;line-height:120%'><a href='http://www.amazon.co.jp/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E2%80%95%E3%83%A2%E3%83%80%E3%83%B3%E3%81%AA%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9-Noam-Nisan/dp/4873117127%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117127' rel='nofollow' target='_blank'>コンピュータシステムの理論と実装 ―モダンなコンピュータの作り方</a></div><div class='amazlink-powered' style='font-size:80%;margin-top:5px;line-height:120%'>posted with <a href='http://amazlink.keizoku.com/' title='アマゾンアフィリエイトリンク作成ツール' target='_blank'>amazlink</a> at 15.05.24</div><div class='amazlink-detail'>Noam Nisan<br /></div><div class='amazlink-sub-info' style='float: left;'><div class='amazlink-link' style='margin-top: 5px'><img src='http://amazlink.fuyu.gs/icon_amazon.png' width='18'><a href='http://www.amazon.co.jp/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E2%80%95%E3%83%A2%E3%83%80%E3%83%B3%E3%81%AA%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9-Noam-Nisan/dp/4873117127%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117127' rel='nofollow' target='_blank'>Amazon</a></div></div></div></div></div>
#+END_HTML
