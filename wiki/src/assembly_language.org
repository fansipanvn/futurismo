#+OPTIONS: toc:nil
* アセンブリ言語
  一般的には最適化コンパイラが人手で書かれたアセンブリ言語のコードと同等の性能を発揮すると言われている。

- [[http://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E8%A8%80%E8%AA%9E][アセンブリ言語 - Wikipedia]]

* ISA
  命令セットアーキテクチャ。(Instruction Set Architecture)

  - [[http://ja.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E3%82%BB%E3%83%83%E3%83%88][命令セット - Wikipedia]]

  コンピュータのハードウェアに対して命令を伝えるための言葉の語彙.

** x86, x64(x86-64) ISA
 インテルやAMDのISA。32bitがx86, 64bitが x64.

* x86, x86-64 ISAの文法

** レジスタ

 - eax, ecx, edx, ebx, esp, ebp, esi, edi	  ... 汎用レジスタ (32 ビット)
 - rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8～15 ... 汎用レジスタ (64 ビット)
 - eflags	... フラグレジスタ (32 ビット)
 - rflags	... フラグレジスタ (64 ビット)
 - eip	... プログラムカウンタ (32 ビット)
 - rip	... プログラムカウンタ (64 ビット)
 - st(0)～(7)	... FPU レジスタ
 - FPU ステータスレジスタ	... FPU ステータスレジスタ
 - FPU コントロールレジスタ	... FPU コントロールレジスタ
 - xmm0～7	... XMM レジスタ
 - mxcsr	... MXCSR コントロール＆ステータスレジスタ 

 参考リンク。
   - [[http://www.mztn.org/lxasm64/amd04.html][Assembly Programming on x86-64 Linux (04)]]
   - [[http://milkpot.sakura.ne.jp/note/x86.html][プログラミングノート - x86]]
   - [[http://qiita.com/kktk-KO/items/da83ce61e4ae1b55a905][x86-64 アセンブリ読んでみる -O0 - Qiita]]
   - [[http://ja.wikibooks.org/wiki/X86%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%A9][X86アセンブラ - Wikibooks]]


*** ベースレジスタ   rsb, 
*** スタックレジスタ rsp, esp
    スタックポインタはサブルーチンコールの戻りアドレスをメモリに自動的に格納したり、
    PUSH、POP命令でレジスタを一時的に退避、復帰する場合に使われます

*** eax
    サブルーチンからの戻り値を受けとるために利用することがおおい。
** x86-64 Calling Conventions(呼出規約)
   プログラムで関数を呼び出す際に、レジスタやスタックを使いどのように引数を渡すか、
   戻り値をどのように受け取るかは呼出規約(calling convention)で決められている

   the x86-64 ISA passes the first six arguments to a function in registers. 
   Registers are used in the following order: 

   rdi, rsi, rdx, rcx, r8, r9. 

   The return value for functions is passed in rax.

  - [[http://ja.wikipedia.org/wiki/%E5%91%BC%E5%87%BA%E8%A6%8F%E7%B4%84#System_V_AMD64_ABI_.E5.91.BC.E5.87.BA.E8.A6.8F.E7.B4.84][呼出規約 - Wikipedia]]
  - [[http://th0x4c.github.io/blog/2013/04/10/gdb-calling-convention/][Linux x86-64 の呼出規約(calling convention)を gdb で確認する]]

*** サブルーチンプロローグ
#+begin_src asm
_function:
     push ebp       ;ベースポインタを保存
     mov ebp, esp   ;現在のスタックフレームを指すようベースポインタを変更
     sub esp, x     ;局所変数(Cでいう自動変数)の大きさの分スタックポインタを減らす
#+end_src

*** サブルーチンエピローグ
#+begin_src asm
    mov esp, ebp   ;局所変数を除去
    pop ebp        ;ベースポインタを復帰
    ret            ;サブルーチンから戻る
#+end_src

** データ転送命令
*** mov
    mov命令はsrcオペランドをdestオペランドにコピーします。

    #+begin_src asm
    mov src, dest
    #+end_src

*** lea
    アドレス計算命令。lea命令は、srcオペランドのアドレスを計算し、そのアドレスをdestオペランドにロードします。

    #+begin_src asm
    lea src, dest
    #+end_src


** 制御構文
*** if
    すべて、「二者を比べ」て「結果によってジャンプ」.

#+begin_src c
int absdiff(int x, int y)
{
  int result;
  if (x > y) {
    result = x-y;
  } else {
    result = y-x;
  }
  return result;
}
 
int goto_ad ( int x, int y) 
{ 
  int result; 
  if (x <= y) 
    goto Else ; 
  result = x-y; 
Exit : 
  return result;
Else: result = y-x; 
  goto Exit ; 
}
#+end_src

 #+begin_src asm
 int x %edx
 int y %eax 

 absdiff : 
	pushl %ebp
	movl %esp , %ebp
	; body
	movl 8(%ebp), %edx
	movl 12(%ebp), %eax
	cmpl %eax , %edx ;
	jle .L7
	; body end
	subl %eax , %edx ; y-x
	movl %edx , %eax 
 .L8:
	leave ret
 .L7:
	subl %edx , %eax ; x-y
	jmp .L8
 #+end_src

*** while
*** for
*** switch

** 関数
   関数に飛ぶ。

   #+begin_src asm
   400e79:	e8 bf 03 00 00       	callq  40123d <strings_not_equal>
   #+end_src

* Tools
** gdb
   デバッカ。
*** ステップ実行
**** run (r)
     プログラムの実行。
**** step (s)
     プログラムをステップ実行。ステップオーバー。
**** stepi
     アセンブリコードのステップ実行。
**** next (n)
     プログラムをステップ実行。ステップイン。
**** cont (c)
     プログラムの再開。
*** ブレークポイント操作
**** breakpoint(b)
     ブレークポイントをはる。b [関数名].
**** info b
     ブレークポイントの情報を表示。
**** delete(d)
     ブレークポイントのクリア。
*** アセンブリ解析
**** disas
     アセンブリコードの表示
**** info register(info reg)
     レジスタの情報を表示
**** x 
     メモリの状態表示

*** Links
  - [[http://d.hatena.ne.jp/Watson/20100318/1268887029][gdbコマンド メモ - Watsonのメモ]]

** objdump
** nm
   オブジェクトファイルのシンボルをリストする。
   - [[http://kazmax.zpp.jp/cmd/n/nm.1.html][nm - コマンド (プログラム) の説明 - Linux コマンド集 一覧表]]

* Reference
- [[http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.html][Intel® 64 and IA-32 Architectures Software Developer’s Manual V2]]
- [[http://support.amd.com/en-us][Support & Drivers]]
- [[http://www.oklab.org/program/assembler/gas.html#0][GNU アセンブラ入門(GAS)]]
