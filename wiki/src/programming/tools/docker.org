#+OPTIONS: toc:nil
* Docker
  Docker とは, OSS の Linux コンテナエンジン.

  - Official: [[https://www.docker.com/][Docker - Build, Ship, and Run Any App, Anywhere]]
  - github: [[https://github.com/docker/docker][docker/docker]]
  - [[http://ja.wikipedia.org/wiki/Docker][Docker - Wikipedia]]

** 特徴
   - 最も素晴らしい点は, シンプルかつ高速
   - Go でかかれている.
   - Linux カーネルにのみ依存.
   - デプロイの作業が自動化できる.
     - github, bitbucket とも連携.
   - Docerfile によってインフラをコードとして扱える.
   - ゲスト OS がなくカーネルを共有しているのでオーバヘッドが非常に少ない
     - ディスク使用量は少ない.
     - インスタンス作成やインスタンス起動は速い
     - 性能劣化がほとんどない
   - Linux コンテナ上ならば同じ環境が再現できる (Java と同じ考え)
   - クライアント・サーバ型のアーキテクチャ

** Linux コンテナとは
   いくつかのユーザプロセスをまとめて閉じ込めたユーザ空間.
   コンテナ内で動くプロセスは通常のプロセスと同じもの.

*** ハイパーバイザとの比較
    From: [[http://www.school.ctc-g.co.jp/columns/nakai/nakai41.html][コラム - クラウド時代のオープンソース実践活用 | 第 41 回  Linux コンテナ (LXC) の基礎をまとめ直す|CTC 教育サービス 研修/ トレーニング]]
    
    - コンテナ
      - 1 つの OS.
      - カーネル空間共有, ユーザ空間が別々
    - ハイパーバイザ
      - 独立した複数 OS
      - カーネル空間, ユーザ空間が別々

** Dockerfile とは
   OS のスクラッチイメージからアプリが動くまでを書いたコード.

** Bookmarks
 - [[http://www.publickey1.jp/blog/14/dockerdockerfiledocker_meetup_tokyo_2.html][今からでも間に合う Docker の基礎. コンテナとは何か, Dockerfile とは何か. Docker Meetup Tokyo #2 - Publickey]]
 - [[http://deeeet.com/writing/2014/05/01/what-is-docker/][Docker とは何か? どこで使うべきか? | SOTA]]
* Docker の使い方
** Install
*** ArchLinux
   - [[https://wiki.archlinux.org/index.php/Docker_(%E6%97%A5%E6%9C%AC%E8%AA%9E)][Docker (日本語) - ArchWiki]]
    
     #+begin_src sh
     # インストール
     $ sudo pacman -S docker
     # サービス登録. Docker は OS のサービスとして動作する.
     $ sudo systemctl start docker
     # 動作確認 docker がクライアントコマンド
     $ dockker info
     # 一般ユーザを sudo なしで docker をつかえるようにする
     $ sudo gpasswd -a tsu-nera docker
     #+end_src

** 使ってみる
*** Hello, World
    まずは, 定番の Hello World をしてみる. コマンドラインから,

#+begin_src sh
$ sudo docker run ubuntu /bin/echo 'Hello World'
#+end_src

  これを叩くと, ローカルに docker のイメージがない場合は, Docker Hub か
  ら勝手にダウンロードしてくれる.

  docker は image からコンテナを生成する.
  (クラスからインスタンスを生成するように)

#+begin_src language
% sudo docker run ubuntu /bin/echo 'Hello World'
Unable to find image 'ubuntu' locally
Pulling repository ubuntu
c4ff7513909d: Download complete 
er.io/v1/ 9d: Pulling image (latest) from ubuntu 
511136ea3c5a: Download complete 
1c9383292a8f: Download complete 
9942dd43ff21: Download complete 
d92c3c92fa73: Download complete 
0ea0d582fd90: Download complete 
Hello World
#+end_src

*** bash を起動してみる
   bash を起動して, インタラクティブに操作 -i -t /bin/bash のオプション
   をつける.

#+begin_src language
$ sudo docker run -t -i ubuntu /bin/bash
#+end_src

*** ping してみる

   -d をつけると, コマンドを実行しっ放しにしておくことができる.

#+begin_src sh
   $ docker run -i -t -d base /bin/ping -i 5 www.google.com
#+end_src

   - docker attach {ID} で 起動中のコンテナに乗り込める.
   - docker logs {ID}起動中のコンテナの出力を確認できる.

   [[http://apatheia.info/blog/2013/06/17/docker/][仮想環境構築に docker を使う - apatheia.info]]

*** port を指定する
    docker run 時に -p をつけることで, コンテナから外部にさらすポートを決
    められる. コンテナ側のポートはホスト側のポートに変換される際, ポート番
    号が変更される (49153 以降になる) ので, docker port <ジョブの ID> <ポート
    番号> あるいは docker ps でポートの対応状況を確認する必要がある.

*** run 起動オブション
    代表的なもののみ抜き出した.

#+begin_src language
  % docker help run
  Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
  Run a command in a new container
  -a, --attach=[]            Attach to stdin, stdout or stderr.
  -d, --detach=false         Detached mode: Run container in the background, print new container id
  -i, --interactive=false    Keep stdin open even if not attached
  -p, --publish=[]           Publish a container's port to the host
  -t, --tty=false            Allocate a pseudo-tty
#+end_src

*** イメージとコンテナ
**** 一覧表示
    現在保持している image は docker images で確認できる.

#+begin_src language
$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              14.04               c4ff7513909d        3 days ago          213 MB
ubuntu              latest              c4ff7513909d        3 days ago          213 MB
#+end_src

   また, 過去に生成したコンテナも含めて一覧を確認するコマンドは docker ps -a.

#+begin_src language
 % docker ps -a
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                      PORTS               NAMES
78941163261a        ubuntu:14.04        /bin/bash              12 minutes ago      Exited (0) 11 minutes ago                       clever_perlman       
894d649c27d4        ubuntu:14.04        /bin/echo 'Hello Wor   13 minutes ago      Exited (0) 13 minutes ago                       stupefied_rosalind   
9d34b4889593        ubuntu:14.04        /bin/echo 'Hello Wor   14 minutes ago      Exited (0) 14 minutes ago                       romantic_bohr        
a986cb096871        ubuntu:14.04        /bin/echo 'Hello Wor   15 minutes ago      Exited (0) 15 minutes ago                       tender_sinoussi      
cbbca1119327        ubuntu:14.04        /bin/echo 'Hello Wor   15 minutes ago      Exited (0) 15 minutes ago                       mad_babbage          
c6824e447da7        ubuntu:14.04        /bin/echo 'Hello Wor   17 minutes ago      Exited (0) 17 minutes ago                       sleepy_bardeen       
#+end_src

**** 削除
     とりあえず, すべてを一旦削除したい.コンテナをすべて削除.

     #+begin_src language
     $ sudo docker rm $(sudo docker ps -a -q)
     #+end_src

     指定したキーワードで引っかかったコンテナを削除
     
     #+begin_src sh
     $ docker ps -a |grep "tsune" | awk '{print $1}' | xargs docker rm
     #+end_src

     続いて, イメージもすべて削除.

     #+begin_src language
$ sudo docker rmi $(sudo docker images -q)
     #+end_src

  - [[http://qiita.com/mopemope/items/181cb6c6c6f7cf9bbaa9][私の Docker TIPS - Qiita]]

**** コミット
     コンテナは起動が終了すると破棄される.起動中のコンテナを再利用する
     ためには, 起動中のコンテナを commmit コマンドでイメージに変換する
     必要がある.

     #+begin_src Sh
$ sudo docker commit 15cb2a03c788 centos:test
     #+end_src

     作成したイメージから新たな Docker コンテナを起動するには, -t オプ
     ションの後ろにタグを指定します.

#+begin_src sh
$ sudo docker run -i -t centos:test /bin/bash
#+end_src

     - [[http://knowledge.sakura.ad.jp/tech/1811/][これから始める「 Docker でかんたん LAMP 環境 for CentOS 」 - さくらのナレッジ]]

*** Links
   秀逸なガイダンス.
   - [[http://qiita.com/zembutsu/items/444396b76e0db2c04c2b][Docker User Guide 日本語版 (仮) - Qiita]]
   - [[http://dotinstall.com/lessons/basic_docker][Docker 入門 (全 11 回) - プログラミングならドットインストール]]

   Docker Architecture.
   - [[http://qiita.com/zembutsu/items/337c04a7003f3a5c4211][Docker を理解する - Docker User Guide - Qiita]]
     
** SSH
   ssh でコンテナにアクセスする.
   コンテナの中で openssh-server を立ち上げ.パスワードを設定.

   #+begin_src sh
apt-get install openssh-server
mkdir /var/run/sshd
/usr/sbin/sshd
passwd root
exit
   #+end_src

   root でアクセスできるように設定変更.

   #+begin_src sh
   vi /etc/ssh/sshd_config
   #+end_src

   #+begin_src language
   PermitRootLogin  yes
   #+end_src

   run.sh に sshd が勝手に起動するように修正.

   #+begin_src language
   vi run.sh

   # 追加
   /usr/sbin/sshd -D &
   #+end_src

   ここまでの作業を commit.

   #+begin_src sh
   docker commit ${ID} tsune/wordpress
   #+end_src
   
   - [[http://inokara.hateblo.jp/entry/2013/09/29/090500][docker のコンテナイメージに ssh でアクセスしてみる - ようへいの日々精進 XP]]

* Docker 関連技術
** Docker Hub
   Docker コンテナをクラウドサービス上で共有できる.

   - https://hub.docker.com/
   [[http://www.publickey1.jp/blog/14/docker_hubdockerdocker.html][- Docker Hub 発表. ビルド, テスト, デプロイの自動化, Docker イメージの管理など   Publickey]]
   - [[http://qiita.com/zembutsu/items/dd3fd778b92aacaa884b][Docker Hub を始める - Docker User Guide - Qiita]]

** Boot2Docker
   Boot2Docker を利用すると, Windows 上で Docker を動かすことが可能となる.
   Very Cool Feature.

   - [[https://github.com/boot2docker/boot2docker][boot2docker/boot2docker]] 
   [[https://docs.docker.com/installation/windows/][- Microsoft Windows - Docker Documentation]]

** Panamax
   Docker コンテナを GUI で利用することができる.Very Cool Feature.
   
   - [[http://panamax.io/][Panamax: Docker Management for Humans]]
   - [[https://github.com/CenturyLinkLabs][CenturyLink Labs]]
   - [[http://blog.wnotes.net/blog/article/tried-panamax-with-wordpress][Docker コンテナを GUI で管理する「 Panamax 」を使って WordPress をセットアップしてみた話 | ブログ :: Web notes.log]]
** nsinit
   コンテナのなかに入るツール. .

*** インストール

   #+begin_src sh
   $ go get github.com/docker/libcontainer/nsinit   
   #+end_src

*** アタッチ
   以下のスクリプトを利用.

#+begin_src sh
#!/bin/bash
# usage: ./docker-attatch.sh {DockerID} {Program}
id=`sudo docker ps -q --no-trunc $1`
root=/var/lib/docker/execdriver/native/$id
sudo sh -c "cd $root && $GOPATH/bin/nsinit exec $2"
#+end_src

   - [[http://mizzy.org/blog/2014/06/22/1/][Docker コンテナに入るなら SSH より nsinit が良さそう - Gosuke Miyashita]]

