#+OPTIONS: toc:nil
* Archtecture Patterns
アーキテクチャパターン.

* POSA-1
会社の図書館にあった.

  http://www.amazon.co.jp/exec/obidos/ASIN/4764902834/asakichy-22/

** 混沌から構造へ
   複雑になりがちなソフトウェアの構造を整理して「分割して統治」するた
   めのパターン.

*** Layers
    アプリケーションを複数の"層"に分け, それらを独立したモジュールとし
    て開発・保守する. 各層はインタフェースを定義しモジュール化されたソ
    フトウェアであり, テクノロジーの進歩や要求の変化に合わせて各層を個
    別に置換できる.

    - [[http://ja.wikipedia.org/wiki/%E5%A4%9A%E5%B1%A4%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3][多層アーキテクチャ - Wikipedia]]

    分割が必要な大規模なシステムが前提. 小規模システムではいらない.

    - [[http://www.hakkaku.net/articles/20080630-227][八角研究所 : POSA 本でアーキテクチャパターンを勉強しよう Layers]]

    失敗談) Windows の Desktop Application を MVC でつくってやたらと時間が
    かかってしまった.

**** 特徴
     - 隣接しないレイヤへのアクセスを禁止
     - 片方向のアクセスを許可.

**** メリット
     1. 変更が局所化されるため保守性が向上する,
     2. 抽象度の低い下位レイヤは, さまざまなシステムで再利用できる可能性がある
     3. レイヤ間のやり取りが標準化されている場合, レイヤを交換することが容易になる

*** Pipes and Filters
*** lackboard
** 分散システム
   分散システムを開発する上で有効なパターン.

*** Broker
** 対話型システム
   人とコンピュータの対話 (クライアントとシステムの対話) を提供するシ
   ステムで有効なパターン

*** Model-View-Controller
    - [[http://kray.jp/blog/think_about_mvc/#][MVC について考える | KRAY Inc]]

*** Presentation-Abstraction-Control
** 適合型システム
   環境の変化や機能要求の変化による中核機能への影響を抑えるために有効
   なパターン.

*** Microkernel
*** Reflection
** Links
   - [[http://d.hatena.ne.jp/asakichy/20090602/1243900715][POSA のアーキテクチャパターン - Strategic Choice]]
     
   ここにある図がよい.
   - [[http://thinkit.co.jp/article/940/1][第 2 回 アーキテクチャーパターンとは何か | Think IT]]

* POSA-2  
  Schmidt 先生, 渾身の著作!

  なぞの PDF 群.
  - [[http://www.dre.vanderbilt.edu/~schmidt/PDF/][Index of /~schmidt/PDF]]
  
  とても参考になるリンク. POSA2.
  [[http://www.dre.vanderbilt.edu/~schmidt/POSA/POSA2/][Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects]]

  平行性に関するパターン. Wikipedia よりもってきた.

** Active Object (Actor) 
   メソッドの呼び出しとメソッドの実際の実行を分離することで並行性を導入する.
   各オブジェクトは利用者からの要求を管理するためのメッセージキューとスケジューラを持つ.

** Balking 
   前提条件が満たされていない場合は, (その時点での) 処理の実行をあきらめる.

** Double-checked locking 
   ロックの取得におけるオーバヘッドを削減するための技法.
   まずをスレッドセーフでない方法で「ロックヒント」を調べて, それが成功したら実際のロックを試みる.

** Future 
   「処理が完了しているかどうか分からない処理結果」を表すオブジェクトを作成することで同期を実現する.
   処理が完了していないうちに結果を取得しようとした場合は処理が完了するまでロックされる.

** Guarded suspension
   前提条件が満たされるまで待機するための機構.

** Lock 
   リソースに対して 1 つのスレッドが「ロック」をかけて,
   そのあいだ他のスレッドがそのリソースにアクセスしたり変更を加えたりできないようにする.

  - [[http://www.castle-cadenza.demon.co.uk/lock.htm][Lock Design Pattern]]

** Monitor 
   排他的に実行しなければならないメソッド群を持つオブジェクトを
   スレッドセーフに利用できるようにするための機構.
   Java はこれを言語レベルでサポートしている.

   - [[http://docs.oracle.com/javase/jp/6/api/javax/management/monitor/package-summary.html][javax.management.monitor (Java Platform SE 6)]]
   - [[http://en.wikipedia.org/wiki/Monitor_(synchronization)][Monitor (synchronization) - Wikipedia, the free encyclopedia]]

** Producer-consumer
   「生産者」 (producer) スレッド群がデータを生成して「通信路」に追加し,
   「消費者」 (consumer) スレッド群がそのデータを「通信路」から取り出して処理するという構造.

   必要な同期はすべて「通信路」によって行なわれるため,
   生産者と消費者のルーチンは同期を意識せずに実装できる.
   この通信路は同期キューなどで実現される (一部の言語はこれを標準ライブラリで提供している).

- [[http://omiya6048.hatenablog.com/entry/2013/05/29/145253][Java で Producer-Consumer パターンを実践! - omiya6048's blog]]
- [[http://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem][Producer – consumer problem - Wikipedia, the free encyclopedia]]

** Reactor
   同期的に扱わなければならないリソース群に対する非同期的インタフェースを提供する.
   
** Readers-writer lock
   書き込みは排他アクセスが必要だが読み込みは
   並行に行えるようにしたい場合のためのロック機構.
   
   排他制御が必要な共有リソースのために導入する.
   
** Scheduler 
   シングルスレッドで実行される処理 (例えばファイルへの書き込み) の実行を各スレッドに許可するタイミングを明確に制御する.

** Thread pool
   多数のスレッドを作成してそれらに多数のタスクを処理させる.
   典型的な状況ではスレッド数よりもかなり多くのタスクが存在し,
   各スレッドは, あるタスクの処理が終わると次の処理待ちタスクの実行に取りかかる.
   一般に, Producer-consumer パターンを使って実現される.

** Thread-specific storage 
   静的変数・グローバル変数のように扱えるが
   スレッドごとに異なる内容を格納できるメモリ領域を提供する.

** Two-phase termination 
   スレッドを安全に終了させる方法.
   スレッドは, 終了要求を表すフラグを定期的に確認して, それがセットされたら終了処理を行う.


* POSA-3
* POSA-4
* POSA-5
   
* Network Architecture Patterns
  Working with TCP Sockets から.

** Serial
** Process per connection
** Thread per connection
** Preforking
** Thread Pool
** Evented (Reactor)
** Hybrids

