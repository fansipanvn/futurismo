#+OPTIONS: toc:nil
* Web
  World Wide Web.インターネット上で提供されるハイパーテキストシステム.

  - [[http://ja.wikipedia.org/wiki/World_Wide_Web][World Wide Web - Wikipedia]]

** Web の歴史
   - Web1.0 ・・・クライアントは静的ページを Web サーバから取得する. ウェブページ. ウェブを読む.
   - Web2.0 ・・・クライアント/ サーバ側で動的にページを作成する. ウェブサービス. ウェブを使う.
   - Web3.0 ・・・クライアントごとがつながりあう. データの上のメタデータをあつかう.
   - クラウドコンピューティング ・・・あらゆるデバイスがネットにつながる.
   - セマンティックウェブ ・・・ビックデータの統計解析から価値を生み出す.

     [[http://dmtc.jp/magazine/?p=1461][迫り来る Web3.0 時代を生き抜くエンジニアが持たなければいけない 3 つの視点 | DMTC Magazine]]

* HTTP Protocols
  HTTP は, Hypertext Transfer Protocol の略.

  - [[http://ja.wikipedia.org/wiki/Hypertext_Transfer_Protocol][Hypertext Transfer Protocol - Wikipedia]]  

  Web ブラウザと Web サーバの間で, 
  HTML などのコンテンツの送受信に用いられる通信プロトコル.

** HTTP request methods
** HTTP Status Code
   HTTP ステータスコード.[[http://ja.wikipedia.org/wiki/HTTP%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89][HTTP ステータスコード - Wikipedia]]

   |-----+---------------+--------------------|
   | 1xx | Informational | 情報               |
   | 2xx | Success       | 成功               |
   | 3xx | Redirection   | リダイレクション   |
   | 4xx | Client Error  | クライアントエラー |
   | 5xx | Server Error  | サーバエラー       |
   |-----+---------------+--------------------|

** Mine Type
   規格上 US-ASCII のテキストしか使用できないインターネットの電子メールで
   さまざまなフォーマット (書式) を扱えるようにする規格.マイム.
   
   [[http://ja.wikipedia.org/wiki/Multipurpose_Internet_Mail_Extensions][- Multipurpose Internet Mail Extensions - Wikipedia]]
   
** Cookies
   HTTP におけるウェブサーバとウェブブラウザ間で状態を管理するプロトコル, 
   またそこで用いられるウェブブラウザに保存された情報のことを指す. 
   ユーザ識別やセッション管理を実現する目的などに利用される.

   - [[http://ja.wikipedia.org/wiki/HTTP_cookie][HTTP cookie - Wikipedia]]

** HTTP Push

   - [[http://ja.wikipedia.org/wiki/Push%E6%8A%80%E8%A1%93][Push 技術 - Wikipedia]]
   - [[http://ja.wikipedia.org/wiki/%E5%87%BA%E7%89%88-%E8%B3%BC%E8%AA%AD%E5%9E%8B%E3%83%A2%E3%83%87%E3%83%AB][出版-購読型モデル - Wikipedia]]

*** HTTP Polling
    クライアントがサーバへ定期的にメッセージを送信する.

    クライアントは, サーバの状態をしらない.

* Web Application
  インターネット (もしくはイントラネット) などのネットワークを介して使
  用するアプリケーションソフトウェア.(cf. Desktop Application, Mobile
  Application)

   - [[http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3][ウェブアプリケーション - Wikipedia]]

* Web Archtectures
   #+begin_src language
   Web Client
       |
   (NetWork)
       |
   Web Server
       |
   Script/Service
       |
   (Connector)
       |
    DataBase
   #+end_src

 - [[http://ja.wikipedia.org/wiki/Model_View_Controller][Model View Controller - Wikipedia]]
** プロトコル

  - HTTP, HTTPS (Request, Responce) http://ja.wikipedia.org/wiki/Hypertext_Transfer_Protocol
  - REST-based, Restful, http://ja.wikipedia.org/wiki/REST
  - RPC-based, SOAP [[http://ja.wikipedia.org/wiki/SOAP_(%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB)][SOAP (プロトコル) - Wikipedia]]

** Presentation Layer
   プレゼンテーション層.ユーザインタフェースとコントローラを提供.
   クラス名は Controller, Action.

*** Presentation
    Presentation Layer の構成要素は以下.

    - HTML (構造)
    - CSS (表現)
    - JavaScript (動作)

    これらは絶対に, 絶対に, 絶対に, 分けなければいけないと強調される.

*** Controller
    画面遷移や画面でボタンが押されたときの動作制御やセッション管理など.

** Middle-ware Layer
   ビジネスロジック層ともいう

    これらの定義は, Spring3 から引用:
    http://gihyo.jp/book/2012/978-4-7741-5380-3?ard=1407982106

*** トランザクション
    分けることのできない一連の情報処理の単位.

    - [[http://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3][トランザクション - Wikipedia]]

    データベースにおいては, データに対する一つの論理的操作の事.

**** ACID 特性
     信頼性のあるトランザクションシステムの持つべき性質.
     - [[http://ja.wikipedia.org/wiki/ACID_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E7%A7%91%E5%AD%A6)][ACID (コンピュータ科学) - Wikipedia]]

**** トランザクション境界
     プレゼンテーション層とトランザクション層の境界.

     簡単に言うと,
     - (開始) xxx Controller から xxxService のメソッド呼び出し.
     - (終了) xxxService のメソッドの return.

*** ビジネスロジックの分類
    クラスの末尾に Service のついた名前や,対象となるオブジェクト名
    (Employee, Order) がつく.

**** Service
     ユースケースに表されるような特定業務や特定部署の処理のまとまりをコ
     ントロールする.トランザクションの起点.一般的にはステートレス.

**** Domain
     サービスから起動される, ビジネスを行う上で当然認識される顧客や注文
     といったサービスの集まり. 自分自身がなにものかを示す値と, その値を
     利用した処理を実現する.

*** ビジネスロジック・パターン
    - トランザクションスクリプトとは「アクションより起動される一連の手続き」
    - ドメインモデルとは「ドメイン内の名詞によって体系化されたモデル」

    [[http://d.hatena.ne.jp/higayasuo/20080519/1211183826][いまさらきけない「ドメインモデル」と「トランザクションスクリプト」]]

**** トランザクションスクリプト
     - ユースケースごとに Service クラスをつくっていく.
     - 手続き処理で記述.処理ごとドメインを呼び出していくだけなので, オ
       ブジェクト指向ぽくない.
     - 小規模開発向け. とても簡単で分かりやすい.
     
**** ドメインモデル
     - 大規模開発向け. とても簡単で分かりやすい.
     - ドメインにロジックを持たせる. (OOP 設計!)

** Database Layer
   データペースレイヤ. データアクセスレイヤとも.

   データベースへのアクセスを抽象化する.クラス名の末尾に DAO (Data
   Access Object) がつく.

*** DB Layer 役割 
    - RDB へのアクセスをビジネスロジック層から隠蔽
    - 必要なデータを RDB から取得してオブジェクト (domain) にマッピン
      グ.

**** O/R マッピング
     Object と Relational DB の対応づけ.
     基本的に, DD テーブルの 1 レコードが 1 オブジェクトに対応.

*** Relational Database
    リレーショナルデータベース. デファクトスタンダードな Db 設計.RDB

    - [[http://ja.wikipedia.org/wiki/%E9%96%A2%E4%BF%82%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9][関係データベース - Wikipedia]]

*** The Active Record Design Pattern

** REST
   Restful,Representational State Transfer.分散ハイパーメディアシステ
   ムのためのソフトウェアアーキテクチャのスタイルのひとつ.

   - http://ja.wikipedia.org/wiki/REST
   
   2 つの意味で使われている.

   - Fielding の REST アーキテクチャスタイルの原則に合わせた Web サービスシステム.
   - RPC スタイルに合わせた簡易な XML+HTTP インターフェイスを採用したシステム (SOAP は使わない) .

*** Fielding の REST 原則
    Fielding の REST 原則に従うシステムは, しばしば RESTful といわれる.

    1. セッションなどの状態管理を行わない (やり取りされる情報はそれ自体で完結して解釈することができる) 」
       (Web システムでは, HTTP 自体にはセッション管理の機構はない)
    2. 情報を操作する命令の体系が予め定義・共有されている」 (Web システムでは HTTP の GET や POST などに相当), 
    3. すべての情報は汎用的な構文で一意に識別される」 (URL や URI に相当), 
    4. 情報の内部に, 別の情報や (その情報の別の) 状態へのリンクを含めることができる
       (ハイパーメディア的な書式で情報を表現する) 」 (HTML や XML に相当)

    http://e-words.jp/w/REST.html

** Publisher-Subscriber Model
   非同期メッセージングパラダイム.

   出版側と購読側の結合度が低いため, 
   スケーラビリティがよく, 動的なネットワーク構成に対応可能.

   - [[http://ja.wikipedia.org/wiki/%E5%87%BA%E7%89%88-%E8%B3%BC%E8%AA%AD%E5%9E%8B%E3%83%A2%E3%83%87%E3%83%AB][出版-購読型モデル - Wikipedia]]


* Server Load Balance
  サーバロードバランスは, クライアント/ サーバネットワークにおいて, 
  クライアントとサーバの間にロードバランサー (負荷分散装置) を設置し, 
  通信アプリケーションの (TCP/UDP) ポート番号をもとに, 
  2 台~256 台 のサーバが分散処理を行う, コンピュータシステム.

 - [[http://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%AD%E3%83%BC%E3%83%89%E3%83%90%E3%83%A9%E3%83%B3%E3%82%B9][サーバロードバランス - Wikipedia]]

 外部のネットワークから見て, ロードバランサは仮想的な 1 台のサーバに見える.
 つまり, IP アドレスやポート番号は, 
 背後にあるサーバ群の代表としてロードバランサのものだけが見える.

** Load Balancing
   コンピュータネットワークにおける技法の一種であり, 
   作業負荷を多数のコンピュータ/ プロセス/ その他のリソースに分散し,
   リソースの利用効率を高め性能を向上させる手法.
* Web サービスの分類

  - [[http://www.kobelcosys.co.jp/column/itwords/26/][クラウド上で発展する様々なサービス「 SaaS ・ PaaS ・ IaaS 」|コベルコシステム]]

** PaaS
   Platform as a Service
   ソフトウェアを構築および稼動させるための土台となるプラットフォームを, 
   インターネット経由のサービスとして提供する.

   -  [[http://ja.wikipedia.org/wiki/Platform_as_a_Service][Platform as a Service - Wikipedia]]

   アプリケーションソフトが稼動するためのハードウェアや OS などの基盤 (プ
   ラットフォーム) 一式を, インターネット上のサービスとして遠隔から利用
   できるようにしたもの.

   - [[http://e-words.jp/w/PaaS.html][PaaS とは 【 Platform as a Service 】 - IT 用語辞典]]

*** Examples
    
** IaaS
   Infrastrucure as a Service.

   仮想化技術を利用して CPU, ストレージ, OS, ミドルウェアなど, 
   システムを構成するためのインフラをインターネット経由で提供するサービス.

   - プロバイダーは基板となるストレージ, ネットワーク, コンピューティングリソースを管理し, 提供します.
   - OS や FireWall のようなネットワーク制御コンポーネントなどのアプリケーションをデプロイ, 
     実行, コントロールすることが可能です.

   VM 上でサービスを提供する.

*** Examples
    
** SaaS 
   Software as a Service

* Books
  - [[http://www.amazon.co.jp/%E3%80%8C%E3%83%97%E3%83%AD%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AEWeb%E6%8A%80%E8%A1%93%E5%85%A5%E9%96%80%E3%80%8D-%E2%80%95%E2%80%95%E3%81%AA%E3%81%9C%E3%80%81%E3%81%82%E3%81%AA%E3%81%9F%E3%81%AFWeb%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E9%96%8B%E7%99%BA%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B-%E5%B0%8F%E6%A3%AE-%E8%A3%95%E4%BB%8B/dp/4774142352%3FSubscriptionId%3DAKIAJDINZW45GEGLXQQQ%26tag%3Dsleephacker-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774142352][Amazon.co.jp: 「プロになるための Web 技術入門」: 小森 裕介]]

* Links
  - [[http://futurismo.biz/archives/2414][Web Application Archtectures を受講しました | Futurismo]]
