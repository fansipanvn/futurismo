#+OPTIONS: toc:nil
* Networking
* セッション
コンピューター間でデータをやり取りするために設ける論理的な接続関係.

  - [[http://www.fwoabw.info/entry/20120129/1327789678][「セッション」とは. 色んな セッションの意味まとめ - For Want Of A Better Word]]

** http (web ページ操作) でのセッション
   複数の Web ページにまたがって行われる一連の処理・操作.
   1 回 WEB ページにアクセスして, 複数のページを閲覧したりすると, 1 セッ
   ションで何ページ見た.

** WEB アプリ・プログラムにおけるセッション
   セッションは, シンプルな方法で個々のユーザーのデータを格納する仕組みで,
   個々のユーザーに対して一意なセッション ID を用意します. これを用いて,
   複数ページにまたがるリクエストの間で状態の情報を永続させることができます.

* ソケットプログラミング
** Socket
   - 実行中のプログラム間でデータの送受信を行うための
     標準的なプログラミングインターフェース (API) の一つ.
   - TCP/IP アプリケーションを作成するための抽象化されたインターフェース
   - [[http://ja.wikipedia.org/wiki/%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88_(BSD)][ソケット (BSD) - Wikipedia]]

** EndPoints
   端末.一意に定まる通信先.

   Socket は IP Address と PortNo.をつかって, 通信先のソケットを特定す
   る. ネットワークに接続されたパソコンや PDA, 携帯電話などのネットワーク
   端末の総称.

   - [[http://www.sophia-it.com/content/%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88][エンドポイントとは (end point): - IT 用語辞典バイナリ]]

   エンドボイントに Socket がバインドされる.

** Loopbacks
   IP アドレスは必ずしもリモートホストと関連付けられている必要はない.
   得に開発環境では, ローカルな IP アドレスが役に立つ.

   自端末に対して通信することを LoopBack という.
   LoopBack で指定するアドレスを Loopback Address という.

   - ハードウェアと関係ない, 論理的なインタフェース.
   - Linux では, localhost と言われている. IP は 127.0.0.1

   [[http://e-words.jp/w/E383ABE383BCE38397E38390E38383E382AF.html][ループバックとは 〔 ローカルループバック 〕]]

** Ports
*** PortFowarding
    ポートフォワーディング.
    ローカルコンピュータの特定のポートに送られてきたデータを,
    別に用意した通信経路を用いてリモートコンピュータの特定ポートに送信すること.

    - [[http://e-words.jp/w/E3839DE383BCE38388E38395E382A9E383AFE383BCE38387E382A3E383B3E382B0.html][ポートフォワーディングとは 【 port forwarding 】]]

    たとえば, Windows ファイルサーバに, 
    SSH 経由で (CIFS, port 445/tcp で) アクセスする (した)

    - [[http://akasaka-taro.blogspot.jp/2011/12/cifs-over-ssh-windows7-ssh.html][赤坂タロウの日記: CIFS over SSH, Windows7 ssh 経由でファイル共有
      アクセス]]

** Stream
   データの入力または出力の機能を提供する抽象データ型.
   メッセージの境界という境界がない.

   TCP/IP プロトコルはストリームベースの設計.
   - [[http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)][ストリーム (プログラミング) - Wikipedia]]
** Buffering
** Blocking/Non-Blocking
*** ブロッキング
    送受信の完了を待ってから他の処理を開始する通信方法.

#+begin_src ruby
require 'socket'
server = TCPServer.new (2803)
while client = server.accept
  input = client.readline
  client.write "You said: #{input}"
  client.close
end
#+end_src

*** ノン・ブロッキング
    データの送受信を行う際に, 送受信の完了を待たず, 他の処理を開始する通信方法.
     - [[http://e-words.jp/w/E3838EE383B3E38396E383ADE38383E382ADE383B3E382B0E9809AE4BFA1.html][ノンブロッキング通信とは 〔 ノンブロッキングモード 〕]]

#+begin_src ruby
require 'socket'
server = TCPServer.new (2803)
loop do
  Thread.new (server.accept){ |client|
    input = client.readline
    client.write "You said: #{input}"
    client.close
  }
end
#+end_src

** Example Ruby
*** Server Lifecycle
   1. create 
      ソケットの生成
   2. bind 
      - ソケットを利用する Port にバインド.
        + User でバインドする Port は 1025-48999
      - ソケットが通信を許可する IP を指定.
	+ 0.0.0.0: すべて許可
	+ 127.0.0.1: 自端末のみ許可
	+ xxx.xxx.xxx.xxx: ある端末のみ許可
   3. listen 
      通信先ソケットからの通信をまつ
   4. accept 
      通信先ソケットからの通信を受け取り, 通信路 をそのつど生成 (connection)
   5. close
      通信元ソケットの消滅.

#+begin_src ruby
# coding: utf-8
require 'socket'

# 1. create
server = Socket.new (:INET, :STREAM)

# 2. bind
addr = Socket.pack_sockaddr_in (4481, "0.0.0.0")
server.bind (addr)

# 3. listen 
server.listen (5)

# 4. accept
loop do
  connection, _ = server.accept

  ## send message from client.
  # ehco "Hello" | nc localhost 4481
  p connection

  # it should be closed each connection
  connection.close
end

# 5. close
server.close
#+end_src

**** TCPServer 
    Ruby では, 以下のような糖衣構文がある.

    - [[http://docs.ruby-lang.org/ja/2.0.0/class/TCPServer.html][class TCPServer]]

#+begin_src ruby
server = TCPServer.new (4481)
# => 
# server = Socket.new (:INET, :STREAM)
# addr = Socket.pack_sockaddr_in (4481, "0.0.0.0")
# server.bind (addr)
# server.listen (5)
#+end_src

*** Client LifeCycle
   1. create
      ソケットの生成     
   (2. bind ) 
   3. connect 
      サーバと接続
   4. close
      ソケットの破棄

   #+begin_src ruby
require 'socket'

# 1. create
socket = Socket.new (:INET, :STREAM)

# 3. connect
remote_addr = Socket.pack_sockaddr_in (80, 'google.com')
socket.connect (remote_addr)

# 4. close
socket.close
   #+end_src

**** TCPSocket
    Ruby では, 以下のような糖衣構文がある.

    - [[http://docs.ruby-lang.org/ja/1.8.7/class/TCPSocket.html][class TCPSocket]]

    #+begin_src ruby
socket = TCPSocket.new ('google.com', 80)
# =>
# socket = Socket.new (:INET, :STREAM)
# remote_addr = Socket.pack_sockaddr_in (80, 'google.com')
# socket.connect (remote_addr)
    #+end_src

*** Simple Read
    以下の例では, 永遠にサーバは Read を待ち続けて, その先が進まない.

    #+begin_src ruby
require 'socket'

Socket.tcp_server_loop (4481) do |connection|
  puts connection.read
  connection.close
end
    #+end_src

    Socket は指定されたデータ長のデータが到着するまで待ち続ける.
    デッドロックを回避するためには,

    - Client 側で データの最後で EOF を送信する.(EOF event)
    - Server 側で一度に読み込むデータ長を小さくする. (partial read)
      
    Client のソケットが close メソッドを実行すると, その延長で EOF が通知
    される.

* SDN
Software Defined Networking.

** 定義
- 広義:「従来システムのネットワーク要素を抽象化し分割する, コンピュータ ネットワークを構築するアプローチ」 (wiki より)
- 狭義:「 (広義のアプローチを具体化するために) ネットワーク機器のコントロール プレーン, データ プレーンを分離し, 集中化されたソフトウェアからコントロールして, もっと効率的なこと, 便利なことをする!! 」

A new networking paradigm whereby the behavior of a network is controlled 
by a single high-level software program.  
The general term for network architectures whereby the control 
plane (software that controls network behavior) and the 
data plane (the devices that forward traffic) are separate from one another.

SDN allows network administrators to manage network services 
through abstraction of lower level functionality.

[[http://en.wikipedia.org/wiki/Software-defined_networking][Software-defined networking - Wikipedia, the free encyclopedia]]

コントロールプレーンとフォワーディングプレーンを分離し, ネットワークにプログラマビリティを持たせる

[[http://forums.juniper.net/t5/%E3%83%96%E3%83%AD%E3%82%B0/SDN%E6%99%82%E4%BB%A3%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%BB%E3%83%B3%E3%82%BF%E3%83%BC-%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3-Forwarding-Plane-%E5%89%8D%E7%B7%A8/ba-p/204427][SDN 時代のデータセンター・アーキテクチャ/Forwarding Plane J-Net Community]]


ネットワーク全体で一つの OS として見え,
ソフトウェアから見れば個々のネットワーク機器が隠ぺいされています.
こうすることで, ソフトウェアを開発さえすれば
自由にネットワークを制御することが可能になります.

[[http://thinkit.co.jp/story/2012/02/02/3151][SDN への潮流と OpenFlow の歴史 | Think IT (シンクイット)]]

** SDN の歴史と基盤技術
*** Active networks
    A collection of network architecture projects in the 1990s that shared
    many of the same goals as software-defined networking.

*** Network virtualization
    ネットワーク仮想化. 物理ネットワーク上に複数の論理ネットワークを構築すること.

    The notion of instantiating many distinct logical networks 
    on top of a single, shared physical network infrastructure.

    [[http://ascii.jp/elem/000/000/793/793504/][ASCII.jp:なぜ SDN は生まれたのか? ネットワーク仮想化との関係は? (1/2)|Q&A 形式で学ぶ OpenFlow/SDN]]

   「ネットワーク仮想化」とも呼ばれ, 厳密には SDN の応用の一つであり,
   また, SDN によらず別の技術によって実現する手法もあるため,
   ネットワーク仮想化と SDN そのものとは区別する必要がある.

   [[http://e-words.jp/w/SDN.html][SDN とは 【 Software-Defined Networking 】 - 意味/ 解説/ 説明/ 定義 : IT 用語辞典]]

** 構成要素
*** Control Plane
    The functions in the network that control the behavior of the network 
    (e.g., network paths, forwarding behavior).  
    Typically, the control plane is instantiated as a single, high-level
    software controller.

*** Data Plane
フォワーディング・プレーン, Forwarding plane ともいう.

[[http://en.wikipedia.org/wiki/Forwarding_plane][Forwarding plane - Wikipedia, the free encyclopedia]]

The functions in the network that are responsible for forwarding
(or not forwarding) traffic.  Typically, the data plane is
instantiated as forwarding tables in routers, switches, firewalls
, and middleboxes.

Data plane design goals. 技術革新に素早く対応できること.
    - Flexible (柔軟性)
    - Extensible (拡張性)
    - Clean interfaces (整理されたインタフェース)
      
**** Programmable Hardware
     標準化された, プログラミング可能なハードウェア.
     もうすぐ, 高級言語での記述もできるようになるはず.

     - FPGA
     - Click

**** Flow の構成要素
     - ヘッダフィールド (マッチングルール)
     - アクション
       - Forwarding
       - Enqueue
       - Drop
     - 統計情報

     [[http://thinkit.co.jp/story/2012/02/09/3209][OpenFlow のアーキテクチャと仕様・機能 | Think IT (シンクイット)]]

*** NorthBound API
    Programming interface that allows applications and norchestration systems to 
    program the network .Uses for Northbound API ,

- Path computation 
- Loop avoidance 
- Routing 
- Security

  Northbound API は, アプリケーションから SDN コントローラを制御できる API だ.
  
    - [[http://www.publickey1.jp/blog/12/sdnopenflownorthbound_api.html][SDN/OpenFlow の新しい課題:Northbound API とは何か? - Publickey]]
    - [[http://www.publickey1.jp/blog/12/northdound_apisoftware-defined_network.html][Northdound API は, Software-Defined Network にとって重大な欠落だ - Publickey]]

Northbound API can help,

- Sophisticated events 
- Composition of policies 
- Event handling

*** SouthBound API
Control Plane と Data Plane をつなぐ API.

** SDN のアーキテクチャ
#+begin_src language
                           ---
   Controller Applications  |
   ======================   |
      NorthBound API        | Control Plane
   ======================   |  
     Controller Platform   ---
   ======================   |  
      SouthBound API        | Data Plane
   ======================   |
     OpenFlow Switches      |  
                           ---
#+end_src

** Composition
シーケンシャルな制御方法とパラレルな制御方法.

- Sequential composition :Perform one operation, then the next.
- Parallel composition :Perform both operations simultaneously.

** Event-Driven SDN
   ネットワーク構成のほとんどは, イベント駆動の処理.
   ネットワークのポリシーを Event-Based で表現という考えが
   Event-Based Network Control.
   
    - Event Plane
      - user
      - time
      - history
    - Dinamic Event Handler
      -> State Transition signal to Control Plane.
    - Control Plane
      -> finite state machine で制御される.
      - State
	ドメインの状態 (value) の集合.
      - Events
	ステートマシンにしたがって状態遷移を発生させるトリガ
    - Data Plane

** 他の用語との違いについて整理
*** OpenFlow
    Software-Defined Network (SDN) は, コンセプト, アーキテクチャ.
    それを実現する技術の一つが OpenFlow.
    
*** OpenStack
    OpenStack はクラウドを OSS で管理するためのソフトウェア群の総称.
    OpenStack のネットワーク仮想化にあたる部分が SDN の思想と重なる.

* OpenFlow
  OpenFlow は, スタンフォード大学が中心となっている
  「 OpenFlow スイッチングコンソーシアム」が提唱するネットワーク制御技術.

  SDN を実現するための代表的なフレームワーク.

  - [[http://ascii.jp/elem/000/000/794/794744/][ASCII.jp:SDN を牽引する OpenFlow とは? 業界へのインパクトは?]]
  - [[http://e-words.jp/w/OpenFlow.html][OpenFlow とは 〔 オープンフロー 〕 - 意味/ 解説/ 説明/ 定義 : IT 用語辞典]]
  - [[http://www.publickey1.jp/blog/13/openflowsdnopenflowsdn_japan_2013.html][OpenFlow/SDN はなぜ誕生したのか, OpenFlow 以前にあった問題とは. 生みの親カサド氏が壇上で語る. SDN Japan 2013 - Publickey]]
    
* WAN
** WAN 高速化
   TCP のスループットは, 以下で決まる.
   - データを送受信する際のバッファ容量「ウィンドウサイズ」
   - パケットが通信ホストの間を往復する時間「ラウンドトリップタイム (RTT) 

#+begin_src language
TCP スループット=ウィンドウサイズ÷ RTT
#+end_src

  ウィンドウサイズが大きければ一度に多くのパケットを送れることになるが,
  Windows 2000/XP でのウィンドウサイズはデフォルトで 16KB (最大 64KB) になっている. 
  もちろん遅延時間の RTT を短縮すれば, スループットは向上するが, 
  海外拠点を結ぶ WAN などの場合には, 距離による遅延の問題も大きく, 
  スループットの向上にも限界がある

  - 引用元: [[http://www.itmedia.co.jp/enterprise/articles/0706/01/news006_2.html][最適化から始まる, WAN 高速化への道:1MB のファイルアクセスに 10 分--WAN の体感速度が改善しないのはなぜ? (2/3) - ITmedia エンタープライズ]]

** 高速化装置
  通信のレスポンスを決める要素は大きく 3 つ.
   - 遅延
   - 1 回のやり取りで送信するデータ量であるウインドウ・サイズ
   - アプリケーションのバースト転送性

   遅延の影響を受けやすいアプリケーションが存在する.
   その代表格は, 米マイクロソフトのファイル共有プロトコルの CIFS や,
   データベースに使われる Microsoft SQL などのアクセス.
   - [[http://itpro.nikkeibp.co.jp/article/COLUMN/20070606/273782/][ネット設計を激変させる WAN 高速化装置]]

** 高速化技術
   - [[http://www.cisco.com/web/JP/news/cisco_news_letter/tech/waas2/index.html][WAN 高速化 - テクノロジー解説 - Cisco Systems]]

*** キャッシュ
    使用頻度の高いデータを高速読み出し可能な記憶装置に蓄積しておく仕組み.

*** プロトコル・アクセラレーション
    プロトコル・アクセラレーションの特徴は, 代理応答という仕組み.

    - 各社の WAN 高速化装置が登場した当初は, 
      ユーザーが多いこともあって CIFS が主要な高速化対象だった.
    - MAPI, NFS も対応してきている.
    - 利用頻度の高さから HTTP (hypertext transfer protocol) に対応する製品も増えてきた.

**** 代理応答
    サーバーがデータ転送を始めると, 
    サーバー側の WAN 高速化装置がクライアントの代わりに Ack を返す
     
    [[http://itpro.nikkeibp.co.jp/article/COLUMN/20070606/273783/?ST=neteng][WAN 高速化装置の高速化テクノロジ--キャッシュとプロトコル・アクセラレーション]]

*** 専用プロトコル
    SMB ブロックサイズが小さいためにスループットが上がらないことに対しては, 
    WAN 高速化装置間でファイル共有プロトコルを使用しないことで対応している.

    シスコが WAN 上で使用するポート番号は TCP4050 であり, リバーベッドは TCP7800 となる.

    - 引用元: [[http://www.itmedia.co.jp/enterprise/articles/0706/12/news004_2.html][最適化から始まる, WAN 高速化への道:「アプリケーションが遅い」をなくす仕組み (2) (2/3) - ITmedia エンタープライズ]]

** Links
   CIFS に関する WAN Accerelation
   -
     http://www.snia.org/sites/default/files2/sdc_archives/2009_presentations/monday/MarkRabinovich-IgorGokhman-CIFS_Acceleration_Techniques.pdf

*** WAN 高速化への道
   - [[http://www.itmedia.co.jp/enterprise/special/0706/wanoptimize/][ITmedia エンタープライズ:最適化から始まる, WAN 高速化への道--帯域の最大活用でワークスタイルを変革する]]
     - [[http://www.itmedia.co.jp/enterprise/articles/0706/12/news004.html][最適化から始まる, WAN 高速化への道:「アプリケーションが遅い」をなくす仕組み (2) (1/3) - ITmedia エンタープライズ]]
     - [[http://www.itmedia.co.jp/enterprise/articles/0706/01/news006.html][最適化から始まる, WAN 高速化への道:1MB のファイルアクセスに 10 分--WAN の体感速度が改善しないのはなぜ? (1/3) - ITmedia エンタープライズ]]

* TCP
  TCP は, 信頼性のある双方向のストリーム型通信を実現するロトコル.

  - [[http://ja.wikipedia.org/wiki/Transmission_Control_Protocol][Transmission Control Protocol - Wikipedia]]
  - [[http://www.atmarkit.co.jp/ait/articles/0312/25/news001.html][基礎から学ぶ Windows ネットワーク:第 14 回  信頼性のある通信を実現する TCP プロトコル (その 1) (1/3) - ＠ IT]]

** TCP の役割
   TCP の主な役割は以下.
   - 終点を見つける
   - 信頼性を確保する

** TCP の機能
   実現するための機能は以下.

   - バイトストリームコネクション
   - マルチプレクシング (多重化)
   - 信頼性の確保
     - ACK 応答
     - 再送制御
     - 順序制御 (シーケンス番号)
     - ウィンドウ方式
   - フロー制御
     - ウィンドウ制御

*** Port 
    同一コンピュータ上で動作する複数のアプリケーションを区別するための番号.

** TCP ヘッダ
   - [[http://www.atmarkit.co.jp/ait/articles/0401/29/news080_2.html][基礎から学ぶ Windows ネットワーク:第 15 回  信頼性のある通信を実現する TCP プロトコル (2) (2/3) - ＠ IT]]

*** TCP オプション
    TCP 接続の送信側が受信側に対して提示するパラメータ.
    - [[http://www.atmarkit.co.jp/ait/articles/0402/13/news096_2.html][基礎から学ぶ Windows ネットワーク:第 16 回  信頼性のある通信を実現する TCP プロトコル (3) (2/4) - ＠ IT]]

** TCP コネクション
*** 3-way ハンドシェイク
    TCP 接続オープン時の手続き.

    - [[http://www.7key.jp/nw/tcpip/tcp/connection.html#threeway][コネクションとは -- Key:雑学事典]]
    - [[http://www.atmarkit.co.jp/ait/articles/0401/29/news080_3.html][基礎から学ぶ Windows ネットワーク:第 15 回  信頼性のある通信を実現する TCP プロトコル (2) (3/3) - ＠ IT]]

*** ACK
    確認応答. Acknowledge.

** ネットワーク特性
   ネットワークの特性を表す代表的な数値は以下.
  
   - 帯域幅 (bandwidth)
   - 遅延時間 (latency/RTT)
   - スループット

*** 帯域幅 (bandwidth)
    一定時間に通過できるデータ量.

**** Windows パフォーマンスモニタでの計測.
     Windows 標準でついているツール.
     - [[http://www.atmarkit.co.jp/ait/articles/0910/30/news114.html][Windows TIPS:パフォーマンス・モニタの使い方 (基本編) - ＠ IT]]
     - [[http://www.atmarkit.co.jp/ait/articles/0105/19/news004.html][基礎から学ぶネットワーク構築 (6):Windows 標準ツールを使ったトラフィック計測 - ＠ IT]]
     - [[http://www.osadasoft.com/windows-xp%E3%81%A7%E3%80%81%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E6%96%B9%E6%B3%95/][OsadaSoft » ネットワークスピードを調べる方法]]

**** BitMeter OS での計測.
     Web 上で結果が見られる.
     - [[http://codebox.org.uk/pages/bitmeteros][Codebox Software - BitMeter OS]]
     - [[http://www.moongift.jp/2011/10/20111012/][どれだけネットワーク帯域を消費しているか測定してみよう· BitMeter OS MOONGIFT]]

*** 遅延時間 (latency)
    デバイスに対してデータ転送などを要求してから, 
    その結果が返送されるまでの遅延時間のこと.
    - [[http://ja.wikipedia.org/wiki/%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7][レイテンシ - Wikipedia]]

    インターネットにおける往復レイテンシについては
    ラウンドトリップタイム (Round Trip Time, RTT) とも呼ばれる.
    - [[http://d.hatena.ne.jp/kawango/20110107][遅延 (レイテンシ) とはなにか? - はてなポイント 3 万を使い切るまで死なない日記]]

    遅延 (レイテンシ) というものは 1 パケットとその ACK (受け取ったという応答)
    の往復にかかる所要時間 RTT (Round-Trip-Time) で見る.
    - [[http://d.hatena.ne.jp/tagomoris/20110111/1294763866][ネットワークの遅延について真面目に書く - tagomoris のメモ置き場]]

    伝送経路での個々のパケットの時間遅れ.
    データ経路の長さ (遠さ) と考えると良い. 究極的には "距離÷光速" だけの時間遅れがある.
    - [[http://www.math.kobe-u.ac.jp/~kodama/tips-net-speed.html][ネットワ-クの速度を調べる方法]]

*** RTT
    パケットを送信して受信した側が送信側に ACK パケットを送り, 
    送信側でそれを受取るまでの時間.
    - [[http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%89%E3%83%88%E3%83%AA%E3%83%83%E3%83%97%E3%82%BF%E3%82%A4%E3%83%A0][ラウンドトリップタイム - Wikipedia]]

    TCP での通信に関しては, ラウンドトリップタイムはセグメント送信と 
    ACK 受信の間の時間を計測することによる 3 ウェイ・ハンドシェイクで計算される.

    パケットを送信して受信した側が送信側に ACK パケットを送り, 送信側でそれを受取るまでの時間.    
    - [[http://jehupc.exblog.jp/15349359][(ネットワーク) TCP のスループットと RTT の関係 : 3 流プログラマのメモ書き]]

**** ping を利用して RTT を計測
#+begin_src language
C:\Users\tsu-nera>ping www.google.co.jp

www.google.co.jp [173.194.117.183] に ping を送信しています 32 バイトのデータ:
173.194.117.183 からの応答: バイト数 =32 時間 =11ms TTL=55
173.194.117.183 からの応答: バイト数 =32 時間 =20ms TTL=55
173.194.117.183 からの応答: バイト数 =32 時間 =10ms TTL=55
173.194.117.183 からの応答: バイト数 =32 時間 =10ms TTL=55

173.194.117.183 の ping 統計:
    パケット数: 送信 = 4, 受信 = 4, 損失 = 0 (0% の損失),
ラウンド トリップの概算時間 (ミリ秒):
    最小 = 10ms, 最大 = 20ms, 平均 = 12ms
#+end_src

**** pathping を利用して RTT を計測
     Windows のコマンド. ping をよくしたもの.

#+begin_src language
C:\Users\tsu-nera>pathping www.google.co.jp

www.google.co.jp [173.194.126.216] へのルートをトレースしています
経由するホップ数は最大 30 です:
  0  Lets-Win8 [192.168.11.7]
  1  192.168.11.1
  2  kanagawa12-3.ntt-poi.FreeBit.NET [220.150.74.5]
  3  1.74.150.220.ap.yournet.ne.jp [220.150.74.1]
  4  43.244.2.61
  5  ae0.31.TR1.B9A.FreeBit.NET [219.99.124.178]
  6  ae0.109.TR1.B9A.FreeBit.NET [219.99.88.77]
  7  210.173.176.243
  8  209.85.249.64
  9     *     72.14.232.99
 10  nrt04s07-in-f24.1e100.net [173.194.126.216]

統計を 250 秒間計算しています...
            ソースからここまで   このノード/ リンク
ホップ  RTT    損失/ 送信 = Pct  損失/ 送信 = Pct  アドレス
  0                                           Lets-Win8 [192.168.11.7]
                                0/ 100 =  0%   |
  1    5ms     0/ 100 =  0%     0/ 100 =  0%  192.168.11.1
                                0/ 100 =  0%   |
  2   11ms     0/ 100 =  0%     0/ 100 =  0%  kanagawa12-3.ntt-poi.FreeBit.NET [
220.150.74.5]
                                0/ 100 =  0%   |
  3    8ms     0/ 100 =  0%     0/ 100 =  0%  1.74.150.220.ap.yournet.ne.jp [220
.150.74.1]
                                0/ 100 =  0%   |
  4   14ms     0/ 100 =  0%     0/ 100 =  0%  43.244.2.61
                                0/ 100 =  0%   |
  5   16ms     5/ 100 =  5%     5/ 100 =  5%  ae0.31.TR1.B9A.FreeBit.NET [219.99
.124.178]
                                0/ 100 =  0%   |
  6   15ms     0/ 100 =  0%     0/ 100 =  0%  ae0.109.TR1.B9A.FreeBit.NET [219.9
9.88.77]
                                2/ 100 =  2%   |
  7   18ms     5/ 100 =  5%     3/ 100 =  3%  210.173.176.243
                                0/ 100 =  0%   |
  8   24ms     2/ 100 =  2%     0/ 100 =  0%  209.85.249.64
                                1/ 100 =  1%   |
  9  ---     100/ 100 =100%    97/ 100 = 97%  72.14.232.99
                                0/ 100 =  0%   |
 10   15ms     3/ 100 =  3%     0/ 100 =  0%  nrt04s07-in-f24.1e100.net [173.194
.126.216]

トレースを完了しました.
#+end_src

*** スループット
    理論的に実現可能な TCP の最大転送速度.

    #+begin_src language
    スループット (bps) = TCP ウィンドウサイズ (KB) * 8 / RTT (S)
    #+end_src

    ping で RTT を調べたら, x 2 をすることを忘れない.

    - [[http://gihyo.jp/admin/serial/01/net_prac_tech/0001][第 1 回  FTP でスループット計測するときの注意事項:教科書には載っていない ネットワークエンジニアの実践技術|gihyo.jp … 技術評論社]]
    - [[http://www.math.kobe-u.ac.jp/~kodama/tips-net-speed.html][ネットワ-クの速度を調べる方法]]
    - [[http://jehupc.exblog.jp/15349359][(ネットワーク) TCP のスループットと RTT の関係 : 3 流プログラマのメモ書き]]
    - [[http://knowledge.sakura.ad.jp/tech/938/][ネットワーク/ ストレージの処理能力をチェックするためのベンチマークツール - さくらのナレッジ]]

    ウィンドウサイズが 64K バイトの場合の TCP 最大スループットの理論値は以下のとおり

    #+begin_src language
    RTT 1msec のとき 512Mbps
    RTT 5msec のとき 102.4Mbps
    RTT 10msec のとき 51.2Mbps
    RTT 15msec のとき 34.1Mbps
    RTT 20msec のとき 25.6Mbps
    RTT 50msec のとき 10.24Mbps
    RTT 100msec のとき 5.12Mbps
    RTT 200msec のとき 2.56Mbps
    #+end_src

    - [[http://gihyo.jp/admin/serial/01/net_prac_tech/0002][第 2 回  ネットワーク遅延と高速化:教科書には載っていない ネットワークエンジニアの実践技術|gihyo.jp … 技術評論社]]
     
** ウィンドウ制御
   複数の TCP パケットを連続して (ACK 確認なしで) 送信するという方式.

   通信の往復回数を削減することで, 遅い回線における高速化を実現する.

*** スライディングウィンドウ方式
    個々のデータを ACK を待たずに転送する仕組み.

    送信したいデータを複数の TCP パケットに分け, 
    ACK を待たずにまとめて連続して送信する. 
    そして ACK は, それらのデータに対して, まとめて 1 つだけ返送する.

*** ウィンドウサイズ
    ACK を待たずに一度に送信できるデータ量.

    #+begin_src language
    ウィンドウサイズ = セクメントサイズ * スライディングウィンドウの個数.
    #+end_src

    一般的にはウィンドウ・サイズの初期値は数 Kbytes から数十 Kbytes 程度.

    ウィンドウ・サイズ・フィールドは 16bit 幅なので, 
    最大では 65,535bytes までのウィンドウ・サイズを設定することができる. 
    また RFC1323 で定義されている TCP の拡張プロトコルを使うと, 
    より大きなウィンドウ・サイズを利用することもできる.

   - [[http://technet.microsoft.com/ja-jp/library/bb878127.aspx][The Cable Guy - 2005 年 11 月 : 次世代の TCP/IP スタックのパフォーマンスの拡張機能]]

    ウィンドウ・サイズを大きくすると, 
    その分プロトコル・スタックで使用するメモリ領域も増える.

   - [[http://www.atmarkit.co.jp/ait/articles/0312/25/news001_3.html][基礎から学ぶ Windows ネットワーク:第 14 回  信頼性のある通信を実現する TCP プロトコル (その 1) (3/3) - ＠ IT]]
   - [[http://www.atmarkit.co.jp/ait/articles/0402/13/news096_2.html][基礎から学ぶ Windows ネットワーク:第 16 回  信頼性のある通信を実現する TCP プロトコル (3) (2/4) - ＠ IT]]

**** TCP ヘッダ 「ウィンドウ・サイズ」フィールド:16bit 幅
     受信側のウィンドウ・サイズを相手に伝えるために利用される. 
     TCP の送信側では, 相手から通知されたウィンドウ・サイズを見て, 
     送信可能な最大のデータ量を判断している.

*** フロー制御との関係
     - アプリケーションのデータ処理速度が
     ネットワークの受信速度よりも十分速ければ, 
     ウィンドウ・サイズはずっと大きいままで, 帯域幅をフルに活用することができる.

     - アプリケーションの処理速度が遅ければ, 
     ウィンドウ・サイズが自動的に縮小して, データの受信を抑制する.

*** セグメント
    TCP におけるデータの送信単位.
    TCP ではセグメントというサイズごとに区切ってデータを送信している. 

*** MSS
    MSS (Maximum Segment Size. 最大セグメント・サイズ)
    受信可能なセグメントの最大サイズを通信相手に通知するためのオプション.
    
    MSS のサイズが分かると, TCP データを送信する側では, 
    常にこのサイズ以下になるようにデータを分割して送信することができる  
    無用な IP フラグメンテーションを起こすことなく, 
    常に最大の効率でパケットを送信することができる.

    最も効率よくデータを送信するためには, 
    ウィンドウ・サイズを MSS の整数倍にするのが望ましい.

    Ethernet を使うとき, このサイズは 1,460 オクテットとなります

*** ウィンドウ・スケール・オプション
    TCP の最大 64Kbytes となっているウィンドウ・サイズを
    より大きくするために利用されるオプション.

** 再送制御
    TCP パケット受信側では, データを受け取ったことを表すため ACK 応答を返送する.

    TCP パケット送信側では, この ACK を受け取って初めて送信が完了したとみなす.
    しばらく待っても ACK が受信できなければ, 送信が失敗したものとみなし,再送制御を実施する.

    あらかじめ規定された回数 経っても ACK を受信できない場合は, 
    TCP コネクションが切れてしまったと判断し, 
    上位アプリケーションに対してエラーなどを通知する.

*** RTO
    Retransmission Time Out.再送タイムアウト.

    タイムアウト値は RTT を推測することで動的に決定する.

    - RTO の初期値は RTT の 4 倍 + α
    - RTO の値は再送を行うたびに 2 倍に増やされる.
    - 最大で 64 秒までなる.
    - RTT は初期値を 3 秒とし, これまでに送ったデータに対し 
      ACK が返って来るまでにかかった時間から算出する.

   参考:
   -  [[http://www.7key.jp/nw/tcpip/tcp/tcp2.html][TCP における確認応答と再送制御 -- Key:雑学事典]]

*** Windows での 再送制御
    - TCP 接続が確立されたときに, 再送タイマーは 3 秒に初期化される.
    - 特定の接続で通常生じる遅延に応じた調整を自動的に行う.
    - タイムアウト値は, 接続で再送が連続して行われるごとに 2 倍になる.
    - 再送回数の既定値は 5.初期再転送時間は 5 秒

    以下に, 再送タイムアウト調整のためのレジスタ情報がある.
    - [[http://support.microsoft.com/kb/170359][TCP/IP の再送タイムアウトの最大値を変更する方法]]
    
    画像付き.
    - [[http://d.hatena.ne.jp/incarose86/20121222/1356193183][Windows における TCP の再送機能を確認する - とある SIer の憂鬱]]

*** WireShark でのエラー
   - [[http://troushoo.blog.fc2.com/blog-entry-111.html][TCP Retransmit ・ DupACK ・ Fast Retransmit ~トラブルシューティング時のキーワード~]]

**** TCP Retransmit
     WireShark では, TCP Retransmit というメッセージが
     再送がおこなわれたことを示している.
       
**** TCP DupACK
     パケットロス等で, 受信者が想定しているシーケンス番号より, 
     大きな値のシーケンス番号が送信者から送られてくることがあります.
     すると, 受信者は自分が想定しているシーケンス番号を 
     ACK 番号にセットした ACK を直ちに送信者に送ります. これが DupACK です.

**** TCP Fast Retransmit
     高速再転送.データ送信者が, DupACK を複数回受け取ると, 
     Retransmission Timeout の経過を待つことなく, 再送を行います.

     抜けているセグメントのみ送信するのではなく, 抜けているセグメント以降を全て送信し直す.

** 順序制御
   送信したパケットが順番が入れ替わって到着する可能性もある.
   送信するパケットには番号が付けられており, 
   受信側ではパケットを番号順に並べ替えてから元のデータを復元し, 
   それを上位のアプリケーションへ渡すようになっている.

*** 累積的確認応答
    到着しているすべてのセグメントについて, その次に到着することを期待
    しているシーケンス番号 + 1 を を確認応答番号として返す.

*** 選択的確認応答
*** 遅延確認応答
    連続したデータは遅延を入れることでバッファに貯めて,
    まとめて送出することで, ネットワーク上に流れるパケットの数を減らして, 
    ヘッダのオーバヘッドを小さくする.
    
    遅延時間は Nagle アルゴリズムで決定する.
    - [[http://ja.wikipedia.org/wiki/Nagle%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0][Nagle アルゴリズム - Wikipedia]]

    リアルタイムに通信したい場合は, 
    TCP オブションで Nagle アルゴリズムを無効にする.

** フロー制御
  TCP プロトコルにおける送受信では, 
  シーケンス番号とウィンドウ・サイズが重要な意味を持つ.

   - シーケンス番号は, これから送受信しようとしているデータの位置
   - ウィンドウ・サイズは送信可能なデータの最大サイズ

   双方のシーケンス番号は同期し (同じ値を保持している), 
   同じウィンドウ・サイズ情報を共有している. 

   - シーケンス番号情報は送信側
   - ウィンドウ・サイズ情報は受信側

*** シーケンス番号
   バイト単位のストリーム型通信を実現するため, 
   TCP では通信路内を流れるバイト・データに対して, 
   それぞれのバイト位置を決める「シーケンス番号」を定義している. 

   シーケンス番号に基づいてデータを整列したり, ウィンドウ制御を行ったりする

   コネクションごとにランダムに決められる.

*** データ送信
**** Step1
     TCP 層では, ウィンドウ・サイズに以下になるようにデータを切り分け, 
     先頭から順次送信を行う.ウィンドウ・サイズ以下ならば, 一度に送信することが可能.
    
**** Step2
     TCP パケットを受信した側では, 
     データを受信バッファにコピーしてアプリケーションに通知すると同時に,
     受信したことを示す ACK パケットを返信する. 
    
     以下ががセットされている.
     - データを受信したことを示す更新済み受信 ACK 番号
     - 新しいウィンドウ・サイズ

**** Step3
     受信側が送った ACK パケットを受け取る.
     - 自身の開始シーケンス番号を更新する
     - さきほど再送に備えて取っておいた送信データのコピーを破棄する
     - ウィンドウ・サイズを, ACK パケットで通知されたものに更新する.

**** Step4
     - TCP/IP のプロトコル・スタックでは, 受信バッファからアプリケーションにデータが引き渡され, 
       空きが増えた場合にウィンドウ・サイズを増加させる.


*** 輻輳制御
    以下の二つで輻輳を避ける仕組み.
    - スロースタート
    - 輻輳回避アルゴリズム

    ウィンドウサイズは,以下の 2 つの小さい方を採用する.
    - 送信側の輻輳ウィンドウサイズ
    - 受信側からの告知ウィンドウサイズ

    #+begin_src language
    1 -> 2 -> 4 -> 8 -> 16 -> 32 (ここで輻輳発生)
    -> 17 -> 18 -> 19 -> 20 -> 21 -> 22 ここで輻輳発生)

    1 -> 2 -> 4 -> 8 -> 16 -> 32 (ここで輻輳発生)
    -> 17 -> 18 -> 19 -> 20 -> 21 -> 22 ここで輻輳発生)
    
    .... 
    #+end_src

    - [[http://www.net.c.dendai.ac.jp/~yutaro/][TCP 各バージョンの輻輳制御の観察]]
    
**** スロースタート
     輻輳ウィンドウははじめは 1 にセットされて,指数関数的に増加させる.

     輻輳が発生したら, 輻輳回避アルゴリズムへ移行する.

**** 輻輳回避アルゴリズム
     現在の輻輳ウィンドウサイズと同じだけの確認応答をうけとると,
     ウィンドウサイズを 1 つ増やす.

     送信側でタイムアウトを検出すると, スロースタートへ移行する. 

** TCP タイマシステム
   重要なものは以下の 4 つ.
   - タイムアウトタイマ ... セグメント転送タイマ.
   - 持続タイマ ... ゼロウィンドウ検査用.
   - 終了時タイマ ... TIME-WAIT から CLOSED 状態へ遷移するための待ち時間タイマ
   - keep-alive タイマ

*** keep-alive
    データ通信が何も行われない場合でも, 
    一定時間間隔で空の TCP パケットを送受信することにより, 
    TCP 接続がアクティブであることをお互いに通知, 確認するための通信機能である.

    何も通信を行わないでいると, 無通信で回線が切断されてしまったり, 
    TCP 接続がタイムアウトして切断されてしまったりするので, 
    キープ・アライブでこれを防ぐことができる.

* ツール
** Ostinato
   Ostinato は, OSS のパケット生成ツール.

   - [[https://code.google.com/p/ostinato/][ostinato - Packet/Traffic Generator and Analyzer - Google Project Hosting]]
   - [[http://troushoo.blog.fc2.com/blog-entry-93.html][Wireshark でキャプチャしたパケットを編集し送信 - Ostinato]]
   - [[http://trycatch.be/blogs/decaluwet/archive/2011/10/31/ostinato-capture-gt-edit-gt-replay.aspx][Ostinato capture > edit > replay - Tom Decaluw é]]
