#+OPTIONS: toc:nil
* Programming Paradigm: プログラミングパラダイム
  - [[http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%83%91%E3%83%A9%E3%83%80%E3%82%A4%E3%83%A0][プログラミングパラダイム - Wikipedia]]

** 分類図
   - [[http://www.info.ucl.ac.be/~pvr/paradigms.html][Classification of the principal programming paradigms]]
     - https://docs.google.com/viewer?url=http://www.info.ucl.ac.be/people/PVR/paradigmsDIAGRAMeng108.pdf
       
** edX の講義での説明

  | Paradigms                          | Concepts     | Features                    |
  |------------------------------------+--------------+-----------------------------|
  | Functional Programming             |              | Functions and recursion     |
  |                                    |              | Hihger-order programming    |
  |                                    |              | Single-assigned variables   |
  |------------------------------------+--------------+-----------------------------|
  | Object-Oriented Programming        | + cell       | Data Abstraction            |
  |                                    |              | Polimorphism                |
  |                                    |              | Inheritance                 |
  |------------------------------------+--------------+-----------------------------|
  | Deterministic Dataflow Programming | + thread     | No race conditions          |
  |                                    |              | Concurrent transparency     |
  |                                    |              | Streams and agents          |
  |------------------------------------+--------------+-----------------------------|
  | Multiagent Dataflow Programming    | + port       | Deterministic dataflow      |
  |                                    |              | Nondeterminism where needed |
  |------------------------------------+--------------+-----------------------------|
  | Active Object Programming          | + local cell | Object-oriented programming |
  |                                    |              | Multi-agent dataflow        |

* Base Concepts
** Program: プログラム
   - [[http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)][プログラム (コンピュータ) - Wikipedia]]

   パラダイムによって, 定義がことなる.
   - 命令型パラダイム ... コンピュータが行うべき命令の列
   - オブジェクト指向型パラダイム ... オブジェクトとメッセージング
   - 関数型パラダイム ... 関数そのもの.

*** SICP より
    プロセスは計算機のなかに潜む抽象的な存在.
    プロセスはもう一つの抽象的な存在, データを操作する.
    プロセスの進行は, 規則のパターン, プログラムにしたがう.

    プログラムは二つの要素をもつ.
    - 手続き: データの処理方法 (能動的)
    - データ: 処理したいもの   (受動的)

*** 式 (Expression)
    計算機の解釈系に渡される前の表現.
    解釈系に評価されると, 式はプロセスになる.

    以下, wikipedia からの引用も.
    - [[http://ja.wikipedia.org/wiki/%E5%BC%8F_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)][式 (プログラミング) - Wikipedia]]

    言語によって定められた優先順位や結びつきの規定に則って評価
    される値, 変数, 演算子, 関数の組み合わせ.
   
*** プロセス (Process)
    プロセスは計算機のなかに潜む抽象的な存在.
    プロセスはもう一つの抽象的な存在, データを操作する.
    プロセスの進行は, 規則のパターン, プログラムにしたがう.

    プログラムに必要な資源のこと. (プログラム自体, データ, スタック,
    カウンタ, スタックポインタ, レジスタ, メモリなど)

    3 つの状態 (Run, Blocked, Ready) を持つ.
    - 複数のプロセスを仮想的に並列に実行するものがプロセッサ

** literal: リテラル
   即値 (英: Immediate) ともいい, ソースコード内に値を直接表記したもの.
   - [[http://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB#.E3.82.B3.E3.83.B3.E3.83.94.E3.83.A5.E3.83.BC.E3.82.BF.E3.83.97.E3.83.AD.E3.82.B0.E3.83.A9.E3.83.9F.E3.83.B3.E3.82.B0][リテラル - Wikipedia]]

   静的に構文解析が可能なことが多い.

   変数の対義語. 変更されない値.

** Valuables: 変数
   変数の構成要素は以下の 2 つ.
   - 識別子 (Identifier)
   - 格納域実体 (Store entity)

*** Identifiers and Store Entity
    x = 1 ということはどういうことかを説明する概念.
    
    数学的な写像関係で x = 1 を説明しようとしている. { X -> x1=1 }みたいな感じ.
    x1 がメモリ上の実際の (束縛された) 値で, X がそれを指し示す識別子.
    
*** environments
    識別子と変数の写像関係を環境という.

   - a collection of (symbol, value) pair.
   - environment has a parent environment, possible to have multiple children.
   - a function + an environment = a closure

**** global environments
     どこからでも参照できる environments.

     top environment, すべての親となる environments.

*** single-assignment store
    単一代入格納域. 
    一度一つの値を束縛したら変更できない変数の集合.定数.
    
    関数型プログラミングでは, この変数が当たり前.

** Type: 型
   -> データ構造・型のページへ移動
    
** Scope: スコープ
   Valiable の有効範囲.
   - [[http://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97][スコープ - Wikipedia]]

   Scoping Rules - スコープの範囲

*** Lexical Scope: 静的スコープ
    静的スコープ.変数はブロックの内側のみ有効. 
    Static Scoping とも. 字句的スコープともいう.

    free valuables are searched for 
    in the environment in which the funcition was defined.

**** ブロック構造 (block Structure)
    手続きの仮引数は局所的である.
    関数の定義は局所的でない.

    手続きをブラックボックスにするためには,
    利用者に必要のない関数は隠蔽する必要がある.

    定義の入れ子を *ブロック構造* という.
    ブロック構造の中で定義された関数は局所的である.

    できるだけブロックを利用することで
    巨大問題を, 扱える部品に分割できる.

    SICP p17 より.

**** R example
     Scope の外への戻り値は, Scope 内部の関数のコピーである.

#+begin_src R :session ex :export both :results code
# from R Programming coursera.
make.power <- function (n) {
    pow <- function (x) { x^n }
    pow
}

cube <- make.power (3)
square <- make.power (2)
#+end_src

*** Dynamic Scope
    Emacs Lisp は ダイナミックスコープを採用している.
    
#+BEGIN_QUOTE
Emacs Lisp は, アプリケーション・プログラミングで使われる方言群である
Scheme や Common Lisp とは根本的に異なる. 大きな違いの 1 つは,
デフォルトで字句的スコープではなく動的スコープを使うことである. つま
り, 呼出し関数の局所変数は, ポインタや参照を渡さなくとも, 呼び出され
た関数から参照できる.
#+END_QUOTE

 - [[http://ja.wikipedia.org/wiki/Emacs_Lisp][Emacs Lisp - Wikipedia]]
 - [[http://jutememo.blogspot.jp/2012/03/blog-post.html][レキシカルスコープとダイナミックスコープ | すぐに忘れる脳みそのためのメモ]]

** State: 状態
   State (状態) とは, 必要とされる計算の途中結果を含む, 値の時系列.
   (sequence of values calculated progressively,
   which contains the intermediate results of a computation)

   状態の導入によって, プログラムに時間の概念を与える.

*** modular
    ある部分を変更しても, 別の部分には変更が加わらないとき,
    それをモジュール性という.
    
    Function Paradium ではできない. State があればできる.

** Evaluation Strategy
   評価戦略. Substitutonal Rule (代入規則) とも.

   プログラミング言語や, ラムダ計算のような式から成る計算模型において,
   如何なる手順で, 評価すなわち式から値を得るか,
   という (通常決定的な) 規則群.
   - [[http://ja.wikipedia.org/wiki/%E8%A9%95%E4%BE%A1%E6%88%A6%E7%95%A5][評価戦略 - Wikipedia]]

*** Call-by-Name (名前呼び)
*** Call-by-Value (値呼び)
*** Call-by-Ref (参照呼び)
*** Haskell
    2 つの評価方法があり, どちらを選択しても,
    最後の結果が変わらないという性質がある.
    - InnterMost Reduction: 最内簡約
      - 内側から評価する.
      - 評価対象が複数ある場合は, 左から評価する.
    - OuterMost Reduction: 最外簡約
      - 外側から評価する.
      - 評価対象が複数ある場合は, 左から評価する.

*** Lazy Evaluation: 遅延評価
    Haskell の評価戦略.
    - Outermost Reduction + shareing.

*** 未整理 SICP より.
    - 正規順序 (normal-order evaluation)
      1. 演算子と非演算子を評価.
      2. 演算子評価結果の手続きを非演算子評価結果の引数に作用させる.
      
    - 作用素的順序 (applicative-order evaluation)
      その値が必要になるまで, 非演算子を評価しない.
      遅延評価??

** SyntaxSuger
   糖衣構文.
   - [[http://ja.wikipedia.org/wiki/%E7%B3%96%E8%A1%A3%E6%A7%8B%E6%96%87][糖衣構文 - Wikipedia]]

   プログラミング言語において, 読み書きのしやすさのために導入される構文であり,
   既に定義されている他の構文の (人間にとってより理解しやすい)
   書換えとして定義されるもののこと.

** Exceptions
   例外. プログラムがある処理を実行している途中で,
   なんらかの異常が発生した場合に,
   現在の処理を中断 (中止) して, 別の処理を行うこと.
   その際に発生した異常のことを例外と呼ぶ

   - [[http://ja.wikipedia.org/wiki/%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86][例外処理 - Wikipedia]]

   よくある 2 つの概念.

   - try  ・・・ 例外ハンドラをもつ例外補足コンテクストを生成.
   - raise ・・・ もっとも内部の例外補足コンテキストへ jamp し, そこにある例外ハンドラを起動.

   各コンテキストはスタックで管理され, try はスタックの 1 つに marker をつける.
   raise は marker にジャンプして marker の場所に例外処理のコンテキストを挿入する.

   CTM p93 参照.

*** 例外の種類
    - Asynchronous  Exceptions: 非同期例外
    - Synchronous  Exceptions: 同期例外
      - Traps: 意図的に OS が止める breakpont, systemcall, file open
      - Faults: リカバリ可能な例外, page fault, segmentation fault
      - Aborts: リカバリ不可能な例外, プログラムは強制終了.

*** 例外がないと困ること
    例外をつかわないと, コンテクストごとの結果を検証必要があり,
    return 文 と case 文が乱立するうんこコードが出来る.

    例えば, 下位のコンテキスト (A) で発生したエラーは,
    return -> return -> して上位でも戻り値のエラーチェックが必要.

 #+begin_src c
#define ERROR -1
#define OK 0

int main (void) {
  if (C ()==ERROR) {
    printf ("Error\n");
  }
}

int A () {
  return ERROR;
}

int B () {
  if (A () == ERROR) {
    return ERROR;
  }
  else {
    return OK;
  }
}

int C () {
  if (B () == ERROR) {
    return ERROR;
  }
  else {
    return OK;
  }
}
 #+end_src

** Function
   関数.

*** CPMCP での定義
    Procedure is a procedure value with a contextual environment.

    Since procedures (and functions) are values, we can pass them 
    as inputs to other functions and return them as outputs.

*** C 言語 (手続き型パラダイム)
    戻り値つきのサブルーチン.
    - [[http://ja.wikipedia.org/wiki/C%E8%A8%80%E8%AA%9E#.E7.B6.99.E6.89.BF.E3.83.BB.E6.8B.A1.E5.BC.B5.E3.83.BB.E9.83.A8.E5.88.86.E9.9B.86.E5.90.88.28subset.29][C 言語 - Wikipedia]]

    プログラム中で意味や内容がまとまっている作業をひとつの手続きとしたもの.
    - [[http://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%96%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3][サブルーチン - Wikipedia]]

    手続きにつけられたラベル.アセンブラのラベルと同義.
    (関数プログラミング実践入門)

*** Java (オブジェクト指向パラダイム)
    あるクラスないしオブジェクトに所属するサブルーチン.
    - [[http://ja.wikipedia.org/wiki/%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%A6)][メソッド (計算機科学) - Wikipedia]]

    各オブジェクトが持っている自身に対する操作. 
    オブジェクトは「データ」と「手続き」から成っているが, 
    その「手続き」の部分に当たる.
    - [[http://e-words.jp/w/E383A1E382BDE38383E38389.html][メソッドとは 〔 メンバ関数 〕 【 method 】 - 意味/ 解説/ 説明/ 定義 : IT 用語辞典]]

*** Haskell (関数型パラダイム)
    関数は, ある型の引数を他の型の引数の結果に変換する.
    型とは, 互いに関連する値の集合.
    - 参考: [[http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Haskell-Graham-Hutton/dp/4274067815][Amazon.co.jp: プログラミング Haskell: Graham Hutton, 山本 和彦: 本]]

    数学に置ける関数の概念に近い. ある集合から集合への写像.
    - [[http://ja.wikipedia.org/wiki/%E9%96%A2%E6%95%B0_(%E6%95%B0%E5%AD%A6)][関数 (数学) - Wikipedia]]

*** SICP
    - Processs (プロセス)
      計算機のなかに潜む抽象的な存在.
    - Procedure (手続き・プロシージャ)
      データの処理方法.

      データにたいして繰り返しで処理をおこなう方法には, 再帰的処理と反復的処理がある.

**** Recursive: 再帰的
     計算を実行するためには, 以前の計算結果を覚えておく必要がある.
     計算効率と空間効率は x の大きさに比例する.

     これを, 線形再帰プロセスという.

#+begin_src emacs-lisp
;; applicative-order evaluation
;; linier recursion
(defun plus (x y)
  (if (= x 0)
      y
    (1+ (+ (1- x) y))))
#+end_src

**** Iterative: 反復的
     計算効率は, 入力値に比例する.
     空間効率は, 一定.

     これを線形反復プロセスという.

 #+begin_src emacs-lisp
;; normal-order evaluation
;; linier iteration
(defun plus (x y)
  (if (= x 0)
      y
    (+ (1- x) (1+ y))))
#+end_src

  以下からなる.
  - 状態が一定個数の状態変数
  - 状態が移ったときに状態変数をどう変化させるかの規則
  - プロセスを終了させる条件.

* Semantics
  プログラム意味論. 
  formal semantics, mathmatical semantics ともいう.

  プログラムの正しさや正確さを理論づけるための方法.
  - [[http://ja.wikipedia.org/wiki/%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%A4%9C%E8%A8%BC][形式的検証 - Wikipedia]]

  4 つのアプローチがある.

** Operational semantics: 操作的意味論 
   Explains a program in terms of its execution
   on a rigorously defined abstract machine 

   どのパラダイムにおいても適用できる.
   - Kernel Language
   - Abstract Machine

   wikipedia: [[http://ja.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%9A%84%E6%84%8F%E5%91%B3%E8%AB%96][操作的意味論 - Wikipedia]]
    
   プログラムの正しさを数学的に証明することを目指す.
   - Specification ・・・ プログラムの入力と出力を定義したものを
   - Program ・・・ プログラミング言語によってかかれたデータ

   Program が Specification を満たしているかを証明する. そのために,
   - Semantic (意味の対応付け)
   - Abstruct Machine (抽象化された実行環境)

   という概念を導入する. 
   Program は kernel Language に分解され, 
   Kernel Language の構成要素が Abstruct Machine と対応付けられる.

   #+begin_src language
                             Semanitic 
    Program --> kernel Language ----->  Specification
                            Abstrucut Machine
   #+end_src

   コンピュータの理論は, 
   Kernel Language と Abstruct Machine によって
   離散数学 (Discrete Mathmatics) を元に議論することが可能になる.

*** Mathematical induction
   recursive function (再帰関数) の正しさは,
   数学的帰納法 (mathematical induction) で証明する.

*** example
**** Specification
#+begin_src language
0! = 1
n! = n × (n-1)!  when n>0
#+end_src

**** Program
#+begin_src oz
fun {Fact N}
   if N==0 then 1 else N*{Fact N-1} end
end
#+end_src

**** Semanitc Expression

#+begin_src language
E={Fact → fact, N → n, R → r} (AbstcutMachine)
σ={fact=(proc ... end,CE),n=0,r} (memory)
CE={Fact → fact}. ( Contectual Environment)

{Fact N R}, E, σ
#+end_src

  広義の意味では, 関数に forcusing したプログラミング.

** Axiomatic semantics: 公理的意味論
   Explains a program as an implication: if
   certain propertieshold before the execution, then some other
   properties will hold after the execution

   状態があるモデルに適している.ステートマシンの証明.
   数理論理学に基づいてプログラムの正当性を証明する手法.
   - [[http://ja.wikipedia.org/wiki/%E5%85%AC%E7%90%86%E7%9A%84%E6%84%8F%E5%91%B3%E8%AB%96][公理的意味論 - Wikipedia]]

*** Coq
    定理証明支援系言語.
    - [[http://ja.wikipedia.org/wiki/Coq][Coq - Wikipedia]]
    - [[http://www.iij-ii.co.jp/lab/techdoc/coqt/][プログラミング Coq]]
    - [[http://qnighy.hatenablog.com/entry/20101220/1292829222][Coq で独習するならどのページがいい? と聞かれたときのメモ - 簡潔な Q]]

*** モデル検査
   - [[http://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%87%E3%83%AB%E6%A4%9C%E6%9F%BB][モデル検査 - Wikipedia]]

**** VDM
     モデル検査用のソフトウェア
    - [[http://www.vdmtools.jp/modules/tinyd1/index.php?id=1][VDM information web site - VDM とは?]]

*** Proof-Driven Development (証明駆動開発)

** Denotational semantics: 記述的意味論
   Explains a program as a function over an
   abstract domain, which simplifies certain kinds of mathematical
   analysis of the program 

   宣言的プログラミングの証明に適する.

** Logical semantics: 論理的意味論
   Explains a program as a logical model of a set
   of logicalaxioms, so program execution is deduction: the result of
   a program is a true property derived from the axioms

   宣言的計算モデルに適する.

* Declarative Programming
  宣言型プログラミング.
 - 広義:
  処理方法ではなく対象の性質などを宣言することでプログラミングするパラダイム.
  
  - 狭義:
  純粋関数型プログラミング, 論理プログラミング, 制約プログラミングの総称.
  数学のための言語. 状態を持たない.

  - [[http://ja.wikipedia.org/wiki/%E5%AE%A3%E8%A8%80%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0][宣言型プログラミング - Wikipedia]]

  Imperative Programing の対になる概念. "Function without State"
  Imperative vs Declaretive is also Stateful vs Stateless
  
  HTML は Stateless, Declarative Programming language.

  状態はクッキーを導入してしばしば実現する.

* Functional Programming
  -> 記事独立.
  [[file:functional_programming.org]]

* Imperative Programming
  命令型プログラミング.
  計算をプログラム状態を変化させる文の列で記述するパラダイム.

  - [[http://ja.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0][命令型プログラミング - Wikipedia]]

  [[Imperative Programming]] とは, Function paradigm に Cell (状態) の概念を加えたもの.

  #+begin_src language
  Imperative programming = Function paradigm + Cell
  #+end_src

  - Declarative Programing の対になる概念.
    Imperative vs Declaretive is also Stateful vs Stateless

  - 実行するたびに, 内部の状態によって結果がことなる.(副作用)

  - 械語は命令から構成される
  低レベルから見た場合,
  プログラムの状態はメモリの内容によって定義され, 
  文としては機械語の命令が相当する. 

** Procedural Programming
  手続き型プログラミングと同義のこともある.

  手順やチェックリストはプログラムではないが,
  命令型プログラミングのスタイルに似たコンセプトである.
  それらのステップが命令であり, 実世界が状態を保持している.

  - [[http://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%96%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3][サブルーチン - Wikipedia]]

  - 関数 (かんすう) 引数をとり結果として値を返すもの.
  - 手続き (てつづき) 結果として値を返さないもの

** Explicite State
   明示的状態.

   - 生存期間が 2 度以上の手続的呼び出しに渡るような一つの状態.
   - 関数の実行の中に値をもつ.
   - 手続きの引数に現れないもの.

   同様なことを関数型パラダイムで実現するためには, 仮引数に状態を持たないといけない.

** Cell
   Explicite State (明示的状態) を表す基本型. 二つの構成要素からなる.

   - 名前値 (Vaiue)
   - 単一代入格納域への参照 (Identifier)

   #+begin_src oz
declare
fun {Reverse L}
   % 空リストの cell を生成
   Rs = {NewCell nil}
in
   % リストの各要素を取り出して内部 Cell に結合
   for X in L do
      Rs := X|@Rs
   end

   % 内部セルをリターンする.
   % Ruby っぽい!
   @Rs
end

{Show {Reverse [1 2 3 4]}}
   #+end_src

   Function Paradigms と Imperative Paradigm の違いは,

   - Function 
     - 状態変化しない (Immunity)
     - 機能追加時にインタフェースの変更の影響度がおおきい.
   - Inperative
     - 機能追加時にインタフェースの変更の影響度がない. (モジュール性, モジュールプログラミング)
     - 状態変化する.

** Languaages
  - C 言語
  - アセンブリ言語

* Event-Driven Programming
イベント駆動プログラミング.

- [[http://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E9%A7%86%E5%8B%95%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0][イベント駆動型プログラミング - Wikipedia]]

起動すると共にイベントを待機し,
起こったイベントに従って処理を行うプログラミングパラダイム.

 - イベントハンドラの処理のみをかけばよい
 - GUI でよく利用される.
 - フレームワーク作成側で振る舞いを規定できる.

** 用語
   - イベント 
    プログラムの流れとは別に発生する事象.
   - イベントハンドラ 
     イベントが発生した際に実行すべきサブルーチンのこと. イベントフック, イベントリスナーなどの呼び方がある.
   - トリガ 
    イベントを発生させるきっかけ.
   - イベントディスパッチャ 
     発生したイベントをイベントハンドラに振り分ける機能のこと.
   - イベントキュー 
     複数のイベントが連続して発生した場合に, それらのイベントを待ち行列として保持するデータ構造.
   - イベントループ 
     イベントを待機するループを持つ機構. イベントループ内にイベントディスパッチャを持つ構造が一般的.

     from wikipedia.

* Structured programming
  構造化プログラミング.
  
  構造化プログラミングではプログラミング言語が持つステートメントを
  直接使ってプログラムを記述するのではなく,
  それらを抽象化したステートメントを持つ仮想機械を想定し,
  その仮想機械上でプログラムを記述する.
  普通, 抽象化は 1 段階ではなく階層的である.
  各階層での実装の詳細は他の階層と隔離されており,
  実装の変更の影響はその階層内のみに留まる (Abstract data structures).
  各階層はアプリケーションに近い抽象的な方から土台に向かって順序付けられている.
  この順序は各階層を設計した時間的な順番とは必ずしも一致しない (Concluding remarks)

  [[http://ja.wikipedia.org/wiki/%E6%A7%8B%E9%80%A0%E5%8C%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0][- 構造化プログラミング - Wikipedia]]

  標準的な制御構造のみを使い,
  プログラム全体を段階的に細かな単位に分割して処理を記述していく手法.
  
  - [[http://e-words.jp/w/E6A78BE980A0E58C96E38397E383ADE382B0E383A9E3839FE383B3E382B0.html][構造化プログラミングとは 【 structured programming 】 : IT 用語辞典]]
  
  「制御の流れ」を構造化しただけであり,
  「データ構造」には何の制限や規則も設けていない.
  
  「芸術品」から脱却して「工業製品」へ遷移すること,
  あるいは, 「処理性能重視」から「保守性重視」へ向かったもの.
  別の見方をすれば, 処理効率を犠牲にして, 作りやすさや理解容易性を求めたもの.
  
  - [[http://monoist.atmarkit.co.jp/mn/articles/1009/17/news118.html][構造化プログラミングからオブジェクト指向への進化 - MONOist (モノイスト)]]

  ときどき, 勘違いされているが構造化プログラミングとは
  「手続き型言語」のことでもなければ「 goto を使わないプログラミング」のことでもない.

  つまり, 現代風に言い換えると「レイヤリングアーキテクチャ」のようなもので,
  ある土台の上にさらに抽象化した土台をおき,
  その上にさらに・・・というようにプログラムをくみ上げていく考え方のことだ.

  - [[http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1][新人プログラマに知っておいてもらいたい人類がオブジェクト指向を手に入れるまでの軌跡 - Qiita]]

** 三つの構造化文
   ダイクストラが提唱.
*** 順次
    順接, 順構造とも言われる. プログラムに記された順に, 逐次処理を行なっていく.
    プログラムの記述とコンピュータの動作経過が一致するプログラム構造である.
    
*** 反復
    一定の条件が満たされている間処理を繰り返す.

*** 分岐
    ある条件が成立するなら処理 A を, そうでなければ処理 B を行なう.

* Object-Oriented Programming
  オブジェクト指向型プログラミング.
  -> 記事独立.
  [[file:object-oriented_programming.org]]

* Detarministic Dataflow Programming
  -> 記事独立.
  [[file:concurrent_programming.org::*Detarministic%20Dataflow:%20%E6%B1%BA%E5%AE%9A%E6%80%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%83%95%E3%83%AD%E3%83%BC%E3%83%A2%E3%83%87%E3%83%AB][Detarministic Dataflow: 決定性データフローモデル]]

* Concurrent Programming
  -> 別ページへ移動.

* Multi-agent dataflow programmming
  マルチエジェーントデータフロープログラミング.

  Concurrency を解決するためのいろいろなパラダイムのなかで,
  最強のパラダイムがこれだとピーターバンロイさんはいう.

  なぜなら, Deterministic Dataflow Programming をベースに,
  NonDeterminism の制御を機能追加したから.

  Deterministic Dataflow Programming に, Port という明示的状態をくわえた
  - [[http://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%AB%E3%83%81%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0][マルチエージェントシステム - Wikipedia]]

  Distributed System ともいう.

  CTMCP, Chapter 5

** Port
   ボート. Named Steram.名前のつけられたストリーム.

   以下の操作をもつ, Abstruct Data Structure.

   - Port Creation
   - Message Sending
     - Asyncronize
     - Syncronize

** Agents
   通信モデルは大きく 2 つに分けられる.

   - Client-Server Architectures
   - Pear-to-Pear Architectures

   Client,Server,Pear を Agent という.

   - [[http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88][ソフトウェアエージェント - Wikipedia]]

   以下の構成要素をもつ.

   - have identity     ... mail address
   - recieve messages  ... mailbox
   - process messeges  ... orderd mailbox
   - reply to messeges ... pre-addressed return letter

   エージェントは独立実体で, 自身の局所的な目的を目指して仕事をする.
   相互作用が適切に設計されていればエージェントは大局的仕事も達成する.

   CTMCP, Chapter 5 より.

   Agent をもちいるプログラミングを,
   Object-Oriented Programming と対比されて,
   Agent-Oriented Programming ということもある.

   ただし, Agent は必ずしも Object でなくてもよい. 2 つのうちのどちらか.

   - Object
   - Transition state-functions

*** Coordinator
    Agent のなかでほかの Agent をまとめる Agent を Coordinator という. 以下の性質をもつ.

    - 代理性 ・・・他の Agent の代理をして処理をおこなう. 処理の結果を Agent に通知.
    - 知性   ・・・ 他の Agent から情報をあつめを代表して判断を下す.
    - 移動性 ・・・他の Agent を代表して判断を下す.

    Master (Coordinator)-Slave Archtecture.
    - [[http://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%B9%E3%83%AC%E3%83%BC%E3%83%96][マスタースレーブ - Wikipedia]]

*** Stateless Agent
    あるメッセージを受信したときに, そのメッセージに応じてアクションをとる Agents.
    アクションは受信メッセージに依存する.

    Agent はひとつのスレッドと複数のポートをもつ. ボートは明示的変数 (Cell) と同義.

    この Port 以外は Immutable なデータ構造. Port のみがメモリ上に確保される.

*** State with Agent
    ポートの他に State (明示的状態) をもつこともある.

    処理の実行自体は Stream データ構造に入った function のプロシージャごとに実施する
    (Immutable and incremental) が, State によって Reply の方法を変える.

** Protocol
   Message の送信と受信のルール.

   [[http://ja.wikipedia.org/wiki/%E9%80%9A%E4%BF%A1%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB][- 通信プロトコル - Wikipedia]]

   プロトコルにしたがうことで, デッドロックを防ぐ.

*** BroadCast
    他の複数のエージェント (Multi-Agent) に通信を送る.

*** Contract Net
    契約ネットプロトコル.
    - [[http://en.wikipedia.org/wiki/Contract_Net_Protocol][Contract Net Protocol - Wikipedia, the free encyclopedia]]
    
** Ozma
   Multi-agent dataflow programmming を実現するための言語. Scala と Oz を合体させた.

   ピーターバンロイさん直々の説明動画は以下で見れる.
   - [[http://www.infoq.com/presentations/Ozma-Extending-Scala-with-Oz-Concurrency][Ozma: Extending Scala with Oz Concurrency]]

   github repository.
   - [[https://github.com/sjrd/ozma][sjrd/ozma]]

* Active Objects Programming (Object-Based Agent)
  オブジェクト指向におけるオブジェクトを,
  自ら判断し処理できる機能を持ったエージェントと呼ばれるモジュールに
  置き換えたもの.

  Object-Oriented Programming と Multi-Agent Programming の 2 つのパラダイムを
  合体させてできたパラダイム.

  オブジェクトの属性ではなくて振る舞いが重要視される.

  - [[http://itpro.nikkeibp.co.jp/word/page/10024992/][「エージェント指向」とは:ITpro]]
  - [[http://www.ogis-ri.co.jp/otc/hiroba/technical/agent/article/index.html][エージェント指向が目指すもの -INDEX-]]

  English の Wikipedia に OOP と AOP の対応比較表がある.

  - http://en.wikipedia.org/wiki/Agent-oriented_programming

* Mathmatics
  数学との関係性.
  - [[http://quanty.sakura.ne.jp/blog/2014/04/post-53.html][コンピュータと数学について - quanty のブログ]]

  関数型言語のベースには数学がある.
  - 群論
  - 圏論

  代数はプログラミング/ モデリングの数学的な基礎理論.

** Links
   
   - [[http://d.hatena.ne.jp/x76789/20100527/1274923567][代数とプログラミング・モデリングの関係とは? - x76789 の研究メモ]]
   - [[http://ja.wikibooks.org/wiki/Haskell/%E5%9C%8F%E8%AB%96][Haskell/ 圏論 - Wikibooks]]
   - [[http://www.iij-ii.co.jp/lab/techdoc/category/][プログラマのための圏論の基礎]]
   - [[http://usrnameu1.tumblr.com/post/43282442181][数学が専攻でないプログラマー屋さんが「それでも圏論を勉強したい」というのならば, まず意識改革が必要だと... - ktkr!!!]]
   - https://github.com/scalajp/introduction-to-category-theory-in-scala-jp/wiki

* SICP
** Chapter 1::        Building Abstractions with Procedures
  手続きによる抽象
  - 複数の単純な考えを合成して 1 つにする.
  - 2 つの考えを同時に見えるように 1 つのもので繋ぐ.
    その実在においてそれらに付随しているほかの考えからそれらを分離する

  |                      | procedures     | data      |
  |----------------------+----------------+-----------|
  | primitive element    | +, *, <, =     | 23, 1.738 |
  |----------------------+----------------+-----------|
  | means of combination | () combination |           |
  |                      | if             |           |
  |                      | cond           |           |
  |----------------------+----------------+-----------|
  | means of abstraction | defun          |           |

  言語は以下の仕掛けを有している.

*** Level0: 基本式 (プリミティブな手続きの構築)
    もっとも基本的な手続き.
      - which represent the simplest entities the language is concerned with,
      - 言語が関わるもっとも単純なものを表す.

   primitive expressions 基本式: 
   - which represent the simplest entities the language is concerned with,
   - 言語が関わるもっとも単純なものを表す.

 #+begin_src emacs-lisp
1, +, -
 #+end_src

*** Level1: 組合せ法 (組み合わせ手続きによる抽象の構築)
    複数の手続きを組み合わせて一つにした手続き.
      - by which compound elements are built from simpler ones.
      - より単純なものから合成物をつくる.

     Emacs Lisp では 組合せ (combination) は =()= で表現する.

 #+begin_src emacs-lisp
(* 1 1)
 #+end_src

*** Level2: 抽象化法 (名前つき値による抽象の構築)
    オブジェクトを値 (value) とする変数 (variable) を識別するものが名前.
    名前をつけることで, 値を識別する.

    Emacs Lisp では 名前つけは =defun= で表現する.

 #+begin_src emacs-lisp
(defun size () 2)
(size)
 #+end_src

*** Level3:  手続き定義 (名前つき手続きによる抽象の構築)
    名前付けは, 値だけでなくて手続きにもできる.
    - by which compound elements can be named and manipulated as units.
    - 合成物に名をつけ, 単一のもとして扱う.

    名前のつけられた手続き. これをいわゆる関数と呼ぶ.

 #+begin_src emacs-lisp
(defun square (x) (* x x))
 #+end_src

    手続き定義は, 細部をかくすことができる. いわゆる *手続き抽象* という.

*** Level4: 高階手続きによる抽象の構築
    手続きをあつかう手続きを高階手続きという
    - 手続きを引数にとる
    - 手続きを戻り値として返す

    #+begin_src emacs-lisp
   (square (square (square 2)))
    #+end_src

*** Level5: lambda (名前なし手続き による抽象の構築)
    高階手続きの引数にいちいち, 
    defun で定義された手続きをわかすのは煩わしい.

    名前なしの手続きを扱いたい. 
    プロセスを生み出す特殊形式を lambda という.
   
    Emacs Lisp では =lambda= で表現する.

    名前つき手続きは, 以下の糖衣構文となっている. 
    Lisp インタプリタは実際には以下のように解釈している.

 #+begin_src emacs-lisp
(defun square
    (lambda (x) (* x x))
 #+end_src

#+begin_quote
われわれはプログラマとして, プログラムの根底にある抽象をみつけ,
より強力な抽象化ができるように努めてなければならない.

高階手続きの重要さは, それにより抽象をプログラム言語の要素して
確かに表せ, 他の計算要素として扱えるようになる点にある.
#+end_quote

** Chapter 2::        Building Abstractions with Data
** Chapter 3::        Modularity, Objects, and State
** Chapter 4::        Metalinguistic Abstraction
** Chapter 5::        Computing with Register Machines

* Links
- [[http://www.ibm.com/developerworks/jp/opensource/library/itm-progevo1/][プログラミング言語の進化を追え: 第 1 回 サルでも分かるプログラミング言語の新潮流 (前篇)]]
- [[http://www.ibm.com/developerworks/jp/opensource/library/itm-progevo2/index.html][プログラミング言語の進化を追え: 第 2 回 サルでも分かるプログラミング言語の新潮流 (後篇)]]

