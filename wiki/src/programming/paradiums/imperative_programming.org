#+OPTIONS: toc:nil
#+TITLE: Imperative Programming

* Imperative Programming とは
  命令型プログラミング.
  計算をプログラム状態を変化させる文の列で記述するパラダイム.
  - [[http://ja.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0][命令型プログラミング - Wikipedia]]

  [[Imperative Programming]] とは, 
  Function paradigm に Cell (状態) の概念を加えたもの.

  #+begin_src language
  Imperative programming = Function paradigm + Cell
  #+end_src

  - Declarative Programing の対になる概念.
    Imperative vs Declaretive is also Stateful vs Stateless

  Function Paradigms と Imperative Paradigm の違いは,
  - Function 
    - 状態変化しない (Immunity)
    - 機能追加時にインタフェースの変更の影響度がおおきい.
  - Inperative
    - 機能追加時にインタフェースの変更の影響度がない.
      (モジュール性, モジュールプログラミング)
    - 状態変化する.

  - 実行するたびに, 内部の状態によって結果がことなる.(副作用)

  - 械語は命令から構成される
  低レベルから見た場合,
  プログラムの状態はメモリの内容によって定義され, 
  文としては機械語の命令が相当する. 
  
** Languaages
  - C 言語
  - アセンブリ言語
    
* Procedural Programming
  手続き型プログラミングと同義のこともある.
  
  手順やチェックリストはプログラムではないが,
  命令型プログラミングのスタイルに似たコンセプトである.
  それらのステップが命令であり, 実世界が状態を保持している.

  - [[http://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%96%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3][サブルーチン - Wikipedia]]

  - 関数 (かんすう) 引数をとり結果として値を返すもの.
  - 手続き (てつづき) 結果として値を返さないもの

* Explicite State
  明示的状態.
  
  - 生存期間が 2 度以上の手続的呼び出しに渡るような一つの状態.
  - 関数の実行の中に値をもつ.
  - 手続きの引数に現れないもの.

  同様なことを関数型パラダイムで実現するためには, 仮引数に状態を持たないといけない.
  
* Cell
  Explicite State (明示的状態) を表す基本型. 二つの構成要素からなる.

  - 名前値 (Vaiue)
  - 単一代入格納域への参照 (Identifier)

#+begin_src oz
declare
fun {Reverse L}
   % 空リストの cell を生成
   Rs = {NewCell nil}
in
   % リストの各要素を取り出して内部 Cell に結合
   for X in L do
      Rs := X|@Rs
   end

   % 内部セルをリターンする.
   % Ruby っぽい!
   @Rs
end

{Show {Reverse [1 2 3 4]}}
#+end_src

** Loops
   - do -loop
   - while-loop
   - for-loop
   
