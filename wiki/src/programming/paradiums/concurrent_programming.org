#+OPTIONS: toc:nil
* Concurrenct Programming
  複数の相互作用を及ぼす計算タスクの (同時) 並行的実行をおこなうパラダイム.

  平行プログラミング. (並列プログラミングではない).

  - [[http://ja.wikipedia.org/wiki/%E4%B8%A6%E8%A1%8C%E8%A8%88%E7%AE%97][並行計算 - Wikipedia]]
  - [[http://ja.wikipedia.org/wiki/%E4%B8%A6%E5%88%97%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0][並列計算 - Wikipedia]]

  Multiple progressing activities that exist at the same time
  Activities that can communicate and synchronize

  - Communicate: information passes from one activity to another
  - Synchronize: an activity waits for another to perform a specific action

  平行プログラミングには 3 つの代表的なパラダイムがある.

  - Detarministic Dataflow
  - Message-passing concurrency (Erlang and Scala actor)
  - Shared-State concurrency (Java monitors)

  その他, 並列実行の競合をさけるためには, 以下ようなパラダイムもある.

  - Lazy Deterministic Dataflow
  - Constraint Programming

** Thread Safe
   複数のスレッドからどのような順番でアクセスされても正しくふるまうこ
   とである.呼び出し側にアクセス順番を考慮させたり, 同期化を求めるよう
   なことはしてはならない.

** Mutual exclusion locks
   排他制御.

   - [[http://ja.wikipedia.org/wiki/%E6%8E%92%E4%BB%96%E5%88%B6%E5%BE%A1][排他制御 - Wikipedia]]

   define a "critical section" that can only be executed by one thread at a time

*** Reentrant
    リエントラント.

    プログラムやサブルーチンが, 実行の途中で割り込まれ,
    その実行が完了する前に再び呼び出され実行されても安全だという性質.

    - [[http://ja.wikipedia.org/wiki/%E3%83%AA%E3%82%A8%E3%83%B3%E3%83%88%E3%83%A9%E3%83%B3%E3%83%88][リエントラント - Wikipedia]]

    複数のスレッドから同時に呼び出されても正しく動作する関数.

*** Spin Lock
    スピンロック.

    スレッドがロックを獲得できるまで単純にループ (スピン)
    して定期的にロックをチェックしながら待つ方式.
    
    - [[http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%94%E3%83%B3%E3%83%AD%E3%83%83%E3%82%AF][スピンロック - Wikipedia]]

*** Reentrant Lock
    再入可能ロック. Sleep Lock

    Android API:  [[http://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html][ReentrantLock | Android Developers]]

* Shared-State concurrency: 共有メモリモデル
** ReentrantLock 
   A reentrant mutual exclusion lock that extends 
   the built-in monitor lock capabilities.

   - http://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html

** ReadWriteLock
   Readers-Writerlock, ともいわれる.

   WriteLock Improves performance when resources are read 
   much more often than written.

   It allows multiple threads to read a certain resource,
   but only one to write it, at a time. 

   - [[http://tutorials.jenkov.com/java-concurrency/read-write-locks.html][Read / Write Locks in Java]]

** Semaphore 
   A non-negative integer that controls the access of 
   multiple threads to a limited number of shared resources

   A semaphore can be atomically incremented & decremented to
   control access to a shared resource

   並列プログラミング環境での複数のプロセスが共有する資源に
   アクセスするのを制御する際の単純だが便利な抽象化を
   提供する変数または抽象データ型

   - [[http://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%95%E3%82%A9][セマフォ - Wikipedia]]

   語源は, 腕木式信号機.

*** Counting Semaphores
    カウンティングセマフォ. 任意個の資源を扱うセマフォ

*** Binary Semaphores
    バイナリセマフォ.
    値が 0 と 1 に制限されている (ロック/ アンロック,
    使用可能/ 使用不可の意味がある) セマフォ.

    ミューテックスとも.
    
*** Java
   -  [[http://docs.oracle.com/javase/jp/6/api/java/util/concurrent/Semaphore.html][Semaphore (Java Platform SE 6)]]

** Condition Value
   条件変数. UNIX の用語.ミューテックスと一緒に使用し,
   スレッドをブロックして別のスレッドからのシグナルを待たせる.

   通知がくることがポイント.

   - [[http://hiroakiuno.hatenablog.com/entry/20070321/p1][ミューテックス, セマフォ, 条件変数, 違いを整理してみよう - Schi Heil と叫ぶために]]

   Block thread (s) until some condition (s) becomes true
   - wait
   - signal
   - signalAll

*** ConditionObject (Java)
    Java では, ConditionObject として提供される.
    - [[http://docs.oracle.com/javase/jp/6/api/java/util/concurrent/locks/AbstractQueuedSynchronizer.ConditionObject.html][AbstractQueuedSynchronizer.ConditionObject (Java Platform SE 6)]]

** Barrier
    他のスレッドをある地点でまち合わせて, 一度にさせること.
    競馬のスタートバーのようなイメージ.

    または, 旅行のツアーガイド. 集合時間が決められていてる.

*** CountDownLatch (Java)
   Allows one or more threads to wait until a set of
   operations being performed in other threads complete

   - [[http://docs.oracle.com/javase/jp/6/api/java/util/concurrent/CountDownLatch.html][CountDownLatch (Java Platform SE 6)]]

** Java Links
   - [[http://argius.hatenablog.jp/entry/20131226/1388068061][Concurrency Utilities を使った並列処理・マルチスレッドのおさらい - argius note]]
   - [[http://builder.japan.zdnet.com/sp_oracle/weblogic_2013/35034509/][Java EE 7 で並列処理がケタ違いに速くなる! 使いこなしのポイントは? ── Java Day Tokyo 2013 レポート - builder by ZDNet Japan]]
   - [[http://www.ibm.com/developerworks/jp/java/library/j-5things5.html#ibm-pcon][今まで知らなかった 5 つの事項: java.util.concurrent 第 2 回]]

* Message-passing concurrency: メッセージ伝達モデル
  Scala や Erlang で採用されている方法.

* Detarministic Dataflow: 決定性データフローモデル
  決定性データフロープログラミング.

  関数型パラダイムをべースにしている.
  - [[http://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%95%E3%83%AD%E3%83%BC%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0][データフロープログラミング - Wikipedia]]

  スレッド処理, 時間経過をともなうのにも関わらず, 実行結果はつねに一定!
  これが, Deterministic と名づけられた所以.

  Deerministic is not Obsarbable.

  アイデア自体は 70 年代に提示されたアイデアのに, 今まで忘れ去れれていた.

  - MultiCore, ManyCore Processing (マルチコア, メニーコア)
  - Destributed Computing
  - Concurrent Deployment
  - BigData Computing

  以上のようなキーワードとともに,
  21 世紀の今こそ注目をあびるべき, 次世代プログラミングパラダイム!
  (とピーターバンロイさんがいっていた)

  CTMCP, Chapter 4

  - 関数型プログラミングを一般化した. 関数型に並行性を加えたもの.
  - 並行性は透過. 途中でスレッドをいくら
    追加しても, 削除しても, 待たせても, 実行順序によって結果が変わらない!

** Unbound Value
   メモリ上に値が存在しないが, 宣言された変数.

   - C/C++ では, ゴミ (不定データ) が格納されている.
   - Java は 0 初期化されている.
   - Prolog は実行時にエラー終了する.
   - Oz は値が bind されるまでまちあわせる.

** DataFlow Value
   Unbound Value が bind されるまでプログラムの実行を待ち合わせるような宣言的変数.

   Bind されたときの実行を Dataflow Execution という.

   あるスレッドがデータフロー変数を利用しようとしたとき,
   その変数に値が束縛されていない場合は, 
   別のスレッドが束縛するまで待ち合わせを行う.

   このデータフロー変数によって, No Race Conditions (非強豪状態) を実現する!
   (これがもっともこのパラダイムで大事)
   - [[http://ja.wikipedia.org/wiki/%E7%AB%B6%E5%90%88%E7%8A%B6%E6%85%8B][競合状態 - Wikipedia]]
      
** Threads
   プログラムの処理の単位 (Thread of Program)
   - Each thread is sequential.
   - Each thread is independent of the others.
   - Two threads can communicate if they share a variable

   Wikipedia では CPU のひとつの処理単位と定義されている.
   - ttp://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)][スレッド (コンピュータ) - Wikipedia]]

** Streams
   リストの終端が Unbound Variable であるもの.
   Streams は 2 つの Thread 間の通信チャネルとして利用できる.

   すべての List 関数は Agent になりえ,
   すべての関数型言語のテクニックは決定性データフローに応用できる.

*** Producer-Consumer Pattern
   - Producer
     ストリームのデータを生成.
   - Consumer
     Producer から生成されたストリームのデータを受け取ってアクションを起こす.

*** Pipeline Pattern
   - Transformer
   Producer と Consumer との間を仲介する 
   - Pipeline
     Producer と Consumer と Transformer の間を仲介する.
     + [[http://en.wikipedia.org/wiki/Pipeline_(software)][Pipeline (software) - Wikipedia, the free encyclopedia]]
     + [[http://ja.wikipedia.org/wiki/%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E5%87%A6%E7%90%86][パイプライン処理 - Wikipedia]]

   単一格納変数 (single-assined value) の性質 (一度しか代入できない)
   を同期のスレッド間通信のための手段にする.

*** Agents
    平行スレッドのなかで Stream を読み書きするものを Agents という.
   
   #+begin_src language
   S1=1|2|3..              S2=1|4|9..
   Produce ----------> Transformer --------> Consuemer
   S1={Prod 1}          S2={Trans S1}         {Disp S2}
   #+end_src

** NonDeterminism
   非決定性. プログラムの実行結果を決定ことができるシステムの能力.

   Nondeterminism は managed されることが必須!
   しかし, 制御がとても難しい.
   だからこそ, Determinism が重要なのだと.

*** example
    X になにが設定されるかは, システムが決める.
    プログラマが決めることはできない.

    #+begin_src oz
    declare X = {NewCell 0}
    therad X:=1 end
    therad X:=2 end
    #+end_src
    
*** Scheduler
    どのスレッドを実行するかを決める, システムの一部をスケジューラという.

** Concurrency Transparency
   平行透過性.

   複数のユーザーが 1 つのリソースを共有して使用するとき,
   それらユーザーに競合状態を気づかせてはならない.
   - [[http://ja.wikipedia.org/wiki/%E9%80%8F%E9%81%8E%E6%80%A7_(%E6%83%85%E5%A0%B1%E5%B7%A5%E5%AD%A6)][透過性 (情報工学) - Wikipedia]]

*** concurrency for dummies
    平行性のためのダミースレッド.

    平行透過性のためには, いくらスレッドを動的に追加しようとも, 削除しようとも,
    最終的に得られる結果はかわらない (Deterministic!)

    それは, 
    スレッドの各処理を incremental に動作させることで可能となる 

*** ForCollect
    手続き型の for 文と 宣言型の不定性を共存させる for 文.

    Cell と higher-order-programming をつなげる概念.

    Map や Filter の一般化と言える.

#+begin_src oz
proc {ForCollect Xs P Ys}
   Acc={NewCell Ys}
   proc {C X} R2 in @Acc=X|R2 Acc:=R2 end
in
   for X in Xs do {P C X} end @Acc=nil
end
#+end_src

   - List に適用すれば, リスト内包表記.
   - Stream に適用すれば, 平行エージェント.

*** List Complehention: リスト内包表記
    ForCollect をリストに適用したもの.

    python や haskell は言語で実装されている.
    
* Stream Processing
  並列処理を実現するプログラミング手法の一つ.
  - [[http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%BB%E3%83%97%E3%83%AD%E3%82%BB%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0][ストリーム・プロセッシング - Wikipedia]]

  大規模なデータをリアルタイムに処理したいときに利用する.
  Batch Processing では, ダメ. 完了まで, 待たなければいけない.

  センサー情報をリアルタイムで機械学習で処理するような使い方.

** Apache Storm
   Twitter 社がオープンソースにした分散リアルタイム解析ソフト.
   - http://www.slideshare.net/AdvancedTechNight/twitterstorm
   - http://www.slideshare.net/takanorig/storm-31157560?next_slideshow=1
    
* Books
** Archtecture Patterns
   Archtecture Patterns のページも参照のこと.

  POSA2
  - [[http://www.dre.vanderbilt.edu/~schmidt/POSA/POSA2/][Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects]]

  結城先生のマルチスレッドに関する本. 内容は POSA2 の真似.
  - [[http://www.hyuki.com/dp/dp2.html][『増補改訂版 Java 言語で学ぶデザインパターン入門マルチスレッド編』]]  
