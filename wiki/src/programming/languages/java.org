#+OPTIONS: toc:nil
* Java
** Java プログラム実行方法
*** コンパイル
    - javac コマンドでコンパイル.
    - .java から .class ファイルを生成する.

#+begin_src bash
javac -cp jar/netty-3.6.10.Final.jar src/Program.java
#+end_src

*** 実行
    - java コマンドで実行.
    - -cp で classpath を指定.

#+begin_src bash
java -cp .;jar/netty-3.6.10.Final.jar;src Program
#+end_src

    [[http://www.syboos.jp/java/doc/java-classpath-and-execute-by-sample.html][サンプルから学ぶ classpath の設定と Java プログラムの実行 - Java 入門]]

** Hello World

   #+begin_src java
public class HelloWorld {
  public static void main (String[] args) {
    System.out.println ("Hello World !!");
  }
} 
   #+end_src

** ビルドツール
*** Apatch Ant
*** Apatch Maven
*** Gradle
**** 特徴
    次から引用: [[http://www.atmarkit.co.jp/ait/articles/1403/14/news034.html][ビルドツール Gradle のインストールと使い方 - ＠ IT]]

    - Groovy でビルド手順を記述
    - Apache Ivy ベースの強力な依存関係管理
    - 人気の IDE (Eclipse, NetBeans) でも使える
    - Ant ビルドの呼び出しもできる

* Java 文法
** interface
   内容に抽象メソッドしか持たないクラスのようなもの.

#+begin_src java
class InterfaceImpl implements Interface1, interface2, interface3 {
	...
}
#+end_src

** extend
   継承.

** interface,extend,implement のちがい
   誤解しやすいので整理しておく.

   - [[http://oshiete.goo.ne.jp/qa/111300.html][interface,extend,implement のちがい - Java - 教えて!goo]]

   以下の関係がある.

   - interface  と  implements
   - class  と extends

   Java では, 多重継承を許可していない. ひとつの class を extends で継承し
   たら, 別の暮らすは interface として宣言して, implements として Mix-in
   する 必要がある. Ruby でいうところの, < と include の関係と同じ.

** Enum
   識別子をそのまま有限集合として持つ抽象データ型.
   とくに, Java では Enum は特殊なクラス.
   
   Effective Java での Enum まとめ.

*** int enum パターン
    名前つき int 定数のグループを宣言すること.バッドノウハウ.

#+begin_src java
public static final int FOO = 0;
public static final int BAR = 1;
#+end_src

    - コンパイラによる型検査の恩恵を受けることができない.
    - 同じ名前がついたものを名前空間で区別することができない.
    - 変更により再コンパイルが必要.
    - 表示可能な文字列へ変換する方法かない.
    - int と enum では実効速度はそれほどかわらない.

*** 定数固有メソッド実装 (constant-specific method implementation)
    enum 定数に対して振る舞いを関連付けるための方法.

    パターン適用前.

    #+begin_src java
public enum Operation {
	PLUS, MINUS;

	double apply (double x, double y) {
		switch (this) {
		case PLUS:  return x + y;
		case MINUS: return x - y;
		}
		throw new AssertionError () ("Unknown op:" + this);
	}
}
    #+end_src

    パターン適用後. enum 型で抽象メソッドを宣言して,
    定数固有クラス本体で, 定数ごとに具象メソッドで
    その抽象メソッドをオーバーライド.

    switch 文を排除するので, エレガント!! 抽象メソッドによって実装をカプセル化.

#+begin_src java
public enum Operation {
	PLUS  { double apply (double x, double y) {return x + y;} },
	MINUS { double apply (double x, double y) {return x - y;} };

	abstract double apply (double x, double y);
}
#+end_src

*** 定数固有クラス
    さらに, 定数固有データと実装を組み合わせることで, 強力な表現力を.

#+begin_src java
public enum Operation {
	PLUS ("+")  { double apply (double x, double y) {return x + y;} },
	MINUS ("-") { double apply (double x, double y) {return x - y;} };

	private final String symbol;
	Operation (String symbol) { this.symbol = symbol; }
	@Override public String toString () { return symbol; }

	abstract double apply (double x, double y);
}
#+end_src

   Enum の toString は定数表現は 文字列へ変換することもできる.
   
*** 戦略 Enum (Strategy Enum)
    抽象メソッドをクラスに変更して外部から与えてやるようにすれば,
    これはいわゆる Strategy Pattern だ.

    評価戦略を外部から与えて, Operation は委譲で評価をする.

#+begin_src java
public enum Operation {
	PLUS (StrategyType.PLUS), MINUS (StrategyType.MINUS);

	private final Strategy strategy;

	Operation (EvaluateType type) { 
		this.type = type;
	}

	double apply (double x, double y) {
		return type.evaluate (x, y);
	}

	// Strategy Enum Type
	private enum EvaluateType {
		PLUS  { double apply (double x, double y) {return x + y;} },
		MINUS { double apply (double x, double y) {return x - y;} };

		abstract double apply (double x, double y);		
	}
}
#+end_src

*** enum 定数と値の関連付けに ordinal をつかわないこと
    enum と関連付けられた int 値を取得する
    メソッドとして ordinal メソッドがある.

    これを定数と値を関連付けるときには, 使わない.
    なぜなら, コードの修正で, 振られる番号が変わるから.

#+begin_src java
public enum Number {
	ONE, TWE;
	public int getNumber{ return ordinal () + 1; }
}
#+end_src

   代わりにインスタンスフィールドを利用すればよい.

#+begin_src java
public enum Number {
	ONE (1), TWE (2);
	private final int number;
	Number (int number) { this.number = number;}
	public int getNumber{ return number; }
}
#+end_src

*** 集合と集合の対応づけに序数インデックス (配列) をつかわない
    2 つの集合を対応付けるときには, 配列をつかうよりもいい方法がある.

    それは, EnumMap. EnumMap は内部実装は配列でされているものの,
    インデックスを意識する必要がないというメリットがある.

    配列をインデックスするために序数を使用することが適切であることはほ
    とんどない.代わりに, EnumMap を使用すること.

    関連が多次元ならば, EnumMap<..., EnumMap<...>> 
    というように連なっていく.

#+begin_src java
Map<Herb.Type, Set<Herb>> herbsByType =
	new EnumMap<Herb.Type, Set<Herb>>(Herb.Type.class);
for (Herb.Type t : Herb.Type.values ())
	herbsByType.put (t, new HashSet<Herb>());
for (herb h: garden)
	herbsBytpe.get (h.type).add (h);
#+end_src
     
** 内部クラス: Inner Class
   他のクラスの内部に宣言されたクラス. ネストクラスともいう.

   以下の 4 つに分類できる
   - static メンバクラス
   - 非 static メンバクラス
   - 無名クラス
   - ローカルクラス

   内部クラスの主な役割は, 外側のクラスの Utility.

*** static メンバクラス
    とくに理由がない限り, 内部クラスは private static をつける.

    static をつけないと, 親のクラスがインスタンス化されるとともに,
    子もインスタンス化される.

    それはすなわち, 不必要な時間とメモリの消費になるので.
    
*** 非 static メンバクラス
    主な使いどころは, Adapter パターンを委譲で実現するとき.
    - [[http://ja.wikipedia.org/wiki/Adapter_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3][Adapter パターン - Wikipedia]].

    ジェネリックスも合わせて利用される.

*** 無名クラス
    主な使用目的は, 関数オブジェクトを生成するため.
    
    Java7 以前は, Java でクロージャを実現するためには,
    無名クラスを利用する必要がある. 

    Java8 だと lambda があるので, 無名クラスの使いどころがないかも.

    無名クラスは, プログラムの途中にかかれるので,
    可読性のためには, せいぜい 10 行程度の短いものが適切.

    - [[http://futurismo.biz/archives/2752][Java の無名クラスにパラメータを渡す方法のメモ | Futurismo]]

*** ローカルクラス
    あまりつかわない.
    
* Cuncurrency 
** Thread
   Java で Thread を利用する方法は 2 つある.
   - [[http://www.javaroad.jp/java_thread3.htm][Java の道:スレッド (3. スレッドの作成)]]

*** Thread の継承
    Thread クラスを利用する.
    #+begin_src java
public class MyThread extends Thread {
	public void run () {
		// code to run
	}
}

Mythread myThread = new MyThread ();
myThread.start ();
    #+end_src

*** Runnable I/F の実装
    スレッドを実装するクラスが
    別のクラスのサブクラスでなければならない時に Runnable インタフェースを使用する. 
    Java は多重継承をサポートしていないので.

#+begin_src java
public interface Runnable {
	public void run ();
}

public class Myrunnable implements Runnable {
	public void run () {
		// code to run
	}
}

Myrunnable myRunnable = new Myrunnable ();
new Thread (myRunnable).start ();
#+end_src


    - [[http://www.techscore.com/tech/Java/JavaSE/Thread/2-2/][2. スレッドの実行 (2) | TECHSCORE (テックスコア)]]

** ExecuterService
   - [[http://java.keicode.com/lang/multithreading-executor.php][ExecutorService の使い方 - Java 入門]]

*** ThreadPool
   複数のスレッドをあらかじめ作成して待機させておき,
   タスクが来たら待っているスレッドにタスクを割り当てて
   処理を開始させる仕組みをスレッドプールと言います
   
* Java Servlets
  サーバ上でウェブページなどを動的に生成したりデータ処理を行うために,
  Java で作成されたプログラム及びその仕様.JSP.

  - [[http://ja.wikipedia.org/wiki/Java_Servlet][Java Servlet - Wikipedia]]

** Web.xml
   クライアントから受信したリクエストをどの Servlet に届けるかを定めた情報.
   port のような役割??

** Marshalling
   マーシャリング. 異なる 2 つのシステム間で, データを交換できるように
   データを操作する処理

   - [[http://en.wikipedia.org/wiki/Marshalling_(computer_science)][Marshalling (computer science) - Wikipedia, the free encyclopedia]]

* Java Annotation
  クラスやメソッド, パッケージに対してメタデータとして注釈を記入する.

  - [[http://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3][アノテーション - Wikipedia]]

  3 つの種類がある.

  - マーカー・アノテーション ・・・ データが無く名前だけを持つアノテーション.
  - 単一値アノテーション ・・・ データを一つだけ持つアノテーション. 見かけはメソッド呼び出しに似ている.
  - フル・アノテーション ・・・複数のデータを持つアノテーション.
* Framework
** Spring
   - 公式; http://projects.spring.io/spring-framework/
   - [[http://ja.wikipedia.org/wiki/Spring_Framework][Spring Framework - Wikipedia]]

** Netty
   Netty is an asynchronous event-driven network application framework
   for rapid development of maintainable high performance protocol servers & clients. 

   - http://netty.io/index.html

*** 特徴
   - Java NIO フレームワーク.
   - 簡単に TCP/IP のサーバが作れる.

   NIO はファイルにアクセスするための Java library.

*** Documents
    - 公式 Document: http://docs.jboss.org/netty/3.2/guide/html/

    Getting Started の日本語訳.素晴らしい!

    - [[http://d.hatena.ne.jp/sifue/20121013/1350140603#][Java でノンブロッキング IO を使ったネットワークアプリを学ぶのに最適な Netty 3.5 系の Getting Started を日本語訳しました - しふーのブログ]]

*** Links
    - [[http://acro-engineer.hatenablog.com/entry/20130321/1363881318][イベントドリブンで通信処理を行える Netty 導入編 - Taste of Tech Topics]]
    - [[http://d.hatena.ne.jp/Kazuhira/20120325/1332675858#][Netty の Pipeline と ChannelHandler の関係を学ぶ - Starlight]]

* 開発環境・ツール
** Emacs
 - [[http://futurismo.biz/archives/2462][Eclim で Emacs と Eclipse のいいとこどり!Emacs で Java 開発環境を構築した]]

* Effective Java[Book]
  - [[http://www001.upp.so-net.ne.jp/yshibata/myhomepage/errata/ej2eerrata.html][『 Effective Java 第 2 版』正誤表]]
  - Effective Java のソース: [[https://github.com/marhan/effective-java-examples][marhan/effective-java-examples]]
  - [[http://qiita.com/disc99/items/ccdcbe797b077dd0c54d][Effective Java のまとめのまとめ - Qiita]]

** 第 2 章 オブジェクトの生成と消滅 (項目 1 〜 項目 7)
** 第 3 章 すべてのオブジェクトに共通のメソッド (項目 8 〜 項目 12)
** 第 4 章 クラスとインタフェース (項目 13 〜項目 22)
   継承をやたらと敵対視している
   - 継承よりもコンポジションを選ぶ
     継承は不必要なメソッドを公開する.
     つまり, 継承はカプセル化を破る.
     
   - 継承をつかうならば設計を文書化する, でなければ禁止だ.

   - 抽象クラスよりもインタフェースを選ぶ
     実装の観点では,
     + 抽象クラスはメソッドに対する実装を含むことを許されている.
     + インタフェースはメソッドに対する実装を含むことを許されていない.

     機能の観点では,
     + 抽象クラスはある機能の実装を強制する.
     + インタフェースは任意の機能を混ぜ合わせる.

     階層化の観点では, 
     + 抽象クラスは物事を階層化することに優れる.
     + インタフェースは階層を持たないものをまとめることに優れる.

     インタフェースは, 階層を持たない型システムを構築する.

** 第 5 章 ジェネリックス (項目 23 〜 29)
** 第 6 章 enum とアノテーション (項目 30 〜 項目 37)
** 第 7 章 メソッド (項目 38 〜 項目 44)
** 第 8 章 プログラミング一般 (項目 45 〜 項目 56)
** 第 9 章 例外 (項目 57 〜 項目 65)
** 第 10 章 並行性 (項目 66 〜 項目 73)
** 第 11 章 シリアライズ (項目 74 〜 項目 78)
