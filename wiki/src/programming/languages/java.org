#+OPTIONS: toc:nil
* Java
** Java プログラム実行方法
*** コンパイル
    - javac コマンドでコンパイル.
    - .java から .class ファイルを生成する.

#+begin_src bash
javac -cp jar/netty-3.6.10.Final.jar src/Program.java
#+end_src

*** 実行
    - java コマンドで実行.
    - -cp で classpath を指定.

#+begin_src bash
java -cp .;jar/netty-3.6.10.Final.jar;src Program
#+end_src

    [[http://www.syboos.jp/java/doc/java-classpath-and-execute-by-sample.html][サンプルから学ぶ classpath の設定と Java プログラムの実行 - Java 入門]]

** Hello World

   #+begin_src java
public class HelloWorld {
  public static void main (String[] args) {
    System.out.println ("Hello World !!");
  }
} 
   #+end_src

** ビルドツール
*** Apatch Ant
*** Apatch Maven
*** Gradle
**** 特徴
    次から引用: [[http://www.atmarkit.co.jp/ait/articles/1403/14/news034.html][ビルドツール Gradle のインストールと使い方 - ＠ IT]]

    - Groovy でビルド手順を記述
    - Apache Ivy ベースの強力な依存関係管理
    - 人気の IDE (Eclipse, NetBeans) でも使える
    - Ant ビルドの呼び出しもできる

* Java 文法
** interface
   内容に抽象メソッドしか持たないクラスのようなもの.

#+begin_src java
class InterfaceImpl implements Interface1, interface2, interface3 {
	...
}
#+end_src

** extend
   継承.

** interface,extend,implement のちがい
   誤解しやすいので整理しておく.

   - [[http://oshiete.goo.ne.jp/qa/111300.html][interface,extend,implement のちがい - Java - 教えて!goo]]

   以下の関係がある.

   - interface  と  implements
   - class  と extends

   Java では, 多重継承を許可していない. ひとつの class を extends で継承し
   たら, 別の暮らすは interface として宣言して, implements として Mix-in
   する 必要がある. Ruby でいうところの, < と include の関係と同じ.


* Cuncurrency 
** Thread
   Java で Thread を利用する方法は 2 つある.
   - [[http://www.javaroad.jp/java_thread3.htm][Java の道:スレッド (3. スレッドの作成)]]

*** Thread の継承
    Thread クラスを利用する.
    #+begin_src java
public class MyThread extends Thread {
	public void run () {
		// code to run
	}
}

Mythread myThread = new MyThread ();
myThread.start ();
    #+end_src

*** Runnable I/F の実装
    スレッドを実装するクラスが
    別のクラスのサブクラスでなければならない時に Runnable インタフェースを使用する. 
    Java は多重継承をサポートしていないので.

#+begin_src java
public interface Runnable {
	public void run ();
}

public class Myrunnable implements Runnable {
	public void run () {
		// code to run
	}
}

Myrunnable myRunnable = new Myrunnable ();
new Thread (myRunnable).start ();
#+end_src


    - [[http://www.techscore.com/tech/Java/JavaSE/Thread/2-2/][2. スレッドの実行 (2) | TECHSCORE (テックスコア)]]


** ExecuterService
   - [[http://java.keicode.com/lang/multithreading-executor.php][ExecutorService の使い方 - Java 入門]]

*** ThreadPool
   複数のスレッドをあらかじめ作成して待機させておき,
   タスクが来たら待っているスレッドにタスクを割り当てて
   処理を開始させる仕組みをスレッドプールと言います
   
* Java Servlets
  サーバ上でウェブページなどを動的に生成したりデータ処理を行うために,
  Java で作成されたプログラム及びその仕様.JSP.

  - [[http://ja.wikipedia.org/wiki/Java_Servlet][Java Servlet - Wikipedia]]

** Web.xml
   クライアントから受信したリクエストをどの Servlet に届けるかを定めた情報.
   port のような役割??

** Marshalling
   マーシャリング. 異なる 2 つのシステム間で, データを交換できるように
   データを操作する処理

   - [[http://en.wikipedia.org/wiki/Marshalling_(computer_science)][Marshalling (computer science) - Wikipedia, the free encyclopedia]]

* Java Annotation
  クラスやメソッド, パッケージに対してメタデータとして注釈を記入する.

  - [[http://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3][アノテーション - Wikipedia]]

  3 つの種類がある.

  - マーカー・アノテーション ・・・ データが無く名前だけを持つアノテーション.
  - 単一値アノテーション ・・・ データを一つだけ持つアノテーション. 見かけはメソッド呼び出しに似ている.
  - フル・アノテーション ・・・複数のデータを持つアノテーション.
* Framework
** Spring
   - 公式; http://projects.spring.io/spring-framework/
   - [[http://ja.wikipedia.org/wiki/Spring_Framework][Spring Framework - Wikipedia]]

** Netty
   Netty is an asynchronous event-driven network application framework
   for rapid development of maintainable high performance protocol servers & clients. 

   - http://netty.io/index.html

*** 特徴
   - Java NIO フレームワーク.
   - 簡単に TCP/IP のサーバが作れる.

   NIO はファイルにアクセスするための Java library.

*** Documents
    - 公式 Document: http://docs.jboss.org/netty/3.2/guide/html/

    Getting Started の日本語訳.素晴らしい!

    - [[http://d.hatena.ne.jp/sifue/20121013/1350140603#][Java でノンブロッキング IO を使ったネットワークアプリを学ぶのに最適な Netty 3.5 系の Getting Started を日本語訳しました - しふーのブログ]]

*** Links
    - [[http://acro-engineer.hatenablog.com/entry/20130321/1363881318][イベントドリブンで通信処理を行える Netty 導入編 - Taste of Tech Topics]]
    - [[http://d.hatena.ne.jp/Kazuhira/20120325/1332675858#][Netty の Pipeline と ChannelHandler の関係を学ぶ - Starlight]]

* 開発環境・ツール
** Emacs
 - [[http://futurismo.biz/archives/2462][Eclim で Emacs と Eclipse のいいとこどり!Emacs で Java 開発環境を構築した]]

* Effective Java[Book]
  - [[http://www001.upp.so-net.ne.jp/yshibata/myhomepage/errata/ej2eerrata.html][『 Effective Java 第 2 版』正誤表]]
  - Effective Java のソース: [[https://github.com/marhan/effective-java-examples][marhan/effective-java-examples]]
  - [[http://qiita.com/disc99/items/ccdcbe797b077dd0c54d][Effective Java のまとめのまとめ - Qiita]]

** 第 2 章 オブジェクトの生成と消滅 (項目 1 〜 項目 7)
** 第 3 章 すべてのオブジェクトに共通のメソッド (項目 8 〜 項目 12)
** 第 4 章 クラスとインタフェース (項目 13 〜項目 22)
** 第 5 章 ジェネリックス (項目 23 〜 29)
** 第 6 章 enum とアノテーション (項目 30 〜 項目 37)
** 第 7 章 メソッド (項目 38 〜 項目 44)
** 第 8 章 プログラミング一般 (項目 45 〜 項目 56)
** 第 9 章 例外 (項目 57 〜 項目 65)
** 第 10 章 並行性 (項目 66 〜 項目 73)
** 第 11 章 シリアライズ (項目 74 〜 項目 78)
