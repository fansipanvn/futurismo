#+OPTIONS: toc:nil
* Scala
** Scala 開発環境
*** Emacs
- [[http://futurismo.biz/archives/2449][Emacs で Scala 開発環境を構築 (Ensime) | Futurismo]]

* 評価戦略
  Scala は通常 Call-by-Value だが, 
  =>を用いることで Call-by-Name で評価する.

* High-Order Fuuction
** Function Type
#+begin_verse
The type A => B is the type of a function that takes 
an argument oftype A and returns a result of type B .
So, Int => Int is the type of functions that map integers to integers.
#+end_verse

** 無名関数 (Annonimous Function)
(x: Int) がパラメータ, x * x * x は Body.

#+begin_src scala
(x: Int) => x * x * x
#+end_src

*** 糖衣構文
#+BEGIN_HTML
<blockquote>
An anonymous function ( x 1 : T 1 , ..., x n : T n )  E can always be
expressed using def as follows:

def f ( x 1 : T 1 , ..., x n : T n ) = E ; f

where f is an arbitrary, fresh name (that's not yet used in the program)
</blockquote>
#+END_HTML

** カリー化

*  Data and Abstraction
** trait
Java のインターフェースみたいなもの

** class

* Pattern Matching
  条件分岐のための記法.
  もう, 「条件分岐は match 式, if 文は三項演算子」くらいの勢い.

  Java:

#+begin_src text
switch ( <セレクター式> ){ 
  case 場合 : 処理
  ...
}
#+end_src

Scala の match 式:

#+begin_src text
<セレクター式> match { 
  case パターン => 処理
  ...
}
#+end_src

- [[http://yuroyoro.hatenablog.com/entry/20100317/1268819400][Scala 的な考え方 - Scala がとっつきにくいと思っている人へ - ゆるよろ日記]]

* Lists
* Collections

* Monad
  モナドとは, 関数型言語で, 
  参照透明性を保持しながら手続き型的な記述をするための枠組み.

  モナドが理解できた時, 悟りがひらける.
  - [[http://itpro.nikkeibp.co.jp/article/COLUMN/20091023/339329/][刺激を求める技術者に捧げる Scala 講座 - 第 14 回 関数脳のつくり方
    Second Season  ~モナドで悟りをひらく~:ITpro]]

* Rx
  Reactive Programming のための Scala ライブラリ.

  |        | 単数      | 複数          |
  |--------+-----------+---------------|
  | 同期   | Try[T]    | Iterable[T]   |
  |--------+-----------+---------------|
  | 非同期 | Future[T] | Observable[T] |
  
** Try
   例外をあつかうためのモナド. A monad that handles exceptions.
   

   Option 型の派生. Scala には例外処理の書き方としては、
   - try, catch,finally
   - Option 型 Try
   の２つがある.

   - [[http://qiita.com/yharada/items/15f88e5bbf44833b5ed7][scala.util.Try を使いこなそう - Qiita]]
   - [[http://yuroyoro.hatenablog.com/entry/20100719/1279519961][Scala での例外処理 - Either,Option,util.control.Exception - ( ꒪⌓꒪) ゆるよろ日記]]
   - [[http://www.slideshare.net/TakashiKawachi/scala-16023052][Scala での例外処理]]

** Future
   例外と遅延扱うモナド. A monad that handles exceptions and latency.

   Future は、ある時点において利用可能となる可能性のある値を保持する
   オブジェクトだ。 この値は、なんらかの計算結果であることが多い。
   
   その計算が例外とともに失敗する可能性があるため、
   Future は計算が例外を投げる場合を想定して例外を保持することもできる。
   ある Future が値もしくは例外を持つとき、Future は完了したという。
   Future が値とともに完了した場合、Future はその値とともに成功したと
   いう。Future が例外とともに完了した場合、Future はその例外とともに
   失敗したという。

   - [[http://docs.scala-lang.org/ja/overviews/core/futures.html][Future と Promise - Scala Documentation]]
   - [[http://qiita.com/reki2000/items/13f94745c6db80a586a8][Scala - 言語によってちょっと違う Future/Promise をまとめてみた(3) - Qiita]]
   - [[http://tbpgr.hatenablog.com/entry/20130622/1371917891][Ruby で Future パターンを実装する - Tbpgr Blog]]
   - [[http://ja.wikipedia.org/wiki/Future][future - Wikipedia]]

*** promise
    メールボックスのようなもの.

** Iterable
** Observable

* Akka
* Document
- CheetSheet: http://docs.scala-lang.org/cheatsheets/    

* BookMarks
  Effective Java の Scala 版. ネットで日本語で無料.
  - [[http://twitter.github.io/effectivescala/index-ja.html#][Effective Scala]]
