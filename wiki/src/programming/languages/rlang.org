#+OPTIONS: toc:nil
* R
  統計のための 言語
  - [[http://www.r-project.org/][The R Project for Statistical Computing]]
   
  統計計算とグラフィック出力のための GNU プロジェクト.

  ベースは関数型言語だが, オブジェクト指向にも, 手続き型にもかくことができる
  - 統計解析部分は AT&T ベル研究所が開発した S 言語を参考にしている
    -> S は Dinamic Scoping にたいして R は Lexical Scoping
  - データ処理部分は Scheme の影響を受けている.

* 文法
  基本的な構成要素は以下のとおり
  - 環境 ... オブジェクトとシンボルの pair をもつ集合
  - オブジェクト ... もの
    - 関数 ... オブジェクトを操作するもの (関数オブジェクト)
  - シンボル ... ものにつけられた名前 (識別子)

** Basic 
*** Immutable
    R 言語において, 
    - 代入はオブジェクトのコピー
    - 高階関数 ... 関数の戻り値は関数オブジェクトのコピー

*** Binding to Symbol
    関数はシンボルに割り当てることができる.(ここが関数型パラダイム)
    インタプリタは
    - global environment からシンボルを探す.
    - Namespaces (Lexical Scope) からシンボルを探す.

*** Lexical Scoping
   
#+begin_src R :session ex :export both :results code
make.power <- function (n) {
    pow <- function (x) { x^n }
    pow
}

cube <- make.power (3)
square <- make.power (2)
#+end_src

*** print
**** explicite printing
     print 関数を利用する. 

 #+begin_src R :session ex :export both :results code
x <- 1
print (x)
 #+end_src

 #+BEGIN_SRC R
1
 #+END_SRC

**** auto-printing
     自動で形式を判別してで出力.

 #+begin_src R :session ex :export both :results code
x
 #+end_src

 #+BEGIN_SRC R
1
 #+END_SRC

 #+begin_src R :session ex :export both :results code
msg <- "hello"
 #+end_src

 #+BEGIN_SRC R
hello
 #+END_SRC

 #+begin_src R :session :output raw ex :export both :results code
x <- 1:5
 #+end_src

 #+BEGIN_SRC R
1
2
3
4
5
 #+END_SRC

** Functions
*** 特徴
   - コマンドラインから interactive に操作できることを重視して設計された.

*** Basics
    function () 宣言で生成される. 
    生成されると,関数クラスの R  オブジェクトとして保持される.

 #+begin_src R :session ex :export both :results code
f <- function (<arguments) {
  ### 
}
 #+end_src

   R の関数は *第一級オブジェクト*.
   - 他の関数の引数に渡すことができる.
   - 関数はネストできる.
   - 戻り値は body の最後に評価された結果.

*** Arguments:
    引数の照合には以下の順序がある.
    - 明確な名前指定
    - 部分一致する名前
    - 入力順

*** Lagy Evaluation
    遅延評価をサポートしている.

    以下の例では, a は評価されて b は評価されない.
    
 #+begin_src R :session ex :export both :results code
f <- function (a, b) {
    print (a)
    print (b)
}
f (45)
 #+end_src

*** example

 #+begin_src R :session ex :export both :results code
add2 <- function (x, y) {
    x + y
}

above10 <- function (x) {
    use <- x > 10
    x[use]
}

above <- function (x, n = 10) {
    use <- x > n
    x[use]
}
x <- 1:20
above (x, 12)
 #+end_src

 #+begin_src R :session ex :export both :results code
clumnmean <- function (y, removeNA = TRUE) {
    nc <- ncol (y)
    means <- numeric (c (nc))
    for (i in 1:nc) {
        means[i] <- mean (y[, 1], na.rm = removeNA)
    }
    means
}
 #+end_src

** Control Structures: 制御文
   制御文は Ruby に似ている.

*** if

#+begin_src R :session ex :export both :results code
if (x > 3) {
    y  <- 10
} else {
    y <- 0
}

# cf.) = (condition) ? foo: bar;
y <- if (x > 3) {
    10 
} else {
    0
}
#+end_src

*** For loops
  
#+begin_src R :session ex :export both :results code
for (i in 1:10) {
    print (i)
}
#+end_src

  matrix は以下のように loop させる
#+begin_src R :session ex :export both :results code
x <- matrix (1:6, 2, 3)

for (i in seq_len (nrow (x))) {
    for (j in seq_len (ncol (x))) {
        print (x[i, j])
    }
#+end_src

*** while loops
 
#+begin_src R :session ex :export both :results code
count <- 0
while (count < 10{)) {
   print (count)
   count <- count + 1
}
#+end_src

*** repeat / break / next
    repeat は infinite loop をつくるために利用する.
    break, next といっしょに利用する.

** オブジェクト (データ)
*** Atomic Classes of Objects
   R には 5 つのアトミックなオブジェクトがある.
   - charactor
   - numeric (real number)
   - integer
   - complex
   - ligical (true/false)

**** Integer
     Integer で表現するときは, numeric のあとに L をつける.

**** Nan
     Undefined valuable.(not a number).
**** Inf
     Inf...Infinity number

*** Basic Objects
**** valuables
 #+begin_src R
x <- 5
 #+end_src

**** vetor
     c で vector を生成する.

 #+begin_src R :session ex :export both :results code
  a <- c (0.5, 0.6)    # numeric
  b <- c (TRUE, FALSE) # logial
  c <- 0:5             # integer     
  d <- c ("a", "b", "c") #chalactor
 #+end_src

    型の混合も許す. tuple のような機能も併せ持つ.

 #+begin_src R :session ex :export both :results code
a <- (1,7, "a")
b <- (TRUE, "a")
 #+end_src

 #+begin_src R :session ex :export both :results code
x <- 0:6
class (x)
 #+end_src

 #+BEGIN_SRC R
integer
 #+END_SRC

**** list
     vector の特殊な形. 異なる型の vector を一つにまとめる.

 #+begin_src R :session ex :export both :results code
x <- list (1, "a", TRUE, 1 + 4i)
x
 #+end_src

 #+BEGIN_SRC R
1	a	TRUE	1+4i
 #+END_SRC

**** Matrices
     次元の性質をもつ vector. matrix 関数で生成.

 #+begin_src R :session ex :export both :results code
m <- matrix (nrow = 2, ncol = 3)
m
 #+end_src

 #+BEGIN_SRC R
nil	nil	nil
nil	nil	nil
 #+END_SRC

 #+begin_src R :session ex :export both :results code
m <- matrix (1:6, nrow = 2, ncol = 3)
m
 #+end_src

 #+BEGIN_SRC R
1	3	5
2	4	6
 #+END_SRC

***** dim
      dim 関数をつかうと vector に 次元の性質を与えることができる.

 #+begin_src R :session ex :export both :results code
m <- 1:10
dim (m) <- c (2,5)
m
 #+end_src

 #+BEGIN_SRC R
1	3	5	7	9
2	4	6	8	10
 #+END_SRC

***** cbind-ing and rbind-ing
      cbind, rbind を利用しても, vector から matrix を生成できる.

      #+begin_src R :session ex :export both :results code
     x <- 1:3
     y <- 10:12
     cbind (x, y)
      #+end_src
    
      #+BEGIN_SRC R
     1	10
     2	11
     3	12
      #+END_SRC

 #+begin_src R :session ex :export both :results code
rbind (x,y)
 #+end_src

 #+BEGIN_SRC R
1	2	3
10	11	12
 #+END_SRC

**** Factors
     vector の特殊なかたち. categorical data を扱う.

     integer vector について, それぞれの integer に label があるようなもの.

     enum 列挙型 ともいえる.factor 関数で作成.

 #+begin_src R :session ex :export both :results code
x <- factor (c ("yes", "no", "no", "yes", "no"), labels = c ("yes", "no"))
table (x)
 #+end_src

 #+BEGIN_SRC R
yes	3
no	2
 #+END_SRC

   - [[https://siguniang.wordpress.com/2010/09/30/rnumeric%E3%81%A8factor%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B/][numeric と factor の相互変換 | Siguniang's Blog]]

**** Data Frame
     複数のベクトルからなるリスト.
     - [[http://www.okada.jp.org/RWiki/?%A5%C7%A1%BC%A5%BF%A5%D5%A5%EC%A1%BC%A5%E0Tips%C2%E7%C1%B4][データフレーム Tips 大全 - RjpWiki]]
     - [[http://qiita.com/14021939/items/3436a153119bb88d49df][Ruby - R のデータフレーム (data.frame) について - Qiita]]

     list の特殊なかたち. list の list. 

     - list のなかのすべての list が同じ length をもつ必要がある.
     - list の中の list は column とみなされる.
     - list の中の各要素の番号は row とみなされる.

     - 通常は, rad.table (), read.csv によって生成される.
     - data.matrix (x) によって matrix 型に変換できる.

 #+begin_src R :session ex :export both :results code
x <- data.frame (foo = 1:4, bar = c (T,T,F,F))
 #+end_src

 #+BEGIN_SRC R
1	TRUE
2	TRUE
3	FALSE
4	FALSE
 #+END_SRC

***** 条件を指定してデータの抽出
 #+begin_src R
adaltAnimalData <- animaldata[animaldata$Age.Intake>=1,]
 #+end_src

***** フレームからベクターを抽出
 #+begin_src R :session ex :export both
distance <-student$distance
 #+end_src

**** names
     オブジェクトには名前をつけることができる. 可読性を向上させる.

 #+begin_src R :session ex :export both :results code
x <- 1:3
names (x) <- c ("foo", "bar", "norf")
 #+end_src

 #+begin_src R :session ex :export both :results code
x <- 1:3
names (x) <- c ("foo", "bar", "norf")

m <- matrix (1:4 nrow = 2, ncol = 2)
dimname (m) <- list (c ("a", "b"), c ("c", "d"))
 #+end_src

*** split
    カテゴリごとに DataFrame を分割する.
    - [[http://itbc-world.com/home/rfm/r%E3%81%AE%E6%A9%9F%E8%83%BD/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E5%9E%8B/][R.4.05. データフレーム型 | R Financial & Marketing Library]]

** Reading/Writing  Data
*** Reading
   read.csv CSV ファイルから読み込み.

 #+begin_src R :session ex :export both :results code
data <- read.csv ("foo.csv")
 #+end_src
  
   read.table R が適当に読み込んでくれる.

 #+begin_src R :session ex :export both :results code
data <- read.table ("foo.txt")
 #+end_src

 100 行だけ読み込む.

 #+begin_src R :session ex :export both :results code
initial <- read.table ("datatable.txt", nrows = 100)
 #+end_src

*** Writing
    dput, dump で テキストファイルて出力できる.

 #+begin_src R :session ex :export both :results code
y <- data.frame (a = 1, b = "a")
dput (y)
 #+end_src

 #+BEGIN_SRC R
1	a
 #+END_SRC

*** Outside
    Outsid World とのインタフェース.
    - file
    - gzfile
    - bzfile
    - url

    Connection を利用してファイルを開くこともできる.

 #+begin_src R :session ex :export both :results code
con <- file ("hw1_data.csv", "r") 
data <- read.csv (con)
close (con)
 #+end_src

   website からも URL を指定することでデータを取得することができる.

 #+begin_src R :session ex :export both :results code
con <- url ("http://www.jhsph.edu", "r")
data <- read.csv (con)
close (con)
 #+end_src

** Subsetting: 部分集合
   サブセット (部分集合).
*** vector

 #+begin_src R :session ex :export both :results code
x <- c ("a", "b", "c", "c", "d", "a")
x[1:4]
 #+end_src

 #+BEGIN_SRC R
a
b
c
c
 #+END_SRC

 条件を指定して, 部分を抽出することができる.

 #+begin_src R :session ex :export both :results code
x[x > "a"]
 #+end_src

 #+BEGIN_SRC R
b
c
c
d
 #+END_SRC

*** list

 #+begin_src R :session ex :export both :results code
x <- list (foo = 1:4, bar = 0.6)

# index で指定
x[1]

# $で指定
x$bar
 #+end_src

*** Marix
p
 #+begin_src R :session ex :export both :results code
x <- matrix (1:6, 2, 3)
 #+end_src

 #+BEGIN_SRC R
1	3	5
2	4	6
 #+END_SRC

 , を利用することで, 行や列だけを vector として抽出.

 #+begin_src R :session ex :export both :results code
x[1,]
 #+end_src

 #+BEGIN_SRC R
1
3
5
 #+END_SRC

*** NA Values を取り除く
    complete.cases で調べる.

   #+begin_src R :session ex :export both :results code
   x <- c (1, 2, NA, 4, NA, 5)
   y <- c ("a", "b", NA, "d", NA, "f")
   good <- complete.cases (x, y)
   good
   #+end_src

   #+BEGIN_SRC R
,  TRUE
   TRUE
   FALSE
   TRUE
   FALSE
   TRUE
   #+END_SRC

#+begin_src R :session ex :export both :results code
x[good]
#+end_src

#+BEGIN_SRC R
1
2
4
5
#+END_SRC
    
** Apply Functions
   R では, for 文を利用しないで, apply を利用すのがスマートな方法
   - 行列タイプのデータを処理する apply
   - データをグループごとにまとめて処理する tapply
   - ベクトルやリストに並んだデータを順次処理する lapply と sapply
   - 複数のベクトルやリストそれぞれからひとつづつデータをとりだして
     それらをまとめて処理する mapply.

   行列計算をするようなものだとイメージしよう.

**** Bookmarks
   - [[http://cse.naro.affrc.go.jp/takezawa/r-tips/r/24.html][R-Source]]
   - [[http://takenaka-akio.org/doc/r_auto/chapter_07_apply.html][R プログラム (TAKENAKA's Web Page)]]

*** apply (X, MARGIN, Fun, ...)
    ベクトルや行列, 配列の MARGIN に関数を適用し, 
    その結果の配列かリストを返す.

    適用する対象は MARGIN で指定する.
    - MARGIN = 1 ならば行
    - MARGIN = 2 ならば列
    - MARGIN = c (1,2) ならば各要素

*** lapply (X, Fun, ...)                  
    リストに関数を適用し, 結果のリストを返す. 

#+begin_src R :session ex :export both :results code
x <- list (a = 1:5, b = rnorm (10))
lapply (x, mean)
#+end_src

#+RESULTS:
#+BEGIN_SRC R
3	0.317047506752886
#+END_SRC

   無名関数も適用できる.

#+begin_src R :session ex :export both :results code
x <- list (a = matrix (1:4, 2, 2), b = matrix (1:6, 3, 2))
lapply (x, function (elt) elt[,1])
#+end_src

*** sapply (X, Fun, ...)
    リストに関数を適用し, 以下のいずれかを返す.
    - names 属性付きのベクトル
    - names 属性付きの行列

    lapply に名前をつけて返す.

*** tapply (X, INDEX, 関数, ...)
    グループ化された変数について, グループごとに関数を適用する. 
    INDEX は X の要素をグループに分ける因子の組み合わせのリスト 
    (通常は文字列ベクトル) を与え, 
    各グループに関数を適用した結果をベクトルもしくはリストで返す.  

    #+begin_src R :session ex :export both :results code
    x <- c (rnorm (10), runif (10), rnorm (10, 1))
    f <- gl (3,10)
    tapply (x, f, mean)
    #+end_src

    #+RESULTS:
    #+BEGIN_SRC R
    0.261313462923763
    0.506306891259737
    0.949854337382766
    #+END_SRC

    Excel の vlookup みたいなのを想像すればいい.
                                        
*** mapply (Fun F , x, y, z, ... )
    sapply () の多変量版. 
    x, y, z, はベクトルや行列などを複数個指定でき, 
    関数 F (x, y, z, ...) の結果をベクトルのリストで返す.

* Operations
** vector
#+begin_src R :session ex :export both :results code
x <- 1:4, y <- 4:9
x + y
x * y
x / y
#+end_src

** matrix

#+begin_src R :session ex :export both :results code
x <- matrix (1:4, 2, 2) 
#+end_src

#+BEGIN_SRC R
1	3
2	4
#+END_SRC

#+begin_src R :session ex :export both :results code
y <- matrix (rep (10, 4), 2, 2)
#+end_src

#+BEGIN_SRC R
10	10
10	10
#+END_SRC

#+begin_src R :session ex :export both :results code
x * y
#+end_src

#+BEGIN_SRC R
10	30
20	40
#+END_SRC
    
** 計算系
*** データ数
#+begin_src R
table (adaltAnimalData$Animal.Type)
#+end_src

#+RESULTS:

*** 中央値・平均値・標準偏差
#+begin_src R
# 最大値
max (maleage)

# 平均値
mean (animaldata$Age.Intake)

# 中央値
median (animaldata$Age.Intake)

# 標準偏差: Standard Deviation
sd (animaldata$Age.Intake)

# fine number summery
fivenum (animaldata$Age.Intake)
#+end_src

*** cor: 共分散
#+begin_src R
cor (bull$YearsPro, bull$BuckOuts)
#+end_src

*** マトリックスの作成    
#+begin_src R
myvars <- c ('YearsPro', 'Events', 'BuckOuts')
cor (bull[,myvars])
#+end_src


** 検定
*** zscore: Z 検定
    
#+begin_src R :session ex :export both
zcat <- (13- mean (catWeight))/sd (catWeight)
1-pnorm (zcat)
#+end_src

** 確率
*** table
    分割表 (Contingency Tables) を作成する. 要素数をカウントする.

#+begin_src R :session ex :export both
gtab <- table (acl$Grammy)
#+end_src

| N | 67 |
| Y | 49 |

*** prop
    確率分布表 (marginal table) を作成する.

#+begin_src R :session ex :export both
 prop.table (gtab)
#+end_src

| N | 0.577586206896552 |
| Y | 0.422413793103448 |

#+begin_src R :session ex :export both
gtab2 <- table (acl$Grammy, acl$Gender)
prop.table (gtab2)
#+end_src

| 0.181034482758621 | 0.396551724137931 |
| 0.120689655172414 | 0.301724137931034 |

** 描画系
*** plot :Scatter Plot を描写
#+begin_src R
plot (bull$YearsPro, bull$BuckOuts, xlab='Years Pro', ylab='Buckouts', main='Plot of Years Buckouts')
#+end_src

**** abline: 近似曲線をつける
 #+begin_src R
abline (lm (bull$BuckOuts~bull$YearsPro))
 #+end_src

*** hist: ヒストグラム
#+begin_src R
 hist (animaldata$Age.Intake, main="Histgram of Intage Ages",
      xlab="Age at Intake")
#+end_src

** 回帰分析
*** 線形回帰直線: linFit
    linFit を利用する.

#+begin_src R :session ex :export both
linFit (mens800$Year, mens800$Record)
#+end_src

*** 指数回帰曲線
    expFit を利用する.

#+begin_src R :session ex :export both :results code
expFit (time, mv)

# 以下で数年後を予想
expFitPrid (time, mv, 12)
#+end_src

*** ロジスティック回帰曲線
    logisticFit を利用する.
#+begin_src R :session ex :export both :results code
logisticFit (time, mv)

# 以下で数年後を予想
logisticFitPrid (time, mv, 12)
#+end_src
#+end_src

*** 3 つの回帰線を同時に表示する
    tripleFit を利用する.

#+begin_src R :session ex :export both :results code
tripleFit (time, mv)
#+end_src

** サンプル抽出
   1000 回の試行のなかで 10 回取り出す.

#+begin_src R :session ex :export both :results code
xbar10 <-rep (NA, 1000)
for (i in 1:1000)
{x <-sample (survey$name_letters, size =10)
xbar10[i] <- mean (x)}
#+end_src

** t-testing

#+begin_src R :session ex :export both :results code
t.test (age, mu=30)
t.test (age, mu=30, alternative = 'less')
t.test (age, mu=30, alternative = 'greater')
#+end_src

** aggregate
   R を用いてグループごとに集計したいという場合に用いる.
   
   aggregate (x, by, FUN, ...)

   - データ x を
   - リスト構造の by のグループごとに,
   - 関数 FUN で統計量としてまとめる

#+begin_src R
averages <- aggregate (x=list (steps=data$steps),
                      by=list (interval=data$interval),
                      FUN=mean)
#+end_src

* データクリーニング
** sort
    order / sort.list を利用する.
    - [[http://d.hatena.ne.jp/kkobayashi_a/20070706/p2][R でデータフレームをソートする方法 - XXXannex]]

#+begin_src R :session ex :export both :results code
    stateData <- stateData[order (stateData[,col]),]
#+end_src

** 不正な値の削除
   numeric でなければ NA を挿入する. 

#+begin_src R :session ex :export both :results code
     data[, 11] <- as.numeric (data[, 11])
#+end_src

** 重複除去
   unique を利用する.

#+begin_src R :session ex :export both :results code
   u <- unique (d)   
#+end_src

* Simulation
** Randum Number
  - dnorm
  - pnorm
  - qnorm
  - rnorm

#+begin_src R :session ex :export both :results code
dnorm (x, mean=0 sd=1, log=FALSE) 
pnorm (x, mean=0 sd=1, lower.tail=TRUE, log.p=FALSE) 
qnorm (x, mean=0 sd=1, lower.tail=TRUE, log.p=FALSE) 
rnotm (x, mean=0 sd=1)
#+end_src

-1 ~ 1 の間で 10 のランダム変数を.

#+begin_src R :session ex :export both :results code
x <- rnorm (10)
#+end_src

平均と分散を指定.

#+begin_src R :session ex :export both :results code
x <- rnorm (10, 20, 2)
#+end_src

set.seed をセットすると, 実行するたびに毎回異なる数を得られる.

*** ex: Linier Models
    y = b0 + b1*x + e
   
 #+begin_src R :session ex :export both :results code
set.seed (20)
x <- rnorm (100)
e <- rnorm (100, 0, 2)
y <- 0.5 + 2 * x + e
 #+end_src

** Random Sampling
   sample function で 母集団のなかからサンプルをランダムに取り出す.

#+begin_src R :session ex :export both :results code
set.seed (1)   
sample (1:10, 4)
sample (letters, 4)
#+end_src

* Debug
** ess-tracebug
   ess-tracebug を利用する. 
  - [[http://code.google.com/p/ess-tracebug/][ess-tracebug - Tracing and debugging R code in ESS. - Google Project Hosting]]

  BreakPoint 系 ess-bp-xxx

** str
   コンパクトにオブジェクトの内部の構造を表示する.

#+begin_src R :session ex :export both :results code
str (str)
#+end_src

** summary
   オブジェクトの内容を要約して表示.

** system.time
   処理にかかった時間を要約して表示してくれる.

** Rprof
   R の プロファイラ. 
   - Rprof ()
   - summaryRpof ()

* Tools
** CRAN
   パッケージリポジトリ.

   国内サーバの指定.

#+begin_src R :session ex :export both :results code
options (repos="http://cran.md.tsukuba.ac.jp") 
#+end_src

* ブックマーク
** 文法
  - [[http://cse.naro.affrc.go.jp/takezawa/r-tips/r.html][R-Tips]]
  - [[http://www.okada.jp.org/RWiki/index.php?RjpWiki][RjpWiki - RjpWiki]]
  - [[http://www.is.titech.ac.jp/is-wiki/?maselab%2FR][maselab/R- Dept. of Math. & Comput. Sci.]]
