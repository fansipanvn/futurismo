#+OPTIONS: toc:nil
* Unix コマンド
** find

- [[http://www.xmisao.com/2013/09/01/how-to-use-find-and-xargs.html][find と xargs の基本的な使い方 -- ぺけみさお]]

*** -exec と xargs の違い
    - exec は各行にたいして処理が実施される.
    - args はすべての行にたいして処理が実施される.

#+begin_src bash
find . -name "*.txt" -exec wc -l {} \;
find . -name "*.txt" | xargs wc -l
#+end_src

    -type f でファイルのみ. ディレクトリ無視.

** sed

- [[http://nunleeuw.hateblo.jp/entry/2013/03/09/202629][sed で個人的によく使うコマンド集 - emptyshelf]]

- sed の i オプションなしで置換を実行してみて, 問題がないか確認
- sed に i オプションをつけて実行

*** ヘッダの挿入
#+begin_src sh
sed -i '1s/^/test\n/' filename
sed -i '1i\test' filename
#+end_src

wiki にヘッダを挿入する

#+begin_src sh
find . -name "*.org" -exec sed -i '1i\#+OPTIONS: toc:nil' {} \;
#+end_src

* シェルスクリプト
** 関数
   引数は, $1, $2 で参照できる.

   #+begin_src bash
   display () {
     echo "This is a sample function"
   }
   #+end_src
   
** コマンド置換
   `` または, $() を利用する.

   #+begin_src bash
   $ cd /lib/modules/$(uname -r)/
   #+end_src

** 引数

| Parameter    | Meaning                       |
|--------------+-------------------------------|
| $0           | Script name                   |
| $1           | First parameter               |
| $2, $3, etc. | Second, third parameter, etc. |
| $*           | All parameters                |
| $#           | Number of arguments           |

** 引数チェック
*** 引数の数をチェック

#+begin_src sh
if [ $# != 1 ]; then
    echo "usage: $0 file_path" 1>&2
    exit 1
fi
#+end_src

*** ファイルやディレクトリパスが存在するか

#+begin_src sh
if [ -e パス ]; then
    # 存在する場合
else
    # 存在しない場合
fi
#+end_src
** Statements
*** if
    In compact form, the syntax of an if statement is:

    #+begin_src bash
    if TEST-COMMANDS; then CONSEQUENT-COMMANDS; fi
    #+end_src

    A more general definition is:

    #+begin_src bash
    if condition
    then # if condition; then
      statements
    else
      statements
    fi
    #+end_src

**** condition
     |-----------+----------------------------------------|
     | Condition | Meaning                                |
     |-----------+----------------------------------------|
     | -e file   | Check if the file exists.              |
     | -d file   | Check if the file is a directory.      |
     | -f file   | Check if the file is a regular file    |
     | -s file   | Check if the file is of non-zero size. |
     | -g file   | Check if the file has sgid set.        |
     | -u file   | Check if the file has suid set.        |
     | -r file   | Check if the file is readable.         |
     | -w file   | Check if the file is writable.         |
     | -x file   | Check if the file is executable.       |
     |-----------+----------------------------------------|

**** numerical tests

     |----------+--------------------------|
     | Operator | Meaning                  |
     |----------+--------------------------|
     | -eq      | Equal to                 |
     | -ne      | Not equal to             |
     | -gt      | Greater than             |
     | -lt      | Less than                |
     | -ge      | Greater than or equal to |
     | -le      | Less than or equal to    |
     |----------+--------------------------|
*** case 
    #+begin_src bash
    case expression in
       pattern1) execute commands;;
       pattern2) execute commands;;
       pattern3) execute commands;;
       pattern4) execute commands;;
       * )       execute some default commands or nothing ;;
    esac
    #+end_src

*** for
    #+begin_src bash
    for variable-name in list
    do
      execute one iteration for each item in the
      list until the list is finished
    done
    #+end_src

**** コマンドラインから連番のフォルダ作成
   - [[http://shellscript.sunone.me/for.html][for 文の使用方法 - UNIX & Linux コマンド・シェルスクリプト リファレンス]]

   この程度はさらっと書きたいところだね.
     
   #+begin_src bash
     % for i in `seq 1 18`
     > do
     > mkdir $i
     > done 
   #+end_src

*** while
    #+begin_src bash
    while condition is true
    do
        Commands for execution
        ----
    done
    #+end_src

*** until
    #+begin_src bash
    until condition is false
    do
        Commands for execution
        ----
    done
    #+end_src
** ファイル・ディレクトリ操作

   - [[http://d.hatena.ne.jp/zariganitosh/20100921/get_file_name_ext_dir][ファイルパスからファイル名や拡張子を自由に取り出す - ザリガニが見ていた.... ]]

#+begin_src sh
$ fpath='/a/b/c.d.e'

# ファイル名を取り出す (拡張子あり)
$ fname_ext="${fpath##*/}"
$ echo $fname_ext
c.d.e

# ファイル名を取り出す (拡張子なし)
$ fname="${fname_ext%.*}"
$ echo $fname
c.d

# 拡張子を取り出す
$ fext="${fpath##*.}"
$ echo $fext
e

# ディレクトリを取り出す
$ fdir="${fpath%/*}"
$ echo $fdir
/a/b
#+end_src

** 日時操作
`date xxx `でかこんで実行する.

#+begin_src sh
DATE=`date -d "$1" '+%s'`
#+end_src

- [[http://shellscript.sunone.me/date.html][日付を取得する - UNIX & Linux コマンド・シェルスクリプト リファレンス]]

| フォーマット               | コマンド              |
|----------------------------+-----------------------|
| yyyy/mm/dd                 | date '+%Y/%m/%d'      |
| yyyy/mm/dd (Sun..Sat)      | date '+%Y/%m/%d (%a)' |
| yy/mm/dd                   | date '+%y/%m/%d'      |
| yyyy-mm-dd                 | date '+%F'            |
| mm/dd/yy                   | date '+%D'            |
| hh:mm (24 時間制)          | date '+%R'            |
| hh:mm:ss (24 時間制)       | date '+%T'            |
| hh:mm:ss AM PM (12 時間制) | date '+%r'            |

** temp ファイル作成
   - TEMP=$(mktemp /tmp/tempfile.XXXXXXXX) 	To create a temporary file
   - TEMPDIR=$(mktemp -d /tmp/tempdir.XXXXXXXX) To create a temporary directory

** String
   - ${string:0:1} のように書くと, 0-1 文字目を抜きだし.
   - ${#abc}のように書くと, 文字数を抜きだし.
   - [ string1 == string2 ] 文字列の比較.
** Debug
  - set -x    # turns on debugging
  - set +x    # turns off debugging
** 入力待ち
   read を利用する.
   
#+begin_src bash
#!/bin/bash
while read KEY
do
    case $KEY in
	"boy" )
	    echo Hey,boy!!
	    break;;
	"girl" )
	    echo Hey,girl!!
	    break;;
	,*)
	    echo Typing boy or girl;;
    esac
done
#+end_src

